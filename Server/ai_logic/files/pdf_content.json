{
    "Page 1": "Adept ARCL Reference Guide\nThis is a PDF/print version of the Adept ARCL Reference Guide. A Table of Contents is\nprovided so that you can locate the desired topics. Because the Adept ARCL Reference Guide\nwas designed for online viewing, there may be slight formatting anomalies in the PDF/print\nversion. Additionally, links to external documents will not work in the PDF file.\nNOTE: Please see the ReadMe file, which is included with your Adept Motivity software, for a description\nof any recent changes.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 1\n\nAdept ARCL Reference Guide\nThis is a PDF/print version of the Adept ARCL Reference Guide. A Table of Contents is\nprovided so that you can locate the desired topics. Because the Adept ARCL Reference Guide\nwas designed for online viewing, there may be slight formatting anomalies in the PDF/print\nversion. Additionally, links to external documents will not work in the PDF file.\nNOTE:\n Please see the ReadMe file, which is included with your Adept Motivity software, for a description\nof any recent changes.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 1",
    "Page 2": "Copyright Notice\nThe information contained herein is the property of Adept Technology, Inc., and shall not be reproduced in\nwhole or in part without prior written approval of Adept Technology, Inc. The information herein is subject\nto change without notice and should not be construed as a commitment by Adept Technology, Inc. The doc-\numentation is periodically reviewed and revised.\nAdept Technology, Inc., assumes no responsibility for any errors or omissions in the documentation. Critical\nevaluation of the documentation by the user is welcomed. Your comments assist us in preparation of\nfuture documentation. Please submit your comments to: techpubs@adept.com.\nCopyright \uf6d92006-2016 by Adept Technology, Inc. All rights reserved.\nAdept, the Adept logo, the Adept Technology logo, AdeptVision, AIM, Blox, Bloxview, FireBlox, Fireview,\nMeta Controls, MetaControls, Metawire, Motivity, Soft Machines, and Visual Machines are registered trade-\nmarks of Adept Technology, Inc.\nBrain on Board is a registered trademark of Adept Technology, Inc. in Germany.\nAdept Lynx, Adept Enterprise Manager 1100, ARAM, ARCL, MobileEyes, MobilePlanner, and SetNetGo are\ntrademarks of Adept Technology, Inc.\nAny trademarks from other companies used in this publication\nare the property of those respective companies.\nCreated in the United States of America\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 2\n\nCopyright Notice\nThe information contained herein is the property of Adept Technology, Inc., and shall not be reproduced in\nwhole or in part without prior written approval of Adept Technology, Inc. The information herein is subject\nto change without notice and should not be construed as a commitment by Adept Technology, Inc. The doc-\numentation is periodically reviewed and revised.\nAdept Technology, Inc., assumes no responsibility for any errors or omissions in the documentation. Critical\nevaluation of the documentation by the user is welcomed. Your comments assist us in preparation of\nfuture documentation. Please submit your comments to: techpubs@adept.com.\nCopyright\n \uf6d9\n2006-2016 by Adept Technology, Inc. All rights reserved.\nAdept, the Adept logo, the Adept Technology logo, AdeptVision, AIM, Blox, Bloxview, FireBlox, Fireview,\nMeta Controls, MetaControls, Metawire, Motivity, Soft Machines, and Visual Machines are registered trade-\nmarks of Adept Technology, Inc.\nBrain on Board is a registered trademark of Adept Technology, Inc. in Germany.\nAdept Lynx, Adept Enterprise Manager 1100, ARAM, ARCL, MobileEyes, MobilePlanner, and SetNetGo are\ntrademarks of Adept Technology, Inc.\nAny trademarks from other companies used in this publication\nare the property of those respective companies.\nCreated in the United States of America\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 2",
    "Page 3": "Table Of Contents\nIntroduction to ARCL\n25\nVersion Requirements\n26\nHow Do I Begin\n27\nRelated Manuals\n28\nHow Can I Get Help?\n29\nSet ARCL Parameters in MobilePlanner\n30\nAccessing the Configuration Options\n31\nUnderstanding the Configuration Parameters\n37\nOutgoing ARCL Connection Setup Parameters\n38\nOutgoing ARCL Commands Parameters\n39\nOutgoing Enterprise ARCL Connection Setup Parameters\n40\nOutgoing Enterprise ARCL Commands Parameters\n41\nSee Also...\n41\nConnect to ARCL Using a Telnet Client\n42\nSetting the Connection Parameters\n43\nConnecting to ARCL\n44\nSee Also...\n45\nUsing the ARCL Commands\n46\nSee Also...\n46\nUnderstanding the Commands\n47\nDocument Conventions\n47\nCommand Notes\n48\nData Types\n48\nStatus and Error Messages\n50\nStatus Conditions\n51\nUsing ARCL Variables\n55\nUsing Tasks and Macros\n56\nForever Tasks\n57\nUsing Configuration Commands\n58\nUsing the Queuing Commands\n60\nWorking With Payloads\n61\nCreating a Map\n63\nTracking Sectors\n64\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 3\n\nTable Of Contents\nIntroduction to ARCL\n25\nVersion Requirements\n26\nHow Do I Begin\n27\nRelated Manuals\n28\nHow Can I Get Help?\n29\nSet ARCL Parameters in MobilePlanner\n30\nAccessing the Configuration Options\n31\nUnderstanding the Configuration Parameters\n37\nOutgoing ARCL Connection Setup Parameters\n38\nOutgoing ARCL Commands Parameters\n39\nOutgoing Enterprise ARCL Connection Setup Parameters\n40\nOutgoing Enterprise ARCL Commands Parameters\n41\nSee Also...\n41\nConnect to ARCL Using a Telnet Client\n42\nSetting the Connection Parameters\n43\nConnecting to ARCL\n44\nSee Also...\n45\nUsing the ARCL Commands\n46\nSee Also...\n46\nUnderstanding the Commands\n47\nDocument Conventions\n47\nCommand Notes\n48\nData Types\n48\nStatus and Error Messages\n50\nStatus Conditions\n51\nUsing ARCL Variables\n55\nUsing Tasks and Macros\n56\nForever Tasks\n57\nUsing Configuration Commands\n58\nUsing the Queuing Commands\n60\nWorking With Payloads\n61\nCreating a Map\n63\nTracking Sectors\n64\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 3",
    "Page 4": "Navigating and Localizing\n65\nUsing Range Devices and Custom Sensors\n66\nMonitoring the I/O Ports\n68\nARCL Command Reference\n70\nSee Also...\n73\nanalogInputList Command\n74\nSyntax\n74\nUsage Considerations\n74\nParameters\n74\nResponses\n74\nDetails\n74\nExamples\n74\nRelated Commands\n74\nanalogInputQueryRaw Command\n75\nSyntax\n75\nUsage Considerations\n75\nParameters\n75\nResponses\n75\nDetails\n75\nRelated Commands\n75\nanalogInputQueryVoltage Command\n76\nSyntax\n76\nUsage Considerations\n76\nParameters\n76\nResponses\n76\nDetails\n76\nRelated Commands\n76\napplicationFaultClear Command\n77\nSyntax\n77\nUsage Considerations\n77\nParameters\n77\nResponses\n77\nDetails\n77\nExamples\n77\nRelated Commands\n78\napplicationFaultQuery Command\n79\nSyntax\n79\nUsage Considerations\n79\nParameters\n79\nResponses\n79\nDetails\n79\nExamples\n79\nRelated Commands\n79\napplicationFaultSet Command\n81\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 4\n\nNavigating and Localizing\n65\nUsing Range Devices and Custom Sensors\n66\nMonitoring the I/O Ports\n68\nARCL Command Reference\n70\nSee Also...\n73\nanalogInputList Command\n74\nSyntax\n74\nUsage Considerations\n74\nParameters\n74\nResponses\n74\nDetails\n74\nExamples\n74\nRelated Commands\n74\nanalogInputQueryRaw Command\n75\nSyntax\n75\nUsage Considerations\n75\nParameters\n75\nResponses\n75\nDetails\n75\nRelated Commands\n75\nanalogInputQueryVoltage Command\n76\nSyntax\n76\nUsage Considerations\n76\nParameters\n76\nResponses\n76\nDetails\n76\nRelated Commands\n76\napplicationFaultClear Command\n77\nSyntax\n77\nUsage Considerations\n77\nParameters\n77\nResponses\n77\nDetails\n77\nExamples\n77\nRelated Commands\n78\napplicationFaultQuery Command\n79\nSyntax\n79\nUsage Considerations\n79\nParameters\n79\nResponses\n79\nDetails\n79\nExamples\n79\nRelated Commands\n79\napplicationFaultSet Command\n81\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 4",
    "Page 5": "Syntax\n81\nUsage Considerations\n81\nParameters\n81\nResponses\n81\nDetails\n81\nExamples\n81\nRelated Commands\n82\narclSendText Command\n83\nSyntax\n83\nUsage Considerations\n83\nARAM Settings\n83\nParameters\n83\nResponses\n83\nDetails\n83\nExample\n83\nclearAllObstacles Command\n84\nSyntax\n84\nUsage Considerations\n84\nParameters\n84\nResponses\n84\nDetails\n84\nExamples\n84\nconfigAdd Command\n85\nSyntax\n85\nUsage Considerations\n85\nARAM Settings\n85\nParameters\n85\nResponses\n85\nDetails\n85\nExamples\n85\nRelated Commands\n86\nconfigParse Command\n87\nSyntax\n87\nUsage Considerations\n87\nARAM Settings\n87\nParameters\n87\nResponses\n87\nDetails\n87\nExamples\n87\nRelated Commands\n87\nconfigStart Command\n89\nSyntax\n89\nUsage Considerations\n89\nARAM Settings\n89\nParameters\n89\nResponses\n89\nDetails\n89\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 5\n\nSyntax\n81\nUsage Considerations\n81\nParameters\n81\nResponses\n81\nDetails\n81\nExamples\n81\nRelated Commands\n82\narclSendText Command\n83\nSyntax\n83\nUsage Considerations\n83\nARAM Settings\n83\nParameters\n83\nResponses\n83\nDetails\n83\nExample\n83\nclearAllObstacles Command\n84\nSyntax\n84\nUsage Considerations\n84\nParameters\n84\nResponses\n84\nDetails\n84\nExamples\n84\nconfigAdd Command\n85\nSyntax\n85\nUsage Considerations\n85\nARAM Settings\n85\nParameters\n85\nResponses\n85\nDetails\n85\nExamples\n85\nRelated Commands\n86\nconfigParse Command\n87\nSyntax\n87\nUsage Considerations\n87\nARAM Settings\n87\nParameters\n87\nResponses\n87\nDetails\n87\nExamples\n87\nRelated Commands\n87\nconfigStart Command\n89\nSyntax\n89\nUsage Considerations\n89\nARAM Settings\n89\nParameters\n89\nResponses\n89\nDetails\n89\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 5",
    "Page 6": "Examples\n89\nRelated Commands\n90\nconnectOutgoing Command\n91\nSyntax\n91\nUsage Considerations\n91\nParameters\n91\nResponses\n91\nDetails\n91\nExamples\n91\ncreateInfo Command\n92\nSyntax\n92\nUsage Considerations\n92\nParameters\n92\nResponses\n92\nDetails\n92\nExamples\n92\nRelated Commands\n93\ncustomReadingAddAbsolute Command\n94\nSyntax\n94\nUsage Considerations\n94\nARAM Settings\n94\nParameters\n94\nResponses\n94\nDetails\n94\nExamples\n95\nRelated Commands\n95\ncustomReadingAdd Command\n96\nSyntax\n96\nUsage Considerations\n96\nARAM Settings\n96\nParameters\n96\nResponses\n96\nDetails\n96\nExamples\n97\nRelated Commands\n97\ncustomReadingsClear Command\n98\nSyntax\n98\nUsage Considerations\n98\nARAM Settings\n98\nParameters\n98\nResponses\n98\nDetails\n98\nExamples\n98\nRelated Commands\n99\ndistanceBetween Command\n100\nSyntax\n100\nUsage Considerations\n100\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 6\n\nExamples\n89\nRelated Commands\n90\nconnectOutgoing Command\n91\nSyntax\n91\nUsage Considerations\n91\nParameters\n91\nResponses\n91\nDetails\n91\nExamples\n91\ncreateInfo Command\n92\nSyntax\n92\nUsage Considerations\n92\nParameters\n92\nResponses\n92\nDetails\n92\nExamples\n92\nRelated Commands\n93\ncustomReadingAddAbsolute Command\n94\nSyntax\n94\nUsage Considerations\n94\nARAM Settings\n94\nParameters\n94\nResponses\n94\nDetails\n94\nExamples\n95\nRelated Commands\n95\ncustomReadingAdd Command\n96\nSyntax\n96\nUsage Considerations\n96\nARAM Settings\n96\nParameters\n96\nResponses\n96\nDetails\n96\nExamples\n97\nRelated Commands\n97\ncustomReadingsClear Command\n98\nSyntax\n98\nUsage Considerations\n98\nARAM Settings\n98\nParameters\n98\nResponses\n98\nDetails\n98\nExamples\n98\nRelated Commands\n99\ndistanceBetween Command\n100\nSyntax\n100\nUsage Considerations\n100\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 6",
    "Page 7": "Parameters\n100\nResponses\n100\nDetails\n100\nExamples\n100\nRelated Commandss\n101\ndistanceFromHere Command\n102\nSyntax\n102\nUsage Considerations\n102\nParameters\n102\nResponses\n102\nDetails\n102\nExamples\n102\nRelated Commands\n103\ndock Command\n104\nSyntax\n104\nUsage Considerations\n104\nParameters\n104\nResponses\n104\nDetails\n104\nExamples\n104\nRelated Commands\n104\ndoTask Command\n105\nSyntax\n105\nUsage Considerations\n105\nParameters\n105\nResponses\n105\nDetails\n105\nExamples\n105\nRelated Commands\n106\ndoTaskInstant Command\n107\nSyntax\n107\nUsage Considerations\n107\nParameters\n107\nResponses\n107\nDetails\n107\nRelated Commands\n107\necho Command\n109\nSyntax\n109\nUsage Considerations\n109\nParameters\n109\nResponses\n109\nExamples\n109\nenableMotors Command\n110\nSyntax\n110\nUsage Considerations\n110\nParameters\n110\nResponses\n110\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 7\n\nParameters\n100\nResponses\n100\nDetails\n100\nExamples\n100\nRelated Commandss\n101\ndistanceFromHere Command\n102\nSyntax\n102\nUsage Considerations\n102\nParameters\n102\nResponses\n102\nDetails\n102\nExamples\n102\nRelated Commands\n103\ndock Command\n104\nSyntax\n104\nUsage Considerations\n104\nParameters\n104\nResponses\n104\nDetails\n104\nExamples\n104\nRelated Commands\n104\ndoTask Command\n105\nSyntax\n105\nUsage Considerations\n105\nParameters\n105\nResponses\n105\nDetails\n105\nExamples\n105\nRelated Commands\n106\ndoTaskInstant Command\n107\nSyntax\n107\nUsage Considerations\n107\nParameters\n107\nResponses\n107\nDetails\n107\nRelated Commands\n107\necho Command\n109\nSyntax\n109\nUsage Considerations\n109\nParameters\n109\nResponses\n109\nExamples\n109\nenableMotors Command\n110\nSyntax\n110\nUsage Considerations\n110\nParameters\n110\nResponses\n110\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 7",
    "Page 8": "Examples\n110\nRelated Commands\n110\netaRequest Command\n111\nSyntax\n111\nUsage Considerations\n111\nParameters\n111\nResponses\n111\nDetails\n111\nExamples\n111\nRelated Commands\n111\nexecuteMacro Command\n112\nSyntax\n112\nUsage Considerations\n112\nParameters\n112\nResponses\n112\nDetails\n112\nExample\n112\nRelated Commands\n113\nfaultsGet Command\n114\nSyntax\n114\nUsage Considerations\n114\nParameters\n114\nResponses\n114\nDetails\n114\nExamples\n114\nRelated Commands\n115\nfollow Command\n116\nSyntax\n116\nUsage Considerations\n116\nParameters\n116\nResponses\n116\nDetails\n116\nExamples\n116\nRelated Commands\n116\ngetConfigSectionInfo Command\n117\nSyntax\n117\nUsage Considerations\n117\nARAM Settings\n117\nParameters\n117\nResponses\n117\nDetails\n117\nExamples\n118\nRelated Commands\n118\ngetConfigSectionList Command\n119\nSyntax\n119\nUsage Considerations\n119\nARAM Settings\n119\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 8\n\nExamples\n110\nRelated Commands\n110\netaRequest Command\n111\nSyntax\n111\nUsage Considerations\n111\nParameters\n111\nResponses\n111\nDetails\n111\nExamples\n111\nRelated Commands\n111\nexecuteMacro Command\n112\nSyntax\n112\nUsage Considerations\n112\nParameters\n112\nResponses\n112\nDetails\n112\nExample\n112\nRelated Commands\n113\nfaultsGet Command\n114\nSyntax\n114\nUsage Considerations\n114\nParameters\n114\nResponses\n114\nDetails\n114\nExamples\n114\nRelated Commands\n115\nfollow Command\n116\nSyntax\n116\nUsage Considerations\n116\nParameters\n116\nResponses\n116\nDetails\n116\nExamples\n116\nRelated Commands\n116\ngetConfigSectionInfo Command\n117\nSyntax\n117\nUsage Considerations\n117\nARAM Settings\n117\nParameters\n117\nResponses\n117\nDetails\n117\nExamples\n118\nRelated Commands\n118\ngetConfigSectionList Command\n119\nSyntax\n119\nUsage Considerations\n119\nARAM Settings\n119\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 8",
    "Page 9": "Parameters\n119\nValue\n119\nDetails\n119\nExamples\n119\nRelated Commands\n120\ngetConfigSectionValues Command\n121\nSyntax\n121\nUsage Considerations\n121\nARAM Settings\n121\nParameters\n121\nResponses\n121\nDetails\n121\nExamples\n121\nRelated Commands\n122\ngetDateTime Command\n123\nSyntax\n123\nUsage Considerations\n123\nParameters\n123\nExamples\n123\ngetGoals Command\n124\nSyntax\n124\nUsage Considerations\n124\nParameters\n124\nResponses\n124\nExamples\n124\nRelated Commands\n124\ngetInfo Command\n126\nSyntax\n126\nUsage Considerations\n126\nParameters\n126\nResponses\n126\nDetails\n126\nExamples\n126\nRelated Commands\n126\ngetInfoList Command\n128\nSyntax\n128\nUsage Considerations\n128\nParameters\n128\nResponses\n128\nDetails\n128\nExamples\n128\nRelated Commands\n129\ngetMacros Command\n130\nSyntax\n130\nUsage Considerations\n130\nParameters\n130\nResponses\n130\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 9\n\nParameters\n119\nValue\n119\nDetails\n119\nExamples\n119\nRelated Commands\n120\ngetConfigSectionValues Command\n121\nSyntax\n121\nUsage Considerations\n121\nARAM Settings\n121\nParameters\n121\nResponses\n121\nDetails\n121\nExamples\n121\nRelated Commands\n122\ngetDateTime Command\n123\nSyntax\n123\nUsage Considerations\n123\nParameters\n123\nExamples\n123\ngetGoals Command\n124\nSyntax\n124\nUsage Considerations\n124\nParameters\n124\nResponses\n124\nExamples\n124\nRelated Commands\n124\ngetInfo Command\n126\nSyntax\n126\nUsage Considerations\n126\nParameters\n126\nResponses\n126\nDetails\n126\nExamples\n126\nRelated Commands\n126\ngetInfoList Command\n128\nSyntax\n128\nUsage Considerations\n128\nParameters\n128\nResponses\n128\nDetails\n128\nExamples\n128\nRelated Commands\n129\ngetMacros Command\n130\nSyntax\n130\nUsage Considerations\n130\nParameters\n130\nResponses\n130\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 9",
    "Page 10": "Details\n130\nExamples\n130\nRelated Commands\n130\ngetPayload\u00a0Command\n132\nSyntax\n132\nUsage Considerations\n132\nParameters\n132\nResponses\n132\nDetails\n132\nExamples\n132\nRelated Commands\n132\ngetPrecedence Command\n133\nSyntax\n133\nUsage Considerations\n133\nParameters\n133\nResponses\n133\nDetails\n133\nExamples\n133\nRelated Commands\n133\ngetRoutes Command\n134\nSyntax\n134\nUsage Considerations\n134\nParameters\n134\nResponses\n134\nExamples\n134\nRelated Commands\n134\ngoto Command\n135\nSyntax\n135\nUsage Considerations\n135\nParameters\n135\nResponses\n135\nDetails\n135\nExamples\n135\nRelated Commands\n136\ngotoPoint Command\n137\nSyntax\n137\nUsage Considerations\n137\nParameters\n137\nResponses\n137\nDetails\n137\nExamples\n137\nRelated Commands\n138\ngotoRouteGoal Command\n139\nSyntax\n139\nUsage Considerations\n139\nParameters\n139\nResponses\n139\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 10\n\nDetails\n130\nExamples\n130\nRelated Commands\n130\ngetPayload\u00a0Command\n132\nSyntax\n132\nUsage Considerations\n132\nParameters\n132\nResponses\n132\nDetails\n132\nExamples\n132\nRelated Commands\n132\ngetPrecedence Command\n133\nSyntax\n133\nUsage Considerations\n133\nParameters\n133\nResponses\n133\nDetails\n133\nExamples\n133\nRelated Commands\n133\ngetRoutes Command\n134\nSyntax\n134\nUsage Considerations\n134\nParameters\n134\nResponses\n134\nExamples\n134\nRelated Commands\n134\ngoto Command\n135\nSyntax\n135\nUsage Considerations\n135\nParameters\n135\nResponses\n135\nDetails\n135\nExamples\n135\nRelated Commands\n136\ngotoPoint Command\n137\nSyntax\n137\nUsage Considerations\n137\nParameters\n137\nResponses\n137\nDetails\n137\nExamples\n137\nRelated Commands\n138\ngotoRouteGoal Command\n139\nSyntax\n139\nUsage Considerations\n139\nParameters\n139\nResponses\n139\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 10",
    "Page 11": "Details\n139\nExamples\n139\nRelated Commands\n140\nhelp Command\n141\nSyntax\n141\nUsage Considerations\n141\nParameters\n141\nDetails\n141\nExamples\n141\ninputList Command\n142\nSyntax\n142\nUsage Considerations\n142\nParameters\n142\nResponses\n142\nDetails\n142\nExamples\n142\nRelated Commands\n142\ninputQuery Command\n144\nSyntax\n144\nUsage Considerations\n144\nParameters\n144\nResponses\n144\nDetails\n144\nExamples\n144\nRelated Commands\n144\nlistAdd Command\n145\nSyntax\n145\nUsage Considerations\n145\nParameters\n145\nResponses\n145\nDetails\n145\nExamples\n145\nRelated Commands\n146\nlistExecute Command\n147\nSyntax\n147\nUsage Considerations\n147\nParameters\n147\nResponses\n147\nDetails\n147\nExamples\n147\nRelated Commands\n148\nlistStart Command\n149\nSyntax\n149\nUsage Considerations\n149\nParameters\n149\nResponses\n149\nDetails\n149\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 11\n\nDetails\n139\nExamples\n139\nRelated Commands\n140\nhelp Command\n141\nSyntax\n141\nUsage Considerations\n141\nParameters\n141\nDetails\n141\nExamples\n141\ninputList Command\n142\nSyntax\n142\nUsage Considerations\n142\nParameters\n142\nResponses\n142\nDetails\n142\nExamples\n142\nRelated Commands\n142\ninputQuery Command\n144\nSyntax\n144\nUsage Considerations\n144\nParameters\n144\nResponses\n144\nDetails\n144\nExamples\n144\nRelated Commands\n144\nlistAdd Command\n145\nSyntax\n145\nUsage Considerations\n145\nParameters\n145\nResponses\n145\nDetails\n145\nExamples\n145\nRelated Commands\n146\nlistExecute Command\n147\nSyntax\n147\nUsage Considerations\n147\nParameters\n147\nResponses\n147\nDetails\n147\nExamples\n147\nRelated Commands\n148\nlistStart Command\n149\nSyntax\n149\nUsage Considerations\n149\nParameters\n149\nResponses\n149\nDetails\n149\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 11",
    "Page 12": "Examples\n149\nRelated Commands\n150\nlocalizeToPoint Command\n151\nSyntax\n151\nUsage Considerations\n151\nParameters\n151\nResponses\n151\nDetails\n151\nExamples\n151\nRelated Commands\n152\nlog Command\n153\nSyntax\n153\nUsage Considerations\n153\nParameters\n153\nResponses\n153\nDetails\n153\nExamples\n153\nRelated Commands\n154\nmapObjectInfo Command\n155\nSyntax\n155\nUsage Considerations\n155\nParameters\n155\nResponses\n155\nDetails\n155\nExamples\n156\nRelated Commands\n156\nmapObjectList Command\n157\nSyntax\n157\nUsage Considerations\n157\nParameters\n157\nResponses\n157\nDetails\n157\nExamples\n158\nRelated Commands\n158\nmapObjectTypeInfo Command\n159\nSyntax\n159\nUsage Considerations\n159\nParameters\n159\nResponses\n159\nDetails\n159\nExamples\n160\nRelated Commands\n160\nmapObjectTypeList Command\n161\nSyntax\n161\nUsage Considerations\n161\nParameters\n161\nResponses\n161\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 12\n\nExamples\n149\nRelated Commands\n150\nlocalizeToPoint Command\n151\nSyntax\n151\nUsage Considerations\n151\nParameters\n151\nResponses\n151\nDetails\n151\nExamples\n151\nRelated Commands\n152\nlog Command\n153\nSyntax\n153\nUsage Considerations\n153\nParameters\n153\nResponses\n153\nDetails\n153\nExamples\n153\nRelated Commands\n154\nmapObjectInfo Command\n155\nSyntax\n155\nUsage Considerations\n155\nParameters\n155\nResponses\n155\nDetails\n155\nExamples\n156\nRelated Commands\n156\nmapObjectList Command\n157\nSyntax\n157\nUsage Considerations\n157\nParameters\n157\nResponses\n157\nDetails\n157\nExamples\n158\nRelated Commands\n158\nmapObjectTypeInfo Command\n159\nSyntax\n159\nUsage Considerations\n159\nParameters\n159\nResponses\n159\nDetails\n159\nExamples\n160\nRelated Commands\n160\nmapObjectTypeList Command\n161\nSyntax\n161\nUsage Considerations\n161\nParameters\n161\nResponses\n161\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 12",
    "Page 13": "Details\n161\nExamples\n162\nRelated Commands\n162\nnewConfigParam Command\n163\nSyntax\n163\nUsage Considerations\n163\nARAM Settings\n163\nParameters\n163\nResponses\n164\nDetails\n164\nExamples\n164\nRelated Commands\n164\nnewConfigSectionComment Command\n165\nSyntax\n165\nUsage Considerations\n165\nARAM Settings\n165\nParameters\n165\nResponses\n165\nDetails\n165\nExamples\n165\nRelated Commands\n166\nodometer Command\n167\nSyntax\n167\nUsage Considerations\n167\nParameters\n167\nResponses\n167\nDetails\n167\nExamples\n167\nRelated Commands\n167\nodometerReset Command\n168\nSyntax\n168\nUsage Considerations\n168\nParameters\n168\nResponses\n168\nDetails\n168\nExamples\n168\nRelated Commands\n168\noneLineStatus Command\n169\nSyntax\n169\nUsage Considerations\n169\nParameters\n169\nResponses\n169\nDetails\n169\nExamples\n169\nRelated Commands\n169\noutputList Command\n171\nSyntax\n171\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 13\n\nDetails\n161\nExamples\n162\nRelated Commands\n162\nnewConfigParam Command\n163\nSyntax\n163\nUsage Considerations\n163\nARAM Settings\n163\nParameters\n163\nResponses\n164\nDetails\n164\nExamples\n164\nRelated Commands\n164\nnewConfigSectionComment Command\n165\nSyntax\n165\nUsage Considerations\n165\nARAM Settings\n165\nParameters\n165\nResponses\n165\nDetails\n165\nExamples\n165\nRelated Commands\n166\nodometer Command\n167\nSyntax\n167\nUsage Considerations\n167\nParameters\n167\nResponses\n167\nDetails\n167\nExamples\n167\nRelated Commands\n167\nodometerReset Command\n168\nSyntax\n168\nUsage Considerations\n168\nParameters\n168\nResponses\n168\nDetails\n168\nExamples\n168\nRelated Commands\n168\noneLineStatus Command\n169\nSyntax\n169\nUsage Considerations\n169\nParameters\n169\nResponses\n169\nDetails\n169\nExamples\n169\nRelated Commands\n169\noutputList Command\n171\nSyntax\n171\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 13",
    "Page 14": "Usage Considerations\n171\nParameters\n171\nResponses\n171\nDetails\n171\nExamples\n171\nRelated Commands\n171\noutputOff Command\n173\nSyntax\n173\nUsage Considerations\n173\nParameters\n173\nResponses\n173\nDetails\n173\nExamples\n173\nRelated Commands\n173\noutputOn Command\n174\nSyntax\n174\nUsage Considerations\n174\nParameters\n174\nResponses\n174\nDetails\n174\nExamples\n174\nRelated Commands\n174\noutputQuery Command\n175\nSyntax\n175\nUsage Considerations\n175\nParameters\n175\nResponses\n175\nDetails\n175\nExamples\n175\nRelated Commands\n175\npatrol Command\n177\nSyntax\n177\nUsage Considerations\n177\nParameters\n177\nResponses\n177\nDetails\n177\nExamples\n177\nRelated Commands\n177\npatrolOnce Command\n179\nSyntax\n179\nUsage Considerations\n179\nParameters\n179\nResponses\n179\nDetails\n179\nExamples\n179\nRelated Commands\n179\npatrolResume Command\n181\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 14\n\nUsage Considerations\n171\nParameters\n171\nResponses\n171\nDetails\n171\nExamples\n171\nRelated Commands\n171\noutputOff Command\n173\nSyntax\n173\nUsage Considerations\n173\nParameters\n173\nResponses\n173\nDetails\n173\nExamples\n173\nRelated Commands\n173\noutputOn Command\n174\nSyntax\n174\nUsage Considerations\n174\nParameters\n174\nResponses\n174\nDetails\n174\nExamples\n174\nRelated Commands\n174\noutputQuery Command\n175\nSyntax\n175\nUsage Considerations\n175\nParameters\n175\nResponses\n175\nDetails\n175\nExamples\n175\nRelated Commands\n175\npatrol Command\n177\nSyntax\n177\nUsage Considerations\n177\nParameters\n177\nResponses\n177\nDetails\n177\nExamples\n177\nRelated Commands\n177\npatrolOnce Command\n179\nSyntax\n179\nUsage Considerations\n179\nParameters\n179\nResponses\n179\nDetails\n179\nExamples\n179\nRelated Commands\n179\npatrolResume Command\n181\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 14",
    "Page 15": "Syntax\n181\nUsage Considerations\n181\nParameters\n181\nResponses\n181\nDetails\n181\nExamples\n181\nRelated Commands\n182\npauseTaskCancel Command\n183\nSyntax\n183\nUsage Considerations\n183\nParameters\n183\nResponses\n183\nDetails\n183\nExamples\n183\nRelated Commands\n184\npauseTaskState Command\n185\nSyntax\n185\nUsage Considerations\n185\nParameters\n185\nResponses\n185\nExamples\n185\nRelated Commands\n185\npayloadQuery Command (shortcut: pq)\n187\nSyntax\n187\nUsage Considerations\n187\nParameters\n187\nResponses\n187\nDetails\n187\nExamples\n188\nRelated Commands\n189\npayloadQueryLocal Command (shortcut: pql)\n190\nSyntax\n190\nUsage Considerations\n190\nParameters\n190\nResponses\n190\nDetails\n190\nExamples\n190\nRelated Commands\n191\npayloadRemove Command (shortcut: pr)\n192\nSyntax\n192\nUsage Considerations\n192\nParameters\n192\nResponses\n192\nDetails\n192\nExamples\n192\nRelated Commands\n192\npayloadSet Command (shortcut: ps)\n194\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 15\n\nSyntax\n181\nUsage Considerations\n181\nParameters\n181\nResponses\n181\nDetails\n181\nExamples\n181\nRelated Commands\n182\npauseTaskCancel Command\n183\nSyntax\n183\nUsage Considerations\n183\nParameters\n183\nResponses\n183\nDetails\n183\nExamples\n183\nRelated Commands\n184\npauseTaskState Command\n185\nSyntax\n185\nUsage Considerations\n185\nParameters\n185\nResponses\n185\nExamples\n185\nRelated Commands\n185\npayloadQuery Command (shortcut: pq)\n187\nSyntax\n187\nUsage Considerations\n187\nParameters\n187\nResponses\n187\nDetails\n187\nExamples\n188\nRelated Commands\n189\npayloadQueryLocal Command (shortcut: pql)\n190\nSyntax\n190\nUsage Considerations\n190\nParameters\n190\nResponses\n190\nDetails\n190\nExamples\n190\nRelated Commands\n191\npayloadRemove Command (shortcut: pr)\n192\nSyntax\n192\nUsage Considerations\n192\nParameters\n192\nResponses\n192\nDetails\n192\nExamples\n192\nRelated Commands\n192\npayloadSet Command (shortcut: ps)\n194\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 15",
    "Page 16": "Syntax\n194\nUsage Considerations\n194\nParameters\n194\nResponses\n194\nDetails\n194\nExamples\n194\nRelated Commands\n195\npayloadSlotCount Command (shortcut: psc)\n196\nSyntax\n196\nUsage Considerations\n196\nParameters\n196\nResponses\n196\nDetails\n196\nExamples\n196\nRelated Commands\n197\npayloadSlotCountLocal Command (shortcut: pscl)\n198\nSyntax\n198\nUsage Considerations\n198\nParameters\n198\nExamples\n198\nRelated Commands\n198\nplay Command\n199\nSyntax\n199\nUsage Considerations\n199\nParameters\n199\nResponses\n199\nDetails\n199\nExamples\n200\nRelated Commands\n200\npopupSimple Command\n201\nSyntax\n201\nUsage Considerations\n201\nParameters\n201\nResponses\n201\nDetails\n201\nExamples\n201\nRelated Commands\n202\nqueryDockStatus Command\n203\nSyntax\n203\nUsage Considerations\n203\nParameters\n203\nResponses\n203\nDetails\n203\nExamples\n203\nRelated Commands\n203\nqueryFaults Command (shortcut: qf)\n204\nSyntax\n204\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 16\n\nSyntax\n194\nUsage Considerations\n194\nParameters\n194\nResponses\n194\nDetails\n194\nExamples\n194\nRelated Commands\n195\npayloadSlotCount Command (shortcut: psc)\n196\nSyntax\n196\nUsage Considerations\n196\nParameters\n196\nResponses\n196\nDetails\n196\nExamples\n196\nRelated Commands\n197\npayloadSlotCountLocal Command (shortcut: pscl)\n198\nSyntax\n198\nUsage Considerations\n198\nParameters\n198\nExamples\n198\nRelated Commands\n198\nplay Command\n199\nSyntax\n199\nUsage Considerations\n199\nParameters\n199\nResponses\n199\nDetails\n199\nExamples\n200\nRelated Commands\n200\npopupSimple Command\n201\nSyntax\n201\nUsage Considerations\n201\nParameters\n201\nResponses\n201\nDetails\n201\nExamples\n201\nRelated Commands\n202\nqueryDockStatus Command\n203\nSyntax\n203\nUsage Considerations\n203\nParameters\n203\nResponses\n203\nDetails\n203\nExamples\n203\nRelated Commands\n203\nqueryFaults Command (shortcut: qf)\n204\nSyntax\n204\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 16",
    "Page 17": "Usage Considerations\n204\nParameter\n204\nResponses\n204\nDetails\n204\nExample\n204\nRelated Commands\n206\nqueryMotors Command\n207\nSyntax\n207\nUsage Considerations\n207\nParameters\n207\nResponses\n207\nDetails\n207\nExamples\n207\nRelated Commands\n208\nqueueCancel Command (shortcut: qc)\n209\nSyntax\n209\nUsage Considerations\n209\nParameters\n209\nResponses\n209\nDetails\n210\nExamples\n210\nRelated Commands\n211\nqueueCancelLocal Command (shortcut:\u00a0qcl)\n212\nSyntax\n212\nUsage Considerations\n212\nParameters\n212\nResponses\n213\nDetails\n213\nExample\n213\nRelated Commands\n214\nqueueDropoff Command (shortcut: qd)\n215\nSyntax\n215\nUsage Considerations\n215\nARAM Settings\n215\nParameters\n215\nResponses\n215\nDetails\n216\nExamples\n216\nRelated Commands\n216\nqueueModify Command (shortcut: qmod)\n218\nSyntax\n218\nUsage Considerations\n218\nARAM Settings\n218\nParameters\n218\nResponses\n219\nDetails\n220\nExamples\n220\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 17\n\nUsage Considerations\n204\nParameter\n204\nResponses\n204\nDetails\n204\nExample\n204\nRelated Commands\n206\nqueryMotors Command\n207\nSyntax\n207\nUsage Considerations\n207\nParameters\n207\nResponses\n207\nDetails\n207\nExamples\n207\nRelated Commands\n208\nqueueCancel Command (shortcut: qc)\n209\nSyntax\n209\nUsage Considerations\n209\nParameters\n209\nResponses\n209\nDetails\n210\nExamples\n210\nRelated Commands\n211\nqueueCancelLocal Command (shortcut:\u00a0qcl)\n212\nSyntax\n212\nUsage Considerations\n212\nParameters\n212\nResponses\n213\nDetails\n213\nExample\n213\nRelated Commands\n214\nqueueDropoff Command (shortcut: qd)\n215\nSyntax\n215\nUsage Considerations\n215\nARAM Settings\n215\nParameters\n215\nResponses\n215\nDetails\n216\nExamples\n216\nRelated Commands\n216\nqueueModify Command (shortcut: qmod)\n218\nSyntax\n218\nUsage Considerations\n218\nARAM Settings\n218\nParameters\n218\nResponses\n219\nDetails\n220\nExamples\n220\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 17",
    "Page 18": "Related Commands\n222\nqueueModifyLocal Command (shortcut: qmodl)\n224\nSyntax\n224\nUsage Considerations\n224\nARAM Settings\n224\nParameters\n224\nResponses\n225\nDetails\n225\nExamples\n226\nRelated Commands\n227\nqueueMulti Command (shortcut: qm)\n229\nSyntax\n229\nUsage Considerations\n229\nARAM Settings\n229\nParameters\n229\nResponses\n230\nDetails\n231\nExamples\n231\nRelated Commands\n232\nqueuePickup Command (shortcut: qp)\n233\nSyntax\n233\nUsage Considerations\n233\nARAM Settings\n233\nParameters\n233\nResponses\n233\nDetails\n234\nExamples\n234\nRelated Commands\n235\nqueuePickupDropoff Command (shortcut: qpd)\n236\nSyntax\n236\nUsage Considerations\n236\nParameters\n236\nResponses\n236\nDetails\n237\nExamples\n237\nRelated Commands\n240\nqueueQuery Command (shortcut: qq)\n241\nSyntax\n241\nUsage Considerations\n241\nParameters\n241\nResponses\n241\nDetails\n242\nExamples\n242\nRelated Commands\n242\nqueueQueryLocal Command (shortcut: qql)\n244\nSyntax\n244\nUsage Considerations\n244\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 18\n\nRelated Commands\n222\nqueueModifyLocal Command (shortcut: qmodl)\n224\nSyntax\n224\nUsage Considerations\n224\nARAM Settings\n224\nParameters\n224\nResponses\n225\nDetails\n225\nExamples\n226\nRelated Commands\n227\nqueueMulti Command (shortcut: qm)\n229\nSyntax\n229\nUsage Considerations\n229\nARAM Settings\n229\nParameters\n229\nResponses\n230\nDetails\n231\nExamples\n231\nRelated Commands\n232\nqueuePickup Command (shortcut: qp)\n233\nSyntax\n233\nUsage Considerations\n233\nARAM Settings\n233\nParameters\n233\nResponses\n233\nDetails\n234\nExamples\n234\nRelated Commands\n235\nqueuePickupDropoff Command (shortcut: qpd)\n236\nSyntax\n236\nUsage Considerations\n236\nParameters\n236\nResponses\n236\nDetails\n237\nExamples\n237\nRelated Commands\n240\nqueueQuery Command (shortcut: qq)\n241\nSyntax\n241\nUsage Considerations\n241\nParameters\n241\nResponses\n241\nDetails\n242\nExamples\n242\nRelated Commands\n242\nqueueQueryLocal Command (shortcut: qql)\n244\nSyntax\n244\nUsage Considerations\n244\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 18",
    "Page 19": "Parameters\n244\nResponses\n245\nDetails\n245\nExamples\n245\nRelated Commands\n245\nqueueShow Command (shortcut: qs)\n247\nSyntax\n247\nUsage Considerations\n247\nParameters\n247\nResponses\n247\nDetails\n247\nExamples\n248\nRelated Commands\n248\nqueueShowCompleted Command (shortcut: qsc)\n249\nSyntax\n249\nUsage Considerations\n249\nParameters\n249\nReturns\n249\nDetails\n249\nExamples\n250\nRelated Commands\n250\nqueueShowRobot Command (shortcut:\u00a0qsr)\n251\nSyntax\n251\nUsage Considerations\n251\nParameters\n251\nResponses\n251\nDetails\n251\nExamples\n252\nRelated Commands\n252\nqueueShowRobotLocal Command (shortcut: qsrl)\n253\nSyntax\n253\nUsage Considerations\n253\nParameters\n253\nDetails\n253\nExamples\n253\nRelated Commands\n253\nquit Command\n254\nSyntax\n254\nUsage Considerations\n254\nParameters\n254\nResponses\n254\nDetails\n254\nExamples\n254\nRelated Commands\n254\nrangeDeviceGetCumulative Command\n255\nSyntax\n255\nUsage Considerations\n255\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 19\n\nParameters\n244\nResponses\n245\nDetails\n245\nExamples\n245\nRelated Commands\n245\nqueueShow Command (shortcut: qs)\n247\nSyntax\n247\nUsage Considerations\n247\nParameters\n247\nResponses\n247\nDetails\n247\nExamples\n248\nRelated Commands\n248\nqueueShowCompleted Command (shortcut: qsc)\n249\nSyntax\n249\nUsage Considerations\n249\nParameters\n249\nReturns\n249\nDetails\n249\nExamples\n250\nRelated Commands\n250\nqueueShowRobot Command (shortcut:\u00a0qsr)\n251\nSyntax\n251\nUsage Considerations\n251\nParameters\n251\nResponses\n251\nDetails\n251\nExamples\n252\nRelated Commands\n252\nqueueShowRobotLocal Command (shortcut: qsrl)\n253\nSyntax\n253\nUsage Considerations\n253\nParameters\n253\nDetails\n253\nExamples\n253\nRelated Commands\n253\nquit Command\n254\nSyntax\n254\nUsage Considerations\n254\nParameters\n254\nResponses\n254\nDetails\n254\nExamples\n254\nRelated Commands\n254\nrangeDeviceGetCumulative Command\n255\nSyntax\n255\nUsage Considerations\n255\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 19",
    "Page 20": "ARAM Settings\n255\nParameters\n255\nResponses\n255\nDetails\n255\nExamples\n256\nRelated Commands\n256\nrangeDeviceGetCurrent Command\n257\nSyntax\n257\nUsage Considerations\n257\nARAM Settings\n257\nParameters\n257\nResponses\n257\nDetails\n257\nExamples\n257\nRelated Commands\n258\nrangeDeviceList Command\n259\nSyntax\n259\nUsage Considerations\n259\nARAM Settings\n259\nParameters\n259\nResponses\n259\nDetails\n259\nExamples\n259\nRelated Commands\n260\nsay Command\n261\nSyntax\n261\nUsage Considerations\n261\nParameters\n261\nResponses\n261\nDetails\n261\nExamples\n261\nRelated Commands\n261\nscanAddGoal Command\n262\nSyntax\n262\nUsage Considerations\n262\nParameters\n262\nResponses\n262\nDetails\n262\nExamples\n262\nRelated Commands\n262\nscanAddInfo Command\n264\nSyntax\n264\nUsage Considerations\n264\nARAM Settings\n264\nParameters\n264\nResponses\n266\nDetails\n266\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 20\n\nARAM Settings\n255\nParameters\n255\nResponses\n255\nDetails\n255\nExamples\n256\nRelated Commands\n256\nrangeDeviceGetCurrent Command\n257\nSyntax\n257\nUsage Considerations\n257\nARAM Settings\n257\nParameters\n257\nResponses\n257\nDetails\n257\nExamples\n257\nRelated Commands\n258\nrangeDeviceList Command\n259\nSyntax\n259\nUsage Considerations\n259\nARAM Settings\n259\nParameters\n259\nResponses\n259\nDetails\n259\nExamples\n259\nRelated Commands\n260\nsay Command\n261\nSyntax\n261\nUsage Considerations\n261\nParameters\n261\nResponses\n261\nDetails\n261\nExamples\n261\nRelated Commands\n261\nscanAddGoal Command\n262\nSyntax\n262\nUsage Considerations\n262\nParameters\n262\nResponses\n262\nDetails\n262\nExamples\n262\nRelated Commands\n262\nscanAddInfo Command\n264\nSyntax\n264\nUsage Considerations\n264\nARAM Settings\n264\nParameters\n264\nResponses\n266\nDetails\n266\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 20",
    "Page 21": "Examples\n266\nRelated Commands\n266\nscanAddTag Command\n267\nSyntax\n267\nUsage Considerations\n267\nARAM Settings\n267\nParameters\n267\nResponses\n267\nDetails\n267\nExamples\n268\nRelated Commands\n268\nscanStart Command\n269\nSyntax\n269\nUsage Considerations\n269\nParameters\n269\nResponses\n269\nDetails\n269\nExamples\n269\nRelated Commands\n269\nscanStop Command\n271\nSyntax\n271\nUsage Considerations\n271\nParameters\n271\nResponses\n271\nExamples\n271\nRelated Commands\n271\nsetPayload Command\n272\nSyntax\n272\nUsage Considerations\n272\nParameters\n272\nResponses\n272\nDetails\n272\nExamples\n272\nRelated Commands\n272\nsetPrecedence Command\n274\nSyntax\n274\nUsage Considerations\n274\nParameters\n274\nResponses\n274\nDetails\n274\nExamples\n274\nRelated Commands\n274\nshutdown Command\n275\nSyntax\n275\nUsage Considerations\n275\nParameters\n275\nResponses\n275\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 21\n\nExamples\n266\nRelated Commands\n266\nscanAddTag Command\n267\nSyntax\n267\nUsage Considerations\n267\nARAM Settings\n267\nParameters\n267\nResponses\n267\nDetails\n267\nExamples\n268\nRelated Commands\n268\nscanStart Command\n269\nSyntax\n269\nUsage Considerations\n269\nParameters\n269\nResponses\n269\nDetails\n269\nExamples\n269\nRelated Commands\n269\nscanStop Command\n271\nSyntax\n271\nUsage Considerations\n271\nParameters\n271\nResponses\n271\nExamples\n271\nRelated Commands\n271\nsetPayload Command\n272\nSyntax\n272\nUsage Considerations\n272\nParameters\n272\nResponses\n272\nDetails\n272\nExamples\n272\nRelated Commands\n272\nsetPrecedence Command\n274\nSyntax\n274\nUsage Considerations\n274\nParameters\n274\nResponses\n274\nDetails\n274\nExamples\n274\nRelated Commands\n274\nshutdown Command\n275\nSyntax\n275\nUsage Considerations\n275\nParameters\n275\nResponses\n275\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 21",
    "Page 22": "Details\n275\nExamples\n275\nRelated Commands\n275\nstatus Command\n276\nSyntax\n276\nUsage Considerations\n276\nParameters\n276\nResponses\n276\nDetails\n276\nExamples\n276\nRelated Commands\n276\nstop Command\n278\nSyntax\n278\nUsage Considerations\n278\nParameters\n278\nResponses\n278\nExamples\n278\nRelated Commands\n278\ntrackSectors Command\n279\nSyntax\n279\nUsage Considerations\n279\nARAM Settings\n279\nParameters\n279\nResponses\n279\nDetails\n279\nExamples\n280\nRelated Commands\n281\ntrackSectorsAtGoal Command\n282\nSyntax\n282\nUsage Considerations\n282\nARAM Settings\n282\nParameters\n282\nResponses\n282\nDetails\n282\nExamples\n283\nRelated Commands\n284\ntrackSectorsAtPoint Command\n285\nSyntax\n285\nUsage Considerations\n285\nARAM Settings\n285\nParameters\n285\nResponses\n285\nDetails\n285\nExamples\n286\nRelated Commands\n287\ntrackSectorsPath Command\n288\nSyntax\n288\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 22\n\nDetails\n275\nExamples\n275\nRelated Commands\n275\nstatus Command\n276\nSyntax\n276\nUsage Considerations\n276\nParameters\n276\nResponses\n276\nDetails\n276\nExamples\n276\nRelated Commands\n276\nstop Command\n278\nSyntax\n278\nUsage Considerations\n278\nParameters\n278\nResponses\n278\nExamples\n278\nRelated Commands\n278\ntrackSectors Command\n279\nSyntax\n279\nUsage Considerations\n279\nARAM Settings\n279\nParameters\n279\nResponses\n279\nDetails\n279\nExamples\n280\nRelated Commands\n281\ntrackSectorsAtGoal Command\n282\nSyntax\n282\nUsage Considerations\n282\nARAM Settings\n282\nParameters\n282\nResponses\n282\nDetails\n282\nExamples\n283\nRelated Commands\n284\ntrackSectorsAtPoint Command\n285\nSyntax\n285\nUsage Considerations\n285\nARAM Settings\n285\nParameters\n285\nResponses\n285\nDetails\n285\nExamples\n286\nRelated Commands\n287\ntrackSectorsPath Command\n288\nSyntax\n288\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 22",
    "Page 23": "Usage Considerations\n288\nARAM Settings\n288\nParameters\n288\nResponses\n288\nDetails\n288\nExamples\n289\nRelated Commands\n290\nundock Command\n291\nSyntax\n291\nUsage Considerations\n291\nParameters\n291\nResponses\n291\nDetails\n291\nExamples\n291\nRelated Commands\n291\nupdateInfo Command\n293\nSyntax\n293\nUsage Considerations\n293\nParameters\n293\nResponses\n293\nDetails\n293\nExamples\n293\nRelated Commands\n294\nwaitTaskCancel Command\n295\nSyntax\n295\nUsage Considerations\n295\nParameters\n295\nResponses\n295\nExamples\n295\nRelated Commands\n296\nwaitTaskState Command\n297\nSyntax\n297\nUsage Considerations\n297\nParameters\n297\nResponses\n297\nExamples\n297\nRelated Commands\n297\nARCL Server Messages\n299\nRobot Fault Messages\n300\nSee Also...\n300\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 23\n\nUsage Considerations\n288\nARAM Settings\n288\nParameters\n288\nResponses\n288\nDetails\n288\nExamples\n289\nRelated Commands\n290\nundock Command\n291\nSyntax\n291\nUsage Considerations\n291\nParameters\n291\nResponses\n291\nDetails\n291\nExamples\n291\nRelated Commands\n291\nupdateInfo Command\n293\nSyntax\n293\nUsage Considerations\n293\nParameters\n293\nResponses\n293\nDetails\n293\nExamples\n293\nRelated Commands\n294\nwaitTaskCancel Command\n295\nSyntax\n295\nUsage Considerations\n295\nParameters\n295\nResponses\n295\nExamples\n295\nRelated Commands\n296\nwaitTaskState Command\n297\nSyntax\n297\nUsage Considerations\n297\nParameters\n297\nResponses\n297\nExamples\n297\nRelated Commands\n297\nARCL Server Messages\n299\nRobot Fault Messages\n300\nSee Also...\n300\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 23",
    "Page 25": "Introduction to ARCL\nThe Advanced Robotics Command Language (ARCL) is a simple, text-based, command-and-response oper-\nating language for integrating a fleet of Adept mobile robots with an external automation system.\nARCL allows you to operate and monitor the mobile robot, its accessories and its payload devices over the\nnetwork; it is intended for automating your mobile robots. For debugging purposes, you can use Telnet or\nPuTTY to access the ARCL commands from a command prompt.\nARCL allows you to submit jobs to the Enterprise Manager, and monitor the job status from start to finish.\nIt also allows you to monitor payload information, if reported, by the robots in the fleet.\nThe Enterprise Manager (EM)\u00a0version of ARCL is for use with the Enterprise Manager software and appli-\nance. This hardware and software combination has been specially designed and configured to manage a\nfleet of robots operating in a facility. Therefore, it uses a minimal ARCL command set, because all of the crit-\nical work is being handled directly by the appliance and Enterprise Manager software.\nThis section discusses the following topics:\nVersion Requirements\n26\nHow Do I Begin\n27\nRelated Manuals\n28\nHow Can I Get Help?\n29\nFor more information on using the Adept Motivity software, refer to the Adept Motivity Software User's\nGuide.\nSee Also...\nIntroduction to ARCL on page 25\nEnable Options in\nSet ARCL Parameters in MobilePlanner on page 30\nConnect to ARCL Using a Telnet Client on page 42\nUsing the ARCL Commands on page 46\nARCL Command Reference on page 70\nARCL Server Messages on page 299\nIntroduction to ARCL\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 25\n\nIntroduction to ARCL\nThe Advanced Robotics Command Language (ARCL) is a simple, text-based, command-and-response oper-\nating language for integrating a fleet of Adept mobile robots with an external automation system.\nARCL allows you to operate and monitor the mobile robot, its accessories and its payload devices over the\nnetwork; it is intended for automating your mobile robots. For debugging purposes, you can use Telnet or\nPuTTY to access the ARCL commands from a command prompt.\nARCL allows you to submit jobs to the Enterprise Manager, and monitor the job status from start to finish.\nIt also allows you to monitor payload information, if reported, by the robots in the fleet.\nThe Enterprise Manager (EM)\u00a0version of ARCL is for use with the Enterprise Manager software and appli-\nance. This hardware and software combination has been specially designed and configured to manage a\nfleet of robots operating in a facility. Therefore, it uses a minimal ARCL command set, because all of the crit-\nical work is being handled directly by the appliance and Enterprise Manager software.\nThis section discusses the following topics:\nVersion Requirements\n26\nHow Do I Begin\n27\nRelated Manuals\n28\nHow Can I Get Help?\n29\nFor more information on using the Adept Motivity software, refer to the\n Adept Motivity Software User's\nGuide\n.\nSee Also...\nIntroduction to ARCL on page 25\nEnable Options in\nSet ARCL Parameters in MobilePlanner on page 30\nConnect to ARCL Using a Telnet Client on page 42\nUsing the ARCL Commands on page 46\nARCL Command Reference on page 70\nARCL Server Messages on page 299\nIntroduction to ARCL\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 25",
    "Page 26": "Version Requirements\nThis document pertains to ARAM version 4.6 and later.\nIf you need assistance, see How Can I Get Help? on page 29.\nSee Also...\nHow Do I Begin on page 27\nRelated Manuals on page 28\nHow Can I Get Help? on page 29\nVersion Requirements\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 26\n\nVersion Requirements\nThis document pertains to ARAM version 4.6 and later.\nIf you need assistance, see How Can I Get Help? on page 29.\nSee Also...\nHow Do I Begin on page 27\nRelated Manuals on page 28\nHow Can I Get Help? on page 29\nVersion Requirements\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 26",
    "Page 27": "How Do I Begin\nBefore you can access ARCL, you must complete the following steps:\n1.\nSet ARCL Parameters in MobilePlanner\nDefine the ARCL server address, port number and password parameters in MobilePlanner, and con-\nfigure other ARCL parameters. The server port will not open without a password; therefore you\nmust configure a password before you can connect to ARCL. For details, see Set ARCL Parameters in\nMobilePlanner on page 30.\n2.\nConnect to ARCL Using a Telnet Client\nUsing a Telnet client, connect to ARCL to access and run the ARCL commands on the Motivity plat-\nform. For details, see Connect to ARCL Using a Telnet Client on page 42.\nAfter you've set up and established a connection to the ARCL server, you can start using the ARCL com-\nmands to operate and monitor the robotic platform, its accessories and its payload devices over the net-\nworksubmit and monitor jobs that will be performed by the fleet. You can do all of this with or without\nMobilePlanner. For more details, see Using the ARCL Commands on page 46.\nSee Also...\nVersion Requirements on page 26\nHow Do I Begin on page 27\nRelated Manuals on page 28\nHow Can I Get Help? on page 29\nHow Do I Begin\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 27\n\nHow Do I Begin\nBefore you can access ARCL, you must complete the following steps:\n1.\nSet ARCL Parameters in MobilePlanner\nDefine the ARCL server address, port number and password parameters in MobilePlanner, and con-\nfigure other ARCL parameters. The server port will not open without a password; therefore you\nmust configure a password before you can connect to ARCL. For details, see Set ARCL Parameters in\nMobilePlanner on page 30.\n2.\nConnect to ARCL Using a Telnet Client\nUsing a Telnet client, connect to ARCL to access and run the ARCL commands on the Motivity plat-\nform. For details, see Connect to ARCL Using a Telnet Client on page 42.\nAfter you've set up and established a connection to the ARCL server, you can start using the ARCL com-\nmands to operate and monitor the robotic platform, its accessories and its payload devices over the net-\nworksubmit and monitor jobs that will be performed by the fleet. You can do all of this with or without\nMobilePlanner. For more details, see Using the ARCL Commands on page 46.\nSee Also...\nVersion Requirements on page 26\nHow Do I Begin on page 27\nRelated Manuals on page 28\nHow Can I Get Help? on page 29\nHow Do I Begin\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 27",
    "Page 28": "Related Manuals\nIn addition to this manual, you may want to refer to the following manuals which are available from the\nAdept Document Library.\nManual\nDescription\nAdept Robot Safety Guide\nDescribes safety information for Adept robots.\nAdept Motivity User's\nGuide\nDescribes the Adept Motivity software, including SetNetGo,\nMobileEyes, and MobilePlanner.\nAdept Lynx Platform\nUser's Guide\nDescribes the installation, start-up, operation, and maintenance of\nthe Adept mobile robot base.\nAdept Lynx Enterprise\nManager 1100 User's\nGuide\nDescribes the installation and operation of the Enterprise Manager\n1100 appliance and the Enterprise Manager software.\nAdept SmartFleet\nEX\u00a0Appliance User's Guide\nCovers the legacy Adept Enterprise Manager system, which ran on\nan Adept SmartFleet EX Appliance, for managing a fleet of Lynx\nAIVs.\nSee Also...\nVersion Requirements on page 26\nHow Do I Begin on page 27\nRelated Manuals on page 28\nHow Can I Get Help? on page 29\nRelated Manuals\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 28\n\nRelated Manuals\nIn addition to this manual, you may want to refer to the following manuals which are available from the\nAdept Document Library.\nManual\nDescription\nAdept Robot Safety Guide\nDescribes safety information for Adept robots.\nAdept Motivity User's\nGuide\nDescribes the Adept Motivity software, including SetNetGo,\nMobileEyes, and MobilePlanner.\nAdept Lynx Platform\nUser's Guide\nDescribes the installation, start-up, operation, and maintenance of\nthe Adept mobile robot base.\nAdept Lynx Enterprise\nManager 1100 User's\nGuide\nDescribes the installation and operation of the Enterprise Manager\n1100 appliance and the Enterprise Manager software.\nAdept SmartFleet\nEX\u00a0Appliance User's Guide\nCovers the legacy Adept Enterprise Manager system, which ran on\nan Adept SmartFleet EX Appliance, for managing a fleet of Lynx\nAIVs.\nSee Also...\nVersion Requirements on page 26\nHow Do I Begin on page 27\nRelated Manuals on page 28\nHow Can I Get Help? on page 29\nRelated Manuals\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 28",
    "Page 29": "How Can I Get Help?\nFor details on getting assistance with your Adept software or hardware, you can access the following\ninformation sources on the Adept corporate website:\nl For contact information: http://www.adept.com/contact/americas\nl For product support information: http://www.adept.com/support/service-and-support/main\nl For user discussions, support, and programming examples: http://www.adept.com/forum/\nl For further information about Omron Adept Technologies, Inc.: http://www.adept.com\nSee Also...\nVersion Requirements on page 26\nHow Do I Begin on page 27\nRelated Manuals on page 28\nHow Can I Get Help? on page 29\nHow Can I Get Help?\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 29\n\nHow Can I Get Help?\nFor details on getting assistance with your Adept software or hardware, you can access the following\ninformation sources on the Adept corporate website:\nl\n For contact information: http://www.adept.com/contact/americas\nl\n For product support information: http://www.adept.com/support/service-and-support/main\nl\n For user discussions, support, and programming examples: http://www.adept.com/forum/\nl\n For further information about Omron Adept Technologies, Inc.: http://www.adept.com\nSee Also...\nVersion Requirements on page 26\nHow Do I Begin on page 27\nRelated Manuals on page 28\nHow Can I Get Help? on page 29\nHow Can I Get Help?\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 29",
    "Page 30": "Set ARCL Parameters in MobilePlanner\nThis section describes how to access the configuration items in the MobilePlanner software. It describes\nthe following:\nl Accessing the Configuration Options on page 31\nl Understanding the Configuration Parameters on page 37\nl Outgoing ARCL Commands Parameters on page 39\nl Set ARCL Parameters in MobilePlanner on page 30\nSet ARCL Parameters in MobilePlanner\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 30\n\nSet ARCL Parameters in MobilePlanner\nThis section describes how to access the configuration items in the MobilePlanner software. It describes\nthe following:\nl\n Accessing the Configuration Options on page 31\nl\n Understanding the Configuration Parameters on page 37\nl\n Outgoing ARCL Commands Parameters on page 39\nl\n Set ARCL Parameters in MobilePlanner on page 30\nSet ARCL Parameters in MobilePlanner\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 30",
    "Page 31": "Accessing the Configuration Options\nThese sections allow you to access configuration parameters that control the ARCL server and its inter-\naction with connected clients.\nCAUTION: The server port will not open without a password. Therefore, you must configure a password\nbefore you can connect to ARCL.\nTo access ARCL configuration options from MobilePlanner:\n1.\nOpen the MobilePlanner software, version 4.0 or later, and connect to the mobile robot. Refer to the\nAdept Motivity User's Guide for details on installing and starting MobilePlanner.\n2.\nFrom the MobilePlanner > Config, select the Robot Interface tab.\n3.\nSelect ARCL server setup from the Sections: column. These parameters allow you to control the cli-\nent-server connection between an offboard client process (such as Telnet or PuTTY) and ARCL. The\nARCL server setup parameters are shown in the following figure.\nIncoming connections refer to a client initiating the connection to the Enterprise Manager or a robot.\nMultiple simultaneous connections are allowed and supported.\nNOTE:\u00a0ARCL server setup lets you configure the port for incoming connections. This does not\naffect outgoing connections.\nAccessing the Configuration Options\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 31\n\nAccessing the Configuration Options\nThese sections allow you to access configuration parameters that control the ARCL server and its inter-\naction with connected clients.\nCAUTION:\n The server port will not open without a password. Therefore, you must configure a password\nbefore you can connect to ARCL.\nTo access ARCL configuration options from MobilePlanner:\n1.\nOpen the MobilePlanner software, version 4.0 or later, and connect to the mobile robot. Refer to the\nAdept Motivity User's Guide\n for details on installing and starting MobilePlanner.\n2.\nFrom the MobilePlanner > Config, select the Robot Interface tab.\n3.\nSelect ARCL server setup from the Sections: column. These parameters allow you to control the cli-\nent-server connection between an offboard client process (such as Telnet or PuTTY) and ARCL. The\nARCL server setup parameters are shown in the following figure.\nIncoming connections refer to a client initiating the connection to the Enterprise Manager or a robot.\nMultiple simultaneous connections are allowed and supported.\nNOTE\n:\u00a0ARCL server setup lets you configure the port for incoming connections. This does not\naffect outgoing connections.\nAccessing the Configuration Options\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 31",
    "Page 32": "ARCL\u00a0Server Setup Parameters\nFor more information on using a client (like Telnet or PuTTY), see Connect to ARCL Using a Telnet Cli-\nent on page 42.\n4.\nSelect Outgoing ARCL commands from the Sections: column to display the parameters that allow\nyou to configure commands that are automatically executed on the connection indicated in the Out-\ngoing ARCL connection setup. The parameters are shown in the following figure. For more details,\nsee Outgoing ARCL Commands Parameters on page 39.\nAccessing the Configuration Options\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 32\n\nARCL\u00a0Server Setup Parameters\nFor more information on using a client (like Telnet or PuTTY), see Connect to ARCL Using a Telnet Cli-\nent on page 42.\n4.\nSelect Outgoing ARCL commands from the Sections: column to display the parameters that allow\nyou to configure commands that are automatically executed on the connection indicated in the Out-\ngoing ARCL connection setup. The parameters are shown in the following figure. For more details,\nsee Outgoing ARCL Commands Parameters on page 39.\nAccessing the Configuration Options\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 32",
    "Page 33": "Outgoing ARCL\u00a0Commands\n5.\nSelect Outgoing ARCL connection setup from the Sections: column to display the parameters that\nallow you to send data from the robot using ARCL commands, intended to connect to the application\npayload. The parameters are shown in the following figure. For more details, refer to Outgoing ARCL\nConnection Setup Parameters on page 38.\nAccessing the Configuration Options\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 33\n\nOutgoing ARCL\u00a0Commands\n5.\nSelect Outgoing ARCL connection setup from the Sections: column to display the parameters that\nallow you to send data from the robot using ARCL commands, intended to connect to the application\npayload. The parameters are shown in the following figure. For more details, refer to Outgoing ARCL\nConnection Setup Parameters on page 38.\nAccessing the Configuration Options\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 33",
    "Page 34": "Outgoing ARCL\u00a0Connection Setup\n6.\nAfter the configuration options are set, click the Save button on the toolbar to save the changes to\nthe Configuration file. Changes do not take effect until: the robot is idle and stationary; the Con-\nfiguration changes are saved.\n7.\nSelect Outgoing Enterprise ARCL commands from the Sections: column to display the parameters\nthat allow you to configure commands that are automatically executed on the connection indicated\nin the Outgoing Enterprise ARCL connection setup. For more details, see Outgoing Enterprise ARCL\nCommands Parameters on page 41.\nAccessing the Configuration Options\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 34\n\nOutgoing ARCL\u00a0Connection Setup\n6.\nAfter the configuration options are set, click the Save button on the toolbar to save the changes to\nthe Configuration file. Changes do not take effect until: the robot is idle and stationary; the Con-\nfiguration changes are saved.\n7.\nSelect Outgoing Enterprise ARCL commands from the Sections: column to display the parameters\nthat allow you to configure commands that are automatically executed on the connection indicated\nin the Outgoing Enterprise ARCL connection setup. For more details, see Outgoing Enterprise ARCL\nCommands Parameters on page 41.\nAccessing the Configuration Options\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 34",
    "Page 35": "Outgoing Enterprise ARCL\u00a0Commands\n8.\nSelect Outgoing Enterprise ARCL connection setup from the Sections: column to display the para-\nmeters that allow you to send data from the Enterprise Manager using ARCL commands, intended to\nconnect to the facility WMS/MES. For more details, refer to Outgoing Enterprise ARCL Connection\nSetup Parameters on page 40.\nAccessing the Configuration Options\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 35\n\nOutgoing Enterprise ARCL\u00a0Commands\n8.\nSelect Outgoing Enterprise ARCL connection setup from the Sections: column to display the para-\nmeters that allow you to send data from the Enterprise Manager using ARCL commands, intended to\nconnect to the facility WMS/MES. For more details, refer to Outgoing Enterprise ARCL Connection\nSetup Parameters on page 40.\nAccessing the Configuration Options\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 35",
    "Page 36": "Outgoing Enterprise ARCL\u00a0Connection Setup\n9.\nAfter the configuration options are set, click the Save button on the toolbar to save the changes to\nthe Configuration file. Changes do not take effect until: the robot is idle and stationary; the Con-\nfiguration changes are saved.\nAccessing the Configuration Options\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 36\n\nOutgoing Enterprise ARCL\u00a0Connection Setup\n9.\nAfter the configuration options are set, click the Save button on the toolbar to save the changes to\nthe Configuration file. Changes do not take effect until: the robot is idle and stationary; the Con-\nfiguration changes are saved.\nAccessing the Configuration Options\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 36",
    "Page 37": "Understanding the Configuration Parameters\nThe configuration parameters are grouped by function - each functional group is accessed from the alpha-\nbetical list in the left pane. The corresponding configuration parameters are listed in a tabular format on the\nconfiguration pages, as shown in the previous figures. The parameters are organized alphabetically. You\ncan sort the list in ascending or descending order by name, value, min, or max.\nEach parameter has a description that briefly describes the function of the parameter. The selected para-\nmeter's help description is located in the Description column and, optionally, at the bottom of the window\nwhen the entire contents can't be shown in the Description column. For an example, see the following fig-\nure.\nParameter Help\nUnderstanding the Configuration Parameters\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 37\n\nUnderstanding the Configuration Parameters\nThe configuration parameters are grouped by function - each functional group is accessed from the alpha-\nbetical list in the left pane. The corresponding configuration parameters are listed in a tabular format on the\nconfiguration pages, as shown in the previous figures. The parameters are organized alphabetically. You\ncan sort the list in ascending or descending order by name, value, min, or max.\nEach parameter has a description that briefly describes the function of the parameter. The selected para-\nmeter's help description is located in the Description column and, optionally, at the bottom of the window\nwhen the entire contents can't be shown in the Description column. For an example, see the following fig-\nure.\nParameter Help\nUnderstanding the Configuration Parameters\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 37",
    "Page 38": "Outgoing ARCL Connection Setup Parameters\nThe Outgoing ARCL connection setup parameters are used to instruct the AIV to initiate an outgoing ARCL\nTCP connection to another device on the network. This approach can be used in lieu of requiring that the\nother device initiate an incoming connection to the AIV.\nIn order to use this feature, the OutgoingHostname needs to be set to a string and the OutgoingPort needs\nto be a non-zero number.\nUse of the outgoing ARCL connections:\nl The outgoing ARCL connection can be used to connect to a payload on top of the AIV. The AIV can\nbe configured so that it will not autonomously drive unless the outgoing connection is alive, by set-\nting the Outgoing ARCL Connection setup -> RequireConnectionToPathPlan parameter to True.\nThis is useful when it would be unsafe for the AIV to move at certain times, such as when an auto-\nmated load or unload is being performed. The payload is responsible for signaling when it is safe to\nmove, so if the connection from the payload to the AIV is lost, it would be unsafe for the AIV to\nmove without knowing the payload status.\nThere may be hand-shaking involved between the AIV's payload and the factory equipment, to\ndetermine when the load or unload is complete, making it safe for the AIV to move.\nl The outgoing connection can be used to automatically execute certain ARCL commands at specified\nintervals. This can be useful for gathering certain information without requiring that the applic-\nation, running on the connected device, continuously request the data.\nOutgoing ARCL Connection Setup Parameters\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 38\n\nOutgoing ARCL Connection Setup Parameters\nThe Outgoing ARCL connection setup parameters are used to instruct the AIV to initiate an outgoing ARCL\nTCP connection to another device on the network. This approach can be used in lieu of requiring that the\nother device initiate an incoming connection to the AIV.\nIn order to use this feature, the OutgoingHostname needs to be set to a string and the OutgoingPort needs\nto be a non-zero number.\nUse of the outgoing ARCL connections:\nl\n The outgoing ARCL connection can be used to connect to a payload on top of the AIV. The AIV can\nbe configured so that it will not autonomously drive unless the outgoing connection is alive, by set-\nting the Outgoing ARCL Connection setup -> RequireConnectionToPathPlan parameter to True.\nThis is useful when it would be unsafe for the AIV to move at certain times, such as when an auto-\nmated load or unload is being performed. The payload is responsible for signaling when it is safe to\nmove, so if the connection from the payload to the AIV is lost, it would be unsafe for the AIV to\nmove without knowing the payload status.\nThere may be hand-shaking involved between the AIV's payload and the factory equipment, to\ndetermine when the load or unload is complete, making it safe for the AIV to move.\nl\n The outgoing connection can be used to automatically execute certain ARCL commands at specified\nintervals. This can be useful for gathering certain information without requiring that the applic-\nation, running on the connected device, continuously request the data.\nOutgoing ARCL Connection Setup Parameters\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 38",
    "Page 39": "Outgoing ARCL Commands Parameters\nThe Outgoing ARCL command parameters allow you to set the mobile robot up to automatically generate\nARCL commands at regular intervals. You can send one or more ARCL commands; to send multiple com-\nmands, separate each command with a pipe charactger (|). For example, set the OutGoingCommands1\nparameter to:\ndoTaskInstant sayInstant \"Enabling motors.\" | enableMotors\nThen set the OutGoingCommands1Seconds parameter to:\n60\nEvery 60 seconds, the mobile robot will announce, \"Enabling motors\" and then attempt to enable the\nmotors.\nThe outgoing host will receive the ARCL responses:\nCompleted doing instant task: sayInstant \"Enabling motors.\"\nThen it will respond with, either:\nMotors enabled\nor\nEstop pressed, cannot enable motors\nOutgoing ARCL Commands Parameters\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 39\n\nOutgoing ARCL Commands Parameters\nThe Outgoing ARCL command parameters allow you to set the mobile robot up to automatically generate\nARCL commands at regular intervals. You can send one or more ARCL commands; to send multiple com-\nmands, separate each command with a pipe charactger (|). For example, set the OutGoingCommands1\nparameter to:\ndoTaskInstant sayInstant \"Enabling motors.\" | enableMotors\nThen set the OutGoingCommands1Seconds parameter to:\n60\nEvery 60 seconds, the mobile robot will announce, \"Enabling motors\" and then attempt to enable the\nmotors.\nThe outgoing host will receive the ARCL responses:\nCompleted doing instant task: sayInstant \"Enabling motors.\"\nThen it will respond with, either:\nMotors enabled\nor\nEstop pressed, cannot enable motors\nOutgoing ARCL Commands Parameters\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 39",
    "Page 40": "Outgoing Enterprise ARCL Connection Setup Parameters\nThe Outgoing Enterprise ARCL connection setup parameters are used to instruct the Enterprise Manager\nto initiate an outgoing ARCL TCP connection to another device on the network. This approach can be used\nin lieu of requiring that the other device initiate an incoming connection to the Enterprise Manager.\nThere may be hand-shaking involved between the Enterprise Manager and the factory equipment, to\ndetermine when the command should be executed.\nIn order to use this feature, the OutgoingHostname needs to be set to a string and the OutgoingPort needs\nto be a non-zero number.\nUse of the outgoing ARCL connections:\nl The outgoing connection can be used to automatically execute certain ARCL commands at specified\nintervals. This can be useful for gathering certain information without requiring that the applic-\nation, running on the connected device, continuously request the data.\nOutgoing Enterprise ARCL Connection Setup Parameters\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 40\n\nOutgoing Enterprise ARCL Connection Setup Parameters\nThe Outgoing Enterprise ARCL connection setup parameters are used to instruct the Enterprise Manager\nto initiate an outgoing ARCL TCP connection to another device on the network. This approach can be used\nin lieu of requiring that the other device initiate an incoming connection to the Enterprise Manager.\nThere may be hand-shaking involved between the Enterprise Manager and the factory equipment, to\ndetermine when the command should be executed.\nIn order to use this feature, the OutgoingHostname needs to be set to a string and the OutgoingPort needs\nto be a non-zero number.\nUse of the outgoing ARCL connections:\nl\n The outgoing connection can be used to automatically execute certain ARCL commands at specified\nintervals. This can be useful for gathering certain information without requiring that the applic-\nation, running on the connected device, continuously request the data.\nOutgoing Enterprise ARCL Connection Setup Parameters\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 40",
    "Page 41": "Outgoing Enterprise ARCL Commands Parameters\nThe Outgoing Enterprise ARCL command parameters allow you to set the Enterprise Manager up to auto-\nmatically generate ARCL commands at regular intervals. You can send one or more ARCL commands; to\nsend multiple commands, separate each command with a pipe character (|). For example, set the OutGo-\ningCommands1 parameter to:\nQueueshowrobot default echoit\nQueueRobot: \u201cRobot1\u201d UnAvailable EStopPressed echoit\nQueueRobot: \u201cRobot2\u201d UnAvailable Interrupted echoit\nQueueRobot: \u201cRobot3\u201d UnAvailable InterruptedButNotYetIdle echoit\nQueueRobot: \u201cRobot4\u201d Available Available echoit\nQueueRobot: \u201cRobot5\u201d InProgress Driving\nechoit\nQueueRobot: \u201cRobot6\u201d UnAvailable NotUsingEnterpriseManager echoit\nQueueRobot: \u201cRobot7\u201d UnAvailable UnknownBatteryType echoit\nQueueRobot: \u201cRobot8\u201d UnAvailable ForcedDocked echoit\nQueueRobot: \u201cRobot9\u201d UnAvailable NotLocalized echoit\nQueueRobot: \"patrolbot\" UnAvailable Fault_Driving_Application_faultName echoit\nEndQueueShowRobot\nThen you could parse the output to compare the number of robots connected vs. how many robots should\nbe connected, and generate an alarm if there is a mismatch.\nSee Also...\nIntroduction to ARCL on page 25\nEnable Options in\nSet ARCL Parameters in MobilePlanner on page 30\nConnect to ARCL Using a Telnet Client on page 42\nUsing the ARCL Commands on page 46\nARCL Command Reference on page 70\nARCL Server Messages on page 299\nOutgoing Enterprise ARCL Commands Parameters\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 41\n\nOutgoing Enterprise ARCL Commands Parameters\nThe Outgoing Enterprise ARCL command parameters allow you to set the Enterprise Manager up to auto-\nmatically generate ARCL commands at regular intervals. You can send one or more ARCL commands; to\nsend multiple commands, separate each command with a pipe character (|). For example, set the OutGo-\ningCommands1 parameter to:\nQueueshowrobot default echoit\nQueueRobot: \u201cRobot1\u201d UnAvailable EStopPressed echoit\nQueueRobot: \u201cRobot2\u201d UnAvailable Interrupted echoit\nQueueRobot: \u201cRobot3\u201d UnAvailable InterruptedButNotYetIdle echoit\nQueueRobot: \u201cRobot4\u201d Available Available echoit\nQueueRobot: \u201cRobot5\u201d InProgress Driving\nechoit\nQueueRobot: \u201cRobot6\u201d UnAvailable NotUsingEnterpriseManager echoit\nQueueRobot: \u201cRobot7\u201d UnAvailable UnknownBatteryType echoit\nQueueRobot: \u201cRobot8\u201d UnAvailable ForcedDocked echoit\nQueueRobot: \u201cRobot9\u201d UnAvailable NotLocalized echoit\nQueueRobot: \"patrolbot\" UnAvailable Fault_Driving_Application_faultName echoit\nEndQueueShowRobot\nThen you could parse the output to compare the number of robots connected vs. how many robots should\nbe connected, and generate an alarm if there is a mismatch.\nSee Also...\nIntroduction to ARCL on page 25\nEnable Options in\nSet ARCL Parameters in MobilePlanner on page 30\nConnect to ARCL Using a Telnet Client on page 42\nUsing the ARCL Commands on page 46\nARCL Command Reference on page 70\nARCL Server Messages on page 299\nOutgoing Enterprise ARCL Commands Parameters\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 41",
    "Page 42": "Connect to ARCL Using a Telnet Client\nThis section tells you how to connect to your mobile robot to ARCL using a client, such as Telnet or PuTTY.\nConnect to ARCL Using a Telnet Client\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 42\n\nConnect to ARCL Using a Telnet Client\nThis section tells you how to connect to your mobile robot to ARCL using a client, such as Telnet or PuTTY.\nConnect to ARCL Using a Telnet Client\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 42",
    "Page 43": "Setting the Connection Parameters\n1.\nOpen the MobilePlanner software, version 4.0 or later, and connect to the mobile robot. Refer to the\nAdept Motivity User's Guide for details on installing and starting MobilePlanner.\n2.\nFrom the Configuration tab, select the Robot Interface tab.\n3.\nSelect ARCL Server Setup from the Sections column. The ARCL Server Setup parameters are shown\nin the following figure.\nARCL\u00a0Server Setup Parameters\nThese parameters allow you to control the client-server connection, see Understanding the Con-\nfiguration Parameters on page 37 for details.\n4.\nEnter a password for the Telnet client for the Password parameter. If a password already exists,\nmake a note of it so that you can open the ARCL server from the Telnet connection.\nSetting the Connection Parameters\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 43\n\nSetting the Connection Parameters\n1.\nOpen the MobilePlanner software, version 4.0 or later, and connect to the mobile robot. Refer to the\nAdept Motivity User's Guide\n for details on installing and starting MobilePlanner.\n2.\nFrom the Configuration tab, select the Robot Interface tab.\n3.\nSelect ARCL Server Setup from the Sections column. The ARCL Server Setup parameters are shown\nin the following figure.\nARCL\u00a0Server Setup Parameters\nThese parameters allow you to control the client-server connection, see Understanding the Con-\nfiguration Parameters on page 37 for details.\n4.\nEnter a password for the Telnet client for the Password parameter. If a password already exists,\nmake a note of it so that you can open the ARCL server from the Telnet connection.\nSetting the Connection Parameters\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 43",
    "Page 44": "Connecting to ARCL\nThe following instructions describe how to connect to ARCL using the Command Prompt window in the\nMicrosoft Windows operating system. You can also use a terminal-emulation utility, such as PuTTY. For\ndetails on PuTTY, see the PuTTY\u00a0website: http://www.putty.org.\n1.\nOn a Windows-based PC, open the Command Prompt window.\nIn Windows, hold down the \"Window\" key and the \"R\" key to open the Run dialog box. Type cmd to\ndisplay the command terminal.)\nNOTE:\u00a0On some Windows installations, you may need to enable Telnet using:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Control Panel > Programs and Features > Turn Windows feature on or off.\n2.\nStart Telnet using the ARCL server address and the port number specified in the ARCL Server Setup\nParameters. For example:\nTelnet 192.168.0.44 7171\n3.\nEnter the password that you set in Step 5, above. If you mis-type the password, you will have to\nrestart the Telnet client.\nAfter you have successfully logged-in, the server responds with a list of supported commands and a\nbrief description of each. See the example in the following figure.\nNOTE:\u00a0The list of available commands depends on your system configuration.\nExample Command List after Login\n4.\nIf needed, you can enter the echo off command to prevent your input from echoing (typing double\ncharacters).\n5.\nWhen you are finished, use the quit command to properly close the connection.\nAfter you connect to ARCL, you can execute any of the ARCL commands available. For a complete list of\nthe different ARCL commands and their arguments, refer to ARCL Command Reference on page 70.\nConnecting to ARCL\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 44\n\nConnecting to ARCL\nThe following instructions describe how to connect to ARCL using the Command Prompt window in the\nMicrosoft Windows operating system. You can also use a terminal-emulation utility, such as PuTTY. For\ndetails on PuTTY, see the PuTTY\u00a0website: http://www.putty.org.\n1.\nOn a Windows-based PC, open the Command Prompt window.\nIn Windows, hold down the \"Window\" key and the \"R\" key to open the Run dialog box. Type\n cmd\n to\ndisplay the command terminal.)\nNOTE:\n\u00a0On some Windows installations, you may need to enable Telnet using:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Control Panel > Programs and Features > Turn Windows feature on or off.\n2.\nStart Telnet using the ARCL server address and the port number specified in the ARCL Server Setup\nParameters. For example:\nTelnet 192.168.0.44 7171\n3.\nEnter the password that you set in Step 5, above. If you mis-type the password, you will have to\nrestart the Telnet client.\nAfter you have successfully logged-in, the server responds with a list of supported commands and a\nbrief description of each. See the example in the following figure.\nNOTE:\n\u00a0The list of available commands depends on your system configuration.\nExample Command List after Login\n4.\nIf needed, you can enter the\n echo off\n command to prevent your input from echoing (typing double\ncharacters).\n5.\nWhen you are finished, use the\n quit\n command to properly close the connection.\nAfter you connect to ARCL, you can execute any of the ARCL commands available. For a complete list of\nthe different ARCL commands and their arguments, refer to ARCL Command Reference on page 70.\nConnecting to ARCL\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 44",
    "Page 45": "ARCL supports multiple client/server connections through the TCP/IP socket. However, commands and\nquery responses are connection-specific. For example, you can have two Telnet clients connected; how-\never, only the one that requested a oneLineStatus response actually receives the status message.\nSee Also...\nIntroduction to ARCL on page 25\nEnable Options in\nSet ARCL Parameters in MobilePlanner on page 30\nConnect to ARCL Using a Telnet Client on page 42\nUsing the ARCL Commands on page 46\nARCL Command Reference on page 70\nARCL Server Messages on page 299\nSee Also...\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 45\n\nARCL supports multiple client/server connections through the TCP/IP socket. However, commands and\nquery responses are connection-specific. For example, you can have two Telnet clients connected; how-\never, only the one that requested a\n oneLineStatus\n response actually receives the status message.\nSee Also...\nIntroduction to ARCL on page 25\nEnable Options in\nSet ARCL Parameters in MobilePlanner on page 30\nConnect to ARCL Using a Telnet Client on page 42\nUsing the ARCL Commands on page 46\nARCL Command Reference on page 70\nARCL Server Messages on page 299\nSee Also...\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 45",
    "Page 46": "Using the ARCL Commands\nAfter you have established a connection to the ARCL server, you are ready to operate and monitor the\nmobile robot using the ARCL commands. The following topics discuss the use of these commands for cer-\ntain tasks. To view an alphabetical list and description of each ARCL command, refer to ARCL Command\nReference on page 70.\nThis section discusses the following topics:\nSee Also...\n46\nUnderstanding the Commands\n47\nDocument Conventions\n47\nCommand Notes\n48\nData Types\n48\nStatus and Error Messages\n50\nStatus Conditions\n51\nUsing ARCL Variables\n55\nUsing Tasks and Macros\n56\nForever Tasks\n57\nUsing Configuration Commands\n58\nUsing the Queuing Commands\n60\nWorking With Payloads\n61\nCreating a Map\n63\nTracking Sectors\n64\nNavigating and Localizing\n65\nUsing Range Devices and Custom Sensors\n66\nMonitoring the I/O Ports\n68\nThe ARCL command set is evolutionary and backward compatible. To see added commands, consult the\nARCL help list when connecting with a new ARAM version. For more details on the help command, see help\nCommand on page 141.\nSee Also...\nIntroduction to ARCL on page 25\nEnable Options in\nSet ARCL Parameters in MobilePlanner on page 30\nConnect to ARCL Using a Telnet Client on page 42\nUsing the ARCL Commands on page 46\nARCL Command Reference on page 70\nARCL Server Messages on page 299\nUsing the ARCL Commands\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 46\n\nUsing the ARCL Commands\nAfter you have established a connection to the ARCL server, you are ready to operate and monitor the\nmobile robot using the ARCL commands. The following topics discuss the use of these commands for cer-\ntain tasks. To view an alphabetical list and description of each ARCL command, refer to ARCL Command\nReference on page 70.\nThis section discusses the following topics:\nSee Also...\n46\nUnderstanding the Commands\n47\nDocument Conventions\n47\nCommand Notes\n48\nData Types\n48\nStatus and Error Messages\n50\nStatus Conditions\n51\nUsing ARCL Variables\n55\nUsing Tasks and Macros\n56\nForever Tasks\n57\nUsing Configuration Commands\n58\nUsing the Queuing Commands\n60\nWorking With Payloads\n61\nCreating a Map\n63\nTracking Sectors\n64\nNavigating and Localizing\n65\nUsing Range Devices and Custom Sensors\n66\nMonitoring the I/O Ports\n68\nThe ARCL command set is evolutionary and backward compatible. To see added commands, consult the\nARCL help list when connecting with a new ARAM version. For more details on the help command, see help\nCommand on page 141.\nSee Also...\nIntroduction to ARCL on page 25\nEnable Options in\nSet ARCL Parameters in MobilePlanner on page 30\nConnect to ARCL Using a Telnet Client on page 42\nUsing the ARCL Commands on page 46\nARCL Command Reference on page 70\nARCL Server Messages on page 299\nUsing the ARCL Commands\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 46",
    "Page 47": "Understanding the Commands\nThis section describes the document conventions, command notes, and status and error messages.\nThe commands are discussed by task in this chapter. To view commands presented in alphabetical order,\nsee the ARCL Command Reference on page 70.\nDocument Conventions\nCommand name (shortcut:\u00a0cn)\nThe command can be invoked with its full name or, in some cases, with a shortcut. When there is a short-\ncut, it will be listed in parentheses after the command name in the title of the command description. The\nsyntax, usage, and parameters are the same, whether the full command name or the shortcut is used.\nSyntax\nThe ARCL commands are not case sensitive. In this guide, commands are shown in mixed case and bold\ntype. Required parameters are shown in angled brackets and regular type; whereas, optional parameters\nare shown in square brackets [\u00a0] and regular type. For example:\nqueuePickup <goalName> [priority] [jobId]\nIn this example, the <goalName> parameter is required; the [priority] and [jobId] parameters are\noptional.\ngoToRouteGoal <routeName> <goalName> [index]\nIn this example, the <routeName> and <goalName> parameters are required; the [index] parameter is\noptional.\nUsage Considerations\nThis section describes any special considerations that must be followed when using the command. It also\ndescribes where the command can be used, as follows:\nl This ARCL\u00a0command is only available on the robot.\nl This ARCL\u00a0command is available only on the Enterprise Manager.\nl This ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nThis section lists any ARAM settings that must be enabled to use the command.\nParameters\nThis section describes each of the required and optional command parameters (such as goalname, rout-\nname, echo, etc.).\nUnderstanding the Commands\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 47\n\nUnderstanding the Commands\nThis section describes the document conventions, command notes, and status and error messages.\nThe commands are discussed by task in this chapter. To view commands presented in alphabetical order,\nsee the ARCL Command Reference on page 70.\nDocument Conventions\nCommand name (shortcut:\u00a0cn)\nThe command can be invoked with its full name or, in some cases, with a shortcut. When there is a short-\ncut, it will be listed in parentheses after the command name in the title of the command description. The\nsyntax, usage, and parameters are the same, whether the full command name or the shortcut is used.\nSyntax\nThe ARCL commands are not case sensitive. In this guide, commands are shown in mixed case and bold\ntype. Required parameters are shown in angled brackets and regular type; whereas, optional parameters\nare shown in square brackets [\u00a0] and regular type. For example:\nqueuePickup\n <goalName> [priority] [jobId]\nIn this example, the <goalName> parameter is required; the [priority] and [jobId] parameters are\noptional.\ngoToRouteGoal\n <routeName> <goalName> [index]\nIn this example, the <routeName> and <goalName> parameters are required; the [index] parameter is\noptional.\nUsage Considerations\nThis section describes any special considerations that must be followed when using the command. It also\ndescribes where the command can be used, as follows:\nl\n This ARCL\u00a0command is only available on the robot.\nl\n This ARCL\u00a0command is available only on the Enterprise Manager.\nl\n This ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nThis section lists any ARAM settings that must be enabled to use the command.\nParameters\nThis section describes each of the required and optional command parameters (such as goalname, rout-\nname, echo, etc.).\nUnderstanding the Commands\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 47",
    "Page 48": "Responses\nThis section shows the information returned by the command.\nDetails\nThis section provides more details about the functions of the command.\nExamples\nThis section provides examples of correctly-formatted command lines are presented in this section.\nRelated Commands\nThis section lists additional commands that are similar or often used with this command.\nCommand Notes\nBelow are some helpful notes to remember when using ARCL commands:\nl ARCL responds with the command\u2019s syntax if you omit any or all required parameters.\nl Extraneous parameters are ignored.\nl ARCL limits commands to a maximum of 5,000 ASCII characters\nl As a general rule, use double quotes for string parameters, especially if there are spaces in the\nstring.\nl Mistyped Telnet commands and parameters cannot be edited on the command line. You have to\ncompletely re-type the command.\nl Mistyped or non-existent commands are rejected with the response, \u201cUnknown command\".\nl Although commands are not case-sensitive, some parameters are case-sensitive.\nData Types\nThe following table shows all the available ARCL data types (not all of these may apply to a particular com-\nmand):\nCommand Notes\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 48\n\nResponses\nThis section shows the information returned by the command.\nDetails\nThis section provides more details about the functions of the command.\nExamples\nThis section provides examples of correctly-formatted command lines are presented in this section.\nRelated Commands\nThis section lists additional commands that are similar or often used with this command.\nCommand Notes\nBelow are some helpful notes to remember when using ARCL commands:\nl\n ARCL responds with the command\u2019s syntax if you omit any or all required parameters.\nl\n Extraneous parameters are ignored.\nl\n ARCL limits commands to a maximum of 5,000 ASCII characters\nl\n As a general rule, use double quotes for string parameters, especially if there are spaces in the\nstring.\nl\n Mistyped Telnet commands and parameters cannot be edited on the command line. You have to\ncompletely re-type the command.\nl\n Mistyped or non-existent commands are rejected with the response, \u201cUnknown command\".\nl\n Although commands are not case-sensitive, some parameters are case-sensitive.\nData Types\nThe following table shows all the available ARCL data types (not all of these may apply to a particular com-\nmand):\nCommand Notes\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 48",
    "Page 49": "Parameter\nData Type\nMax Length/Range\ncancelType\nstring\nmax length: 127 char-\nacters\ncancelValue\nstring\nmax length: 127 char-\nacters\nDROPOFFgoalName\nstring\nmax length: 127 char-\nacters\nDROPOFFpriority\ninteger (signed long)\nrange: \u20132147483648 to\n2147483647\nechoString2\nstring\nmax length: 127 char-\nacters\ngoalName\nstring\nmax length: 127 char-\nacters\njobId2\nstring\nmax length: 127 char-\nacters\npayload slot number\ninteger (signed long)\nrange: 1 to\n2147483647\npayload slot string1\nstring\nmax length: 127 char-\nacters\nPICKUPgoalName\nstring\nmax length: 127 char-\nacters\nPICKUPpriority\ninteger (signed long)\nrange: \u20132147483648 to\n2147483647\npriority\ninteger (signed long)\nrange: \u20132147483648 to\n2147483647\nqueryType\nstring\nmax length: 127 char-\nacters\nqueryValue\nstring\nmax length: 127 char-\nacters\nreason2\nstring\nmax length: 127 char-\nacters\nrobotName1\nstring\nmax length: 127 char-\nacters\n1These parameters support spaces, and need to be enclosed in quotes if they\ninclude spaces.\n2These parameters do not support spaces or double quotes.\nData Types\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 49\n\nParameter\nData Type\nMax Length/Range\ncancelType\nstring\nmax length: 127 char-\nacters\ncancelValue\nstring\nmax length: 127 char-\nacters\nDROPOFFgoalName\nstring\nmax length: 127 char-\nacters\nDROPOFFpriority\ninteger (signed long)\nrange: \u20132147483648 to\n2147483647\nechoString\n2\nstring\nmax length: 127 char-\nacters\ngoalName\nstring\nmax length: 127 char-\nacters\njobId\n2\nstring\nmax length: 127 char-\nacters\npayload slot number\ninteger (signed long)\nrange: 1 to\n2147483647\npayload slot string\n1\nstring\nmax length: 127 char-\nacters\nPICKUPgoalName\nstring\nmax length: 127 char-\nacters\nPICKUPpriority\ninteger (signed long)\nrange: \u20132147483648 to\n2147483647\npriority\ninteger (signed long)\nrange: \u20132147483648 to\n2147483647\nqueryType\nstring\nmax length: 127 char-\nacters\nqueryValue\nstring\nmax length: 127 char-\nacters\nreason\n2\nstring\nmax length: 127 char-\nacters\nrobotName\n1\nstring\nmax length: 127 char-\nacters\n1\nThese parameters support spaces, and need to be enclosed in quotes if they\ninclude spaces.\n2\nThese parameters do not support spaces or double quotes.\nData Types\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 49",
    "Page 50": "Status and Error Messages\nARCL sends important status updates to the connected client for certain commands, such as goto\ngoalName. For example, when the mobile robot first starts toward the goal, the following is sent to the cli-\nent:\nGoing\nto\ngoal goalName\nWhen the robot arrives at the goal, a status update of the following is displayed:\nArrived\nat\ngoal goalName\nIf ARCL is unable to execute the command because of a command sequence error, a non-existent file-\nname, or because a feature was not set up properly, a SetUpError is displayed. For example, if you attempt\nto execute listAdd or listExecute before entering the command listStart, the following error is displayed:\nSetUpError: You need to start a list before you can add to it.\nAll other argument errors result in a two-line ARCL response, with two distinct error messages, such as the\nfollowing:\nCommandError:\ngoto\ndock12\nCommandErrorDescription:\nNo\ngoal\n'dock12'\nOccasionally, ARCL sends reports without prompting, for example, when there are changes in the robot\u2019s\ndocking and charging status.\nARCL sends important status updates to the connected client for certain commands, such as\nqueuePickup goalName. For example, when the job is first received, then the following is sent to the cli-\nent:\nqueuepickup goal \"<goalName>\u201d with priority 10, id PICKUP138 and jobId JOB138\nsuccessfully queued\nWhen the job has been completed, this update message is sent:\nQueueUpdate:\u00a0PICKUP138 JOB138 10 Completed None Goal \"<goalName>\" \"robotName\"\n04/08/2013 13:46:34 0\nIf ARCL is unable to execute the command because of a command sequence error, a non-existent file-\nname, or because a feature was not set up properly, a SetUpError is displayed. For example, if you attempt\nto execute listAdd or listExecute before entering the command listStart, the following error is displayed:\nSetUpError: You need to start a list before you can add to it.\nAll other argument errors result in a two-line ARCL response, with two distinct error messages, such as the\nfollowing:\nCommandError: queuePickup goal6\nCommandErrorDescription: queuePickup no such goal \"goal6\"\nARCL sends status update messages without prompting, for example, when there are changes in a robot\u2019s\nor a job's state.\nStatus and Error Messages\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 50\n\nStatus and Error Messages\nARCL sends important status updates to the connected client for certain commands, such as goto\ngoalName. For example, when the mobile robot first starts toward the goal, the following is sent to the cli-\nent:\nGoing\nto\ngoal goalName\nWhen the robot arrives at the goal, a status update of the following is displayed:\nArrived\nat\ngoal goalName\nIf ARCL is unable to execute the command because of a command sequence error, a non-existent file-\nname, or because a feature was not set up properly, a SetUpError is displayed. For example, if you attempt\nto execute listAdd or listExecute before entering the command listStart, the following error is displayed:\nSetUpError: You need to start a list before you can add to it.\nAll other argument errors result in a two-line ARCL response, with two distinct error messages, such as the\nfollowing:\nCommandError:\ngoto\ndock12\nCommandErrorDescription:\nNo\ngoal\n'dock12'\nOccasionally, ARCL sends reports without prompting, for example, when there are changes in the robot\u2019s\ndocking and charging status.\nARCL sends important status updates to the connected client for certain commands, such as\nqueuePickup\n goalName. For example, when the job is first received, then the following is sent to the cli-\nent:\nqueuepickup goal \"<goalName>\u201d with priority 10, id PICKUP138 and jobId JOB138\nsuccessfully queued\nWhen the job has been completed, this update message is sent:\nQueueUpdate:\u00a0PICKUP138 JOB138 10 Completed None Goal \"<goalName>\" \"robotName\"\n04/08/2013 13:46:34 0\nIf ARCL is unable to execute the command because of a command sequence error, a non-existent file-\nname, or because a feature was not set up properly, a SetUpError is displayed. For example, if you attempt\nto execute listAdd or listExecute before entering the command listStart, the following error is displayed:\nSetUpError: You need to start a list before you can add to it.\nAll other argument errors result in a two-line ARCL response, with two distinct error messages, such as the\nfollowing:\nCommandError: queuePickup goal6\nCommandErrorDescription: queuePickup no such goal \"goal6\"\nARCL sends status update messages without prompting, for example, when there are changes in a robot\u2019s\nor a job's state.\nStatus and Error Messages\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 50",
    "Page 51": "Refer to ARCL Server Messages on page 299 for a list of unprompted messages.\nStatus Conditions\nThe following table shows the possible robot and job status conditions:\nStatus Conditions\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 51\n\nRefer to ARCL Server Messages on page 299 for a list of unprompted messages.\nStatus Conditions\nThe following table shows the possible robot and job status conditions:\nStatus Conditions\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 51",
    "Page 52": "Status\nSubstatus\nPending\nNone\nPending\nAssignedRobotOffLine\nPending\nNoMatchingRobotForLinkedJob\nPending\nNoMatch-\ningRobotForOtherSegment\nPending\nNoMatchingRobot\nPending\nID_PICKUPxx <where\nPICKUPxx is the jobSegment\nID for which this Job Segment\nis waiting>\nPending\nID_DROPOFFxx <where\nDROPOFFxx is the jobSegment\nID for which this Job Segment\nis waiting>\nAvailable\nAvailable\nAvailable\nParking\nAvailable\nParked\nAvailable\nDockParking\nAvailable\nDockParked\nInterrupted\nNone\nInProgress\nUnAllocated\nInProgress\nAllocated\nInProgress\nBeforePickup\nInProgress\nBeforeDropoff\nInProgress\nBeforeEvery\nInProgress\nBefore\nInProgress\nBuffering\nInProgress\nBuffered\nInProgress\nDriving\nInProgress\nAfter\nInProgress\nAfterEvery\nStatus Conditions\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 52\n\nStatus\nSubstatus\nPending\nNone\nPending\nAssignedRobotOffLine\nPending\nNoMatchingRobotForLinkedJob\nPending\nNoMatch-\ningRobotForOtherSegment\nPending\nNoMatchingRobot\nPending\nID_PICKUPxx <where\nPICKUPxx is the jobSegment\nID for which this Job Segment\nis waiting>\nPending\nID_DROPOFFxx <where\nDROPOFFxx is the jobSegment\nID for which this Job Segment\nis waiting>\nAvailable\nAvailable\nAvailable\nParking\nAvailable\nParked\nAvailable\nDockParking\nAvailable\nDockParked\nInterrupted\nNone\nInProgress\nUnAllocated\nInProgress\nAllocated\nInProgress\nBeforePickup\nInProgress\nBeforeDropoff\nInProgress\nBeforeEvery\nInProgress\nBefore\nInProgress\nBuffering\nInProgress\nBuffered\nInProgress\nDriving\nInProgress\nAfter\nInProgress\nAfterEvery\nStatus Conditions\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 52",
    "Page 53": "Status\nSubstatus\nInProgress\nAfterPickup\nInProgress\nAfterDropoff\nCompleted\nNone\nCancelling\nNone\nCancelled\nNone\nCancelling\n<application_supplied_can-\ncelReason_string>\nCancelled\n<application_supplied_can-\ncelReason_string>\nBeforeModify\nNone\nInter-\nruptedByModify\nNone\nAfterModify\nNone\nUnAvailable\nNotUsingEnterpriseManager\nUnAvailable\nUnknownBatteryType\nUnAvailable\nForcedDocked\nUnAvailable\nLost\nUnAvailable\nEStopPressed\nUnAvailable\nInterrupted\nUnAvailable\nInterruptedButNotYetIdle\nUnAvailable\nFault_Driving_Application_\n<application_supplied_string>\nUnAvailable\nOutgoingARCLConnLost\nUnAvailable\nParking\nUnAvailable\nDockParking\nUnAvailable\nModeIsLocked\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nStatus Conditions\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 53\n\nStatus\nSubstatus\nInProgress\nAfterPickup\nInProgress\nAfterDropoff\nCompleted\nNone\nCancelling\nNone\nCancelled\nNone\nCancelling\n<application_supplied_can-\ncelReason_string>\nCancelled\n<application_supplied_can-\ncelReason_string>\nBeforeModify\nNone\nInter-\nruptedByModify\nNone\nAfterModify\nNone\nUnAvailable\nNotUsingEnterpriseManager\nUnAvailable\nUnknownBatteryType\nUnAvailable\nForcedDocked\nUnAvailable\nLost\nUnAvailable\nEStopPressed\nUnAvailable\nInterrupted\nUnAvailable\nInterruptedButNotYetIdle\nUnAvailable\nFault_Driving_Application_\n<application_supplied_string>\nUnAvailable\nOutgoingARCLConnLost\nUnAvailable\nParking\nUnAvailable\nDockParking\nUnAvailable\nModeIsLocked\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nStatus Conditions\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 53",
    "Page 54": "Using Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nStatus Conditions\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 54\n\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nStatus Conditions\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 54",
    "Page 55": "Using ARCL Variables\nThe following is a list of variables that you can use with any ARCL command.\nVariable\nDescription/Range of Values\n$g\nRepresents the current goal name. For example: Going to goal $g.\n$y\nRepresents the year (2xxx)\n$m\nRepresents the month (1-12)\n$d\nRepresents the day (1-7)\n$H\nRepresents the hour (0-23)\n$M\nRepresents the minute (0-59)\n$S\nRepresents the second (0-59)\n$T\nRepresents the current heading (Th) of the mobile robot (degrees)\n$X\nRepresents the current X position of the mobile robot in the map (mm)\n$Y\nRepresents the current Y\u00a0position of the mobile robot in the map (mm)\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nUsing ARCL Variables\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 55\n\nUsing ARCL Variables\nThe following is a list of variables that you can use with any ARCL command.\nVariable\nDescription/Range of Values\n$g\nRepresents the current goal name. For example: Going to goal $g.\n$y\nRepresents the year (2xxx)\n$m\nRepresents the month (1-12)\n$d\nRepresents the day (1-7)\n$H\nRepresents the hour (0-23)\n$M\nRepresents the minute (0-59)\n$S\nRepresents the second (0-59)\n$T\nRepresents the current heading (Th) of the mobile robot (degrees)\n$X\nRepresents the current X position of the mobile robot in the map (mm)\n$Y\nRepresents the current Y\u00a0position of the mobile robot in the map (mm)\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nUsing ARCL Variables\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 55",
    "Page 56": "Using Tasks and Macros\nARCL\u2019s list commands let you assemble and execute a sequence of tasks, or execute macros. The following\nARCL commands allow you to carry out a single task, create a task list, or execute a macro:\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\nplay Command on page 199\nsay Command on page 261\nARCL also allows you to create a task list, add tasks to the list, and then execute the task list. In doing so,\nyou can make use of the tasks that are available in the MobilePlanner software for building routes and mac-\nros. Refer to the list commands for details.\nInitialize a list first with the listStart command. This also overwrites a list that you may\u2019ve already started,\nbut have yet to execute. Use the listAdd command with a task name as argument and followed by any and\nall task arguments to put a task into the current list. Use listExecute to perform the series of tasks, each in\norder first in, first out. The list may be executed only once, and you must start with listStart before cre-\nating and executing a new list sequence of tasks.\nHere is a simple example that has the robot travel to the goal Lobby and, when it gets there, says its name\nand then asks for your name. The regular text lines are what you might type; the lines in quotes are the\nmessages that the ARCL server generates as you send it commands and it completes its tasks:\nlistStart\n\u201cList being cleared\u201d\n\u201cMaking new list\u201d\nlistAdd goto Lobby\n\u201cAdded task goto Lobby\u201d\nlistAdd say My name is PatrolBot.\n\u201cAdded task say My name is PatrolBot.\u201d\nlistAdd say What is your name?\n\u201cAdded task say What is your name?\u201d\nlistExecute\n\u201cExecuting list\u201d\n\u201cSuccessfully finished task list\u201d\nTo carry out a single task use the doTask command. For example:\ndoTask goto goal_name\nUsing Tasks and Macros\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 56\n\nUsing Tasks and Macros\nARCL\u2019s list commands let you assemble and execute a sequence of tasks, or execute macros. The following\nARCL commands allow you to carry out a single task, create a task list, or execute a macro:\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\nplay Command on page 199\nsay Command on page 261\nARCL also allows you to create a task list, add tasks to the list, and then execute the task list. In doing so,\nyou can make use of the tasks that are available in the MobilePlanner software for building routes and mac-\nros. Refer to the list commands for details.\nInitialize a list first with the listStart command. This also overwrites a list that you may\u2019ve already started,\nbut have yet to execute. Use the listAdd command with a task name as argument and followed by any and\nall task arguments to put a task into the current list. Use listExecute to perform the series of tasks, each in\norder first in, first out. The list may be executed only once, and you must start with listStart before cre-\nating and executing a new list sequence of tasks.\nHere is a simple example that has the robot travel to the goal Lobby and, when it gets there, says its name\nand then asks for your name. The regular text lines are what you might type; the lines in quotes are the\nmessages that the ARCL server generates as you send it commands and it completes its tasks:\nlistStart\n\u201cList being cleared\u201d\n\u201cMaking new list\u201d\nlistAdd goto Lobby\n\u201cAdded task goto Lobby\u201d\nlistAdd say My name is PatrolBot.\n\u201cAdded task say My name is PatrolBot.\u201d\nlistAdd say What is your name?\n\u201cAdded task say What is your name?\u201d\nlistExecute\n\u201cExecuting list\u201d\n\u201cSuccessfully finished task list\u201d\nTo carry out a single task use the doTask command. For example:\ndoTask goto goal_name\nUsing Tasks and Macros\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 56",
    "Page 57": "Forever Tasks\nThere are a few tasks in the MobilePlanner software that end with the qualifier \"Forever\". This means that\nthe task continues until explicitly instructed to do something else. The patrolForever command, for\nexample, causes the robot to continuously patrol the specified route. In other words, it keeps repeating the\nroute until it is commanded to stop.\nTherefore, it is best to avoid using \"Forever\" robot tasks in a task list or with the doTask command in ARCL.\nInstead use the dock or patrol ARCL commands, which serve the same purpose. The differences are subtle,\nbut the dock and patrol commands are more appropriate for the job.\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nForever Tasks\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 57\n\nForever Tasks\nThere are a few tasks in the MobilePlanner software that end with the qualifier \"Forever\". This means that\nthe task continues until explicitly instructed to do something else. The patrolForever command, for\nexample, causes the robot to continuously patrol the specified route. In other words, it keeps repeating the\nroute until it is commanded to stop.\nTherefore, it is best to avoid using \"Forever\" robot tasks in a task list or with the doTask command in ARCL.\nInstead use the dock or patrol ARCL commands, which serve the same purpose. The differences are subtle,\nbut the dock and patrol commands are more appropriate for the job.\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nForever Tasks\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 57",
    "Page 58": "Using Configuration Commands\nARCL allows you change the value of one or more ARAM operating parameters. For example, you can tell it\nto use a different map or change its top speed while driving. The following configuration commands are sup-\nported:\nconfigAdd Command on page 85\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nNOTE: You have to explicitly enable this feature in MobilePlanner by checking and applying the ArclCon-\nfig parameter in the ARCL\u00a0server setup section of the Configuration > Robot Interface tab. For\nmore information, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect\nuntil: the robot is idle and stationary; the Configuration changes are saved.\nUse the configStart command to initialize a configuration list, similar to creating a task list. The configStart\ncommand overwrites any previous list. Use the configAdd command to enter sections and related con-\nfiguration parameter keywords and values to the list. The configParse command sends the configuration\nparameters to ARAM, which implements the configuration changes.\nWhen creating the configuration list, you must first identify which Section the configuration parameter(s)\nis/are associated, and then provide the parameter\u2019s keyword and new value. Configuration keywords are\ncase-sensitive. For example, to change to a different map on the robot:\nconfigStart\nNew config starting\nconfigAdd Section Files\nAdded 'Section Files' to the config\nconfigAdd Map theNewMap.map\nAdded 'Map theNewMap.map' to the config\nconfigParse\nWill parse config\nMap changed\nConfig parsed fine\nNotice that the \"Map changed\" response was not generated by ARCL, but rather is an ARAM event warning\nthat is sent automatically to all attached clients. See ARCL Server Messages on page 299 for details. ARAM\ncatches and reports errors both for configuration and system issues, for example if it is unable to find a file\nor correctly load a map file.\nTo view ARAM configuration details and parameter values, use the ARCL commands: getConfigSectionList,\ngetConfigSectionValues, and getConfigSectionInfo.\nUsing Configuration Commands\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 58\n\nUsing Configuration Commands\nARCL allows you change the value of one or more ARAM operating parameters. For example, you can tell it\nto use a different map or change its top speed while driving. The following configuration commands are sup-\nported:\nconfigAdd Command on page 85\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nNOTE:\n You have to explicitly enable this feature in MobilePlanner by checking and applying the ArclCon-\nfig parameter in the ARCL\u00a0server setup section of the\n Configuration > Robot Interface\n tab. For\nmore information, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect\nuntil: the robot is idle and stationary; the Configuration changes are saved.\nUse the configStart command to initialize a configuration list, similar to creating a task list. The configStart\ncommand overwrites any previous list. Use the configAdd command to enter sections and related con-\nfiguration parameter keywords and values to the list. The configParse command sends the configuration\nparameters to ARAM, which implements the configuration changes.\nWhen creating the configuration list, you must first identify which Section the configuration parameter(s)\nis/are associated, and then provide the parameter\u2019s keyword and new value. Configuration keywords are\ncase-sensitive. For example, to change to a different map on the robot:\nconfigStart\nNew config starting\nconfigAdd Section Files\nAdded 'Section Files' to the config\nconfigAdd Map theNewMap.map\nAdded 'Map theNewMap.map' to the config\nconfigParse\nWill parse config\nMap changed\nConfig parsed fine\nNotice that the \"Map changed\" response was not generated by ARCL, but rather is an ARAM event warning\nthat is sent automatically to all attached clients. See ARCL Server Messages on page 299 for details. ARAM\ncatches and reports errors both for configuration and system issues, for example if it is unable to find a file\nor correctly load a map file.\nTo view ARAM configuration details and parameter values, use the ARCL commands: getConfigSectionList,\ngetConfigSectionValues, and getConfigSectionInfo.\nUsing Configuration Commands\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 58",
    "Page 59": "You can also create and manage custom configuration sections and parameters from ARCL. These new sec-\ntions and parameters are saved into a downloaded configuration file. However, new sections and para-\nmeters do not persist, even if recently uploaded from a saved configuration file. Instead, you must execute\nthe newConfigParam command whenever restarting ARAM. However, the last value given to the para-\nmeter persists.\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\n'\nUsing Configuration Commands\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 59\n\nYou can also create and manage custom configuration sections and parameters from ARCL. These new sec-\ntions and parameters are saved into a downloaded configuration file. However, new sections and para-\nmeters do not persist, even if recently uploaded from a saved configuration file. Instead, you must execute\nthe newConfigParam command whenever restarting ARAM. However, the last value given to the para-\nmeter persists.\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\n'\nUsing Configuration Commands\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 59",
    "Page 60": "Using the Queuing Commands\nThe ARCL queuing commands are used with the Enterprise Manager. They allow you to request a mobile\nrobot to drive to a goal (for example, for a pickup) and then drive to another goal (for example, for a\ndropoff).\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueueModify Command (shortcut: qmod) on page 218\nqueueModify Command (shortcut: qmod) on page 218\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nUsing the Queuing Commands\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 60\n\nUsing the Queuing Commands\nThe ARCL queuing commands are used with the Enterprise Manager. They allow you to request a mobile\nrobot to drive to a goal (for example, for a pickup) and then drive to another goal (for example, for a\ndropoff).\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueueModify Command (shortcut: qmod) on page 218\nqueueModify Command (shortcut: qmod) on page 218\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nUsing the Queuing Commands\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 60",
    "Page 61": "Working With Payloads\nUsing the ARCL payload commands, you can view the number of slots on a robot, assign names to those\nslot numbers, define the object (or payload) you want the robot to pick up or drop off, see what objects the\nrobot is carrying, and you can remove the object.\nUsing the ARCL payload commands, you can view the number of slots on a robot and see what objects the\nrobot is carrying.\nThe following commands are supported:\ngetPayload\u00a0Command on page 132\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nSlots represent containers where the objects (payload) are carried on top of the robot. You can assign a\nname to the slot numbers that represents the object the robot is to carry from one goal to the next. In the\nexample below, slot 1 is carrying \"Books\".\npayloadSet 1 Books\nTo configure the number of slots on a robot, in the custom arguments section on the robot add:\n-payloadSlots xx\nThe default number of slots is 4. Note that slot numbering starts at 1. There is no slot 0; that would indic-\nate there is no payload.\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nWorking With Payloads\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 61\n\nWorking With Payloads\nUsing the ARCL payload commands, you can view the number of slots on a robot, assign names to those\nslot numbers, define the object (or payload) you want the robot to pick up or drop off, see what objects the\nrobot is carrying, and you can remove the object.\nUsing the ARCL payload commands, you can view the number of slots on a robot and see what objects the\nrobot is carrying.\nThe following commands are supported:\ngetPayload\u00a0Command on page 132\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nSlots represent containers where the objects (payload) are carried on top of the robot. You can assign a\nname to the slot numbers that represents the object the robot is to carry from one goal to the next. In the\nexample below, slot 1 is carrying \"Books\".\npayloadSet 1 Books\nTo configure the number of slots on a robot, in the custom arguments section on the robot add:\n-payloadSlots xx\nThe default number of slots is 4. Note that slot numbering starts at 1. There is no slot 0; that would indic-\nate there is no payload.\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nWorking With Payloads\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 61",
    "Page 62": "Working With Payloads\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 62\n\nWorking With Payloads\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 62",
    "Page 63": "Creating a Map\nARCL allows you to start and stop creating a map scan, as well as add custom markers to the map while cre-\nating the scan. These markers can be sensor readings or other data.\nYou must enable the ArclScan setting in the ARCL\u00a0server setup section of the Configuration > Robot\nInterface tab in the MobilePlanner software.\nOnce enabled, the following commands are supported:\nscanAddGoal Command on page 262\nscanAddInfo Command on page 264\nscanAddTag Command on page 267\nscanStart Command on page 269\nscanStop Command on page 271\nFor details on these commands, refer to the ARCL Command Reference on page 70.\nTo start a map scan using scanStart, provide a name string for the 2d scan file that gets created. No argu-\nment is needed for the scanStop command, since only one scan may be active at a time. Also, provide a\nname and optional description (in that order) with the scanAddGoal command, to place a goal in the map.\nFor more details, see scanStart Command on page 269, scanStop Command on page 271 and scanAddGoal\nCommand on page 262.\nThe scanAddInfo and scanAddTag commands identify custom objects and then locate markers for them in\nthe map. To use these:\nl Define the custom objects with the scanAddInfo command. For details, see scanAddInfo Command\non page 264.\nl Add markers while scanning at positions throughout the map with the scanAddTag command. For\ndetails, see scanAddTag Command on page 267.\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nCreating a Map\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 63\n\nCreating a Map\nARCL allows you to start and stop creating a map scan, as well as add custom markers to the map while cre-\nating the scan. These markers can be sensor readings or other data.\nYou must enable the ArclScan setting in the ARCL\u00a0server setup section of the\n Configuration > Robot\nInterface\n tab in the MobilePlanner software.\nOnce enabled, the following commands are supported:\nscanAddGoal Command on page 262\nscanAddInfo Command on page 264\nscanAddTag Command on page 267\nscanStart Command on page 269\nscanStop Command on page 271\nFor details on these commands, refer to the ARCL Command Reference on page 70.\nTo start a map scan using scanStart, provide a name string for the 2d scan file that gets created. No argu-\nment is needed for the scanStop command, since only one scan may be active at a time. Also, provide a\nname and optional description (in that order) with the scanAddGoal command, to place a goal in the map.\nFor more details, see scanStart Command on page 269, scanStop Command on page 271 and scanAddGoal\nCommand on page 262.\nThe scanAddInfo and scanAddTag commands identify custom objects and then locate markers for them in\nthe map. To use these:\nl\n Define the custom objects with the scanAddInfo command. For details, see scanAddInfo Command\non page 264.\nl\n Add markers while scanning at positions throughout the map with the scanAddTag command. For\ndetails, see scanAddTag Command on page 267.\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nCreating a Map\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 63",
    "Page 64": "Tracking Sectors\nSectors are designated areas in the map which can trigger certain Motivity tasks, simple messaging or\nalternative mobile behaviors. For example, a speed sector-enabled robot (set in SetNetGo with the\nenableSpeedSectors startup parameter) can adopt the defined speed limit for a SlowSector whenever it is\nlocated within the bounds of any of that speed sector\u2019s type in the map. You can also add your own sectors\nto the map, with a custom definition, either added manually or using the scanAddInfo command. Then use\nMobilePlanner to define regions in the map for your sectors.\nEnable ARAM tracking for each of the sectors through SetNetGo. Once enabled, ARCL supports several com-\nmands that report which sectors your Motivity platform is in based on points, goals and paths:\ntrackSectors Command on page 279\ntrackSectorsAtGoal Command on page 282\ntrackSectorsAtPoint Command on page 285\ntrackSectorsPath Command on page 288\nThe response to all commands is a list of the pertinent sectors:\nTrackSectors: <SectorType> <Sector name, if designated in the map>\n...\nEnd of TrackSectors\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nTracking Sectors\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 64\n\nTracking Sectors\nSectors are designated areas in the map which can trigger certain Motivity tasks, simple messaging or\nalternative mobile behaviors. For example, a speed sector-enabled robot (set in SetNetGo with the\nenableSpeedSectors startup parameter) can adopt the defined speed limit for a SlowSector whenever it is\nlocated within the bounds of any of that speed sector\u2019s type in the map. You can also add your own sectors\nto the map, with a custom definition, either added manually or using the scanAddInfo command. Then use\nMobilePlanner to define regions in the map for your sectors.\nEnable ARAM tracking for each of the sectors through SetNetGo. Once enabled, ARCL supports several com-\nmands that report which sectors your Motivity platform is in based on points, goals and paths:\ntrackSectors Command on page 279\ntrackSectorsAtGoal Command on page 282\ntrackSectorsAtPoint Command on page 285\ntrackSectorsPath Command on page 288\nThe response to all commands is a list of the pertinent sectors:\nTrackSectors: <SectorType> <Sector name, if designated in the map>\n...\nEnd of TrackSectors\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nTracking Sectors\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 64",
    "Page 65": "Navigating and Localizing\nThe following ARCL commands are available for navigating and localizing the robot.\ndistanceBetween Command on page 100\ndistanceFromHere Command on page 102\nfollow Command on page 116\netaRequest Command on page 111\nlocalizeToPoint Command on page 151\ngetGoals Command on page 124\ngoto Command on page 135\ngotoPoint Command on page 137\ngotoRouteGoal Command on page 139\npatrol Command on page 177\npatrolOnce Command on page 179\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nNavigating and Localizing\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 65\n\nNavigating and Localizing\nThe following ARCL commands are available for navigating and localizing the robot.\ndistanceBetween Command on page 100\ndistanceFromHere Command on page 102\nfollow Command on page 116\netaRequest Command on page 111\nlocalizeToPoint Command on page 151\ngetGoals Command on page 124\ngoto Command on page 135\ngotoPoint Command on page 137\ngotoRouteGoal Command on page 139\npatrol Command on page 177\npatrolOnce Command on page 179\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nNavigating and Localizing\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 65",
    "Page 66": "Using Range Devices and Custom Sensors\nARAM uses range-device readings, both real and virtual, to plan a global path and to detect obstacles along\nthe way so that it can recalculate a local path plan if needed. Range devices include laser- range finders,\nSONAR, forbidden lines and areas, single-robot sectors, and many others. The following commands are sup-\nported in ARCL for using range devices and custom sensors:\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nYou can use the ARCL command rangeDeviceList, to retrieve a list from the mobile robot. Like single-robot\nsectors and forbidden spaces, some ranging sensors are location dependent in that their position in the\nmap is fixed. Other ranging data, like from SONAR, are transient and independent of where the Motivity\nplatform is on the map.\nThe rangeDeviceGetCurrent command retrieves a series of absolute X and Y map coordinates in mil-\nlimeters related to the range device\u2019s active reflections off an obstacle or relative to the position of the plat-\nform (\u00a0in relation to the virtual sensor). The rangeDeviceGetCumulative command responds with the\nabsolute X and Y map coordinates of persistent readings that ARAM tracks for avoidance while planning a\nlocal path.\nYou can influence local path planning and obstacle avoidance with custom sensors through ARCL. You do\nthis by enabling custom startup arguments in SetNetGo, refer to for details. Your application software then\ntells ARAM of the custom readings from the device, one at a time. Use customReadingAdd for robot-local\ncoordinates relative to the center of the platform , this is useful for real ranging devices onboard. Use cus-\ntomReadingAbsoluteAdd for map-absolute coordinates, which is useful for location-dependent virtual\nareas. The customReadingClear command removes all of the particular custom device\u2019s ranging data from\nARAM if it hadn\u2019t already expired.\nEnable a custom global planning sensor in order to influence ARAM\u2019s global path planner. For example, you\ncan create a custom door global sensor which, at certain times set by your application, is \u201cclosed\u201d by cus-\ntomReadAdd data. Once set, ARAM will not plan a global path through the closed door and will treat it as an\nobstacle while driving past.\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nUsing Range Devices and Custom Sensors\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 66\n\nUsing Range Devices and Custom Sensors\nARAM uses range-device readings, both real and virtual, to plan a global path and to detect obstacles along\nthe way so that it can recalculate a local path plan if needed. Range devices include laser- range finders,\nSONAR, forbidden lines and areas, single-robot sectors, and many others. The following commands are sup-\nported in ARCL for using range devices and custom sensors:\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nYou can use the ARCL command rangeDeviceList, to retrieve a list from the mobile robot. Like single-robot\nsectors and forbidden spaces, some ranging sensors are location dependent in that their position in the\nmap is fixed. Other ranging data, like from SONAR, are transient and independent of where the Motivity\nplatform is on the map.\nThe rangeDeviceGetCurrent command retrieves a series of absolute X and Y map coordinates in mil-\nlimeters related to the range device\u2019s active reflections off an obstacle or relative to the position of the plat-\nform (\u00a0in relation to the virtual sensor). The rangeDeviceGetCumulative command responds with the\nabsolute X and Y map coordinates of persistent readings that ARAM tracks for avoidance while planning a\nlocal path.\nYou can influence local path planning and obstacle avoidance with custom sensors through ARCL. You do\nthis by enabling custom startup arguments in SetNetGo, refer to for details. Your application software then\ntells ARAM of the custom readings from the device, one at a time. Use customReadingAdd for robot-local\ncoordinates relative to the center of the platform , this is useful for real ranging devices onboard. Use cus-\ntomReadingAbsoluteAdd for map-absolute coordinates, which is useful for location-dependent virtual\nareas. The customReadingClear command removes all of the particular custom device\u2019s ranging data from\nARAM if it hadn\u2019t already expired.\nEnable a custom global planning sensor in order to influence ARAM\u2019s global path planner. For example, you\ncan create a custom door global sensor which, at certain times set by your application, is \u201cclosed\u201d by cus-\ntomReadAdd data. Once set, ARAM will not plan a global path through the closed door and will treat it as an\nobstacle while driving past.\nSee Also...\nUnderstanding the Commands on page 47\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nUsing Range Devices and Custom Sensors\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 66",
    "Page 67": "Tracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nUsing Range Devices and Custom Sensors\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 67\n\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nUsing Range Devices and Custom Sensors\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 67",
    "Page 68": "Monitoring the I/O Ports\nIf your hardware and software supports external connections, you can enable or disable the ports for ARCL\ncontrol in SetNetGo.\nWarning! Do not attempt to connect I/O\u00a0ports if your system did not come with them. If one or more\nI/O ports are incorrectly assigned or inadvertently triggered, the robot or its systems can be physically\ndamaged. Contact Adept technical support for more information.\nYou can control and monitor the I/O ports with the following ARCL input and output commands:\nanalogInputList Command on page 74\nanalogInputQueryRaw Command on page 75\nanalogInputQueryVoltage Command on page 76\ninputList Command on page 142\ninputQuery Command on page 144\noutputList Command on page 171\noutputOff Command on page 173\noutputOn Command on page 174\noutputQuery Command on page 175\nThe following examples show how inputs and outputs can be listed and queried, and how outputs can be\nturned on/off:\ninputList\ndigin1\nEnd of inputList\ninputQuery digin1\nInput: digin1 off\noutputList digout1 digout2\nEnd of outputList\noutputQuery digout1\nOutput: digout1 off\noutputOn digout1\nOutput: digout1 on\noutputOff digout1\nOutput: digout1 off\nSee Also...\nUnderstanding the Commands on page 47\nMonitoring the I/O Ports\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 68\n\nMonitoring the I/O Ports\nIf your hardware and software supports external connections, you can enable or disable the ports for ARCL\ncontrol in SetNetGo.\nWarning!\n Do not attempt to connect I/O\u00a0ports if your system did not come with them. If one or more\nI/O ports are incorrectly assigned or inadvertently triggered, the robot or its systems can be physically\ndamaged. Contact Adept technical support for more information.\nYou can control and monitor the I/O ports with the following ARCL input and output commands:\nanalogInputList Command on page 74\nanalogInputQueryRaw Command on page 75\nanalogInputQueryVoltage Command on page 76\ninputList Command on page 142\ninputQuery Command on page 144\noutputList Command on page 171\noutputOff Command on page 173\noutputOn Command on page 174\noutputQuery Command on page 175\nThe following examples show how inputs and outputs can be listed and queried, and how outputs can be\nturned on/off:\ninputList\ndigin1\nEnd of inputList\ninputQuery digin1\nInput: digin1 off\noutputList digout1 digout2\nEnd of outputList\noutputQuery digout1\nOutput: digout1 off\noutputOn digout1\nOutput: digout1 on\noutputOff digout1\nOutput: digout1 off\nSee Also...\nUnderstanding the Commands on page 47\nMonitoring the I/O Ports\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 68",
    "Page 69": "Using ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nMonitoring the I/O Ports\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 69\n\nUsing ARCL Variables on page 55\nUsing Tasks and Macros on page 56\nUsing Configuration Commands on page 58\nUsing the Queuing Commands on page 60\nWorking With Payloads on page 61\nCreating a Map on page 63\nTracking Sectors on page 64\nNavigating and Localizing on page 65\nUsing Range Devices and Custom Sensors on page 66\nMonitoring the I/O Ports on page 68\nMonitoring the I/O Ports\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 69",
    "Page 70": "ARCL Command Reference\nThis section provides a description of each command in the ARCL command set. The command descrip-\ntions are provided in alphabetical order.\nanalogInputList Command\n74\nanalogInputQueryRaw Command\n75\nanalogInputQueryVoltage Command\n76\napplicationFaultClear Command\n77\napplicationFaultQuery Command\n79\napplicationFaultSet Command\n81\narclSendText Command\n83\nclearAllObstacles Command\n84\nconfigAdd Command\n85\nconfigParse Command\n87\nconfigStart Command\n89\nconnectOutgoing Command\n91\ncreateInfo Command\n92\ncustomReadingAddAbsolute Command\n94\ncustomReadingAdd Command\n96\ncustomReadingsClear Command\n98\ndistanceBetween Command\n100\ndistanceFromHere Command\n102\ndock Command\n104\ndoTask Command\n105\ndoTaskInstant Command\n107\necho Command\n109\nenableMotors Command\n110\netaRequest Command\n111\nexecuteMacro Command\n112\nfaultsGet Command\n114\nfollow Command\n116\ngetConfigSectionInfo Command\n117\ngetConfigSectionList Command\n119\ngetConfigSectionValues Command\n121\ngetDateTime Command\n123\ngetGoals Command\n124\ngetInfo Command\n126\ngetInfoList Command\n128\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 70\n\nARCL Command Reference\nThis section provides a description of each command in the ARCL command set. The command descrip-\ntions are provided in alphabetical order.\nanalogInputList Command\n74\nanalogInputQueryRaw Command\n75\nanalogInputQueryVoltage Command\n76\napplicationFaultClear Command\n77\napplicationFaultQuery Command\n79\napplicationFaultSet Command\n81\narclSendText Command\n83\nclearAllObstacles Command\n84\nconfigAdd Command\n85\nconfigParse Command\n87\nconfigStart Command\n89\nconnectOutgoing Command\n91\ncreateInfo Command\n92\ncustomReadingAddAbsolute Command\n94\ncustomReadingAdd Command\n96\ncustomReadingsClear Command\n98\ndistanceBetween Command\n100\ndistanceFromHere Command\n102\ndock Command\n104\ndoTask Command\n105\ndoTaskInstant Command\n107\necho Command\n109\nenableMotors Command\n110\netaRequest Command\n111\nexecuteMacro Command\n112\nfaultsGet Command\n114\nfollow Command\n116\ngetConfigSectionInfo Command\n117\ngetConfigSectionList Command\n119\ngetConfigSectionValues Command\n121\ngetDateTime Command\n123\ngetGoals Command\n124\ngetInfo Command\n126\ngetInfoList Command\n128\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 70",
    "Page 71": "getMacros Command\n130\ngetPayload\u00a0Command\n132\ngetPrecedence Command\n133\ngetRoutes Command\n134\ngoto Command\n135\ngotoPoint Command\n137\ngotoRouteGoal Command\n139\nhelp Command\n141\ninputList Command\n142\ninputQuery Command\n144\nlistAdd Command\n145\nlistExecute Command\n147\nlistStart Command\n149\nlocalizeToPoint Command\n151\nlog Command\n153\nmapObjectInfo Command\n155\nmapObjectList Command\n157\nmapObjectTypeInfo Command\n159\nmapObjectTypeList Command\n161\nnewConfigParam Command\n163\nnewConfigSectionComment Command\n165\nodometer Command\n167\nodometerReset Command\n168\noneLineStatus Command\n169\noutputList Command\n171\noutputOff Command\n173\noutputOn Command\n174\noutputQuery Command\n175\npatrol Command\n177\npatrolOnce Command\n179\npatrolResume Command\n181\npauseTaskCancel Command\n183\npauseTaskState Command\n185\npayloadQuery Command (shortcut: pq)\n187\npayloadQueryLocal Command (shortcut: pql)\n190\npayloadRemove Command (shortcut: pr)\n192\npayloadSet Command (shortcut: ps)\n194\npayloadSlotCount Command (shortcut: psc)\n196\nAdept ARCL Reference Guide, Updated: 9:26:48 AM\nPage 71\n\ngetMacros Command\n130\ngetPayload\u00a0Command\n132\ngetPrecedence Command\n133\ngetRoutes Command\n134\ngoto Command\n135\ngotoPoint Command\n137\ngotoRouteGoal Command\n139\nhelp Command\n141\ninputList Command\n142\ninputQuery Command\n144\nlistAdd Command\n145\nlistExecute Command\n147\nlistStart Command\n149\nlocalizeToPoint Command\n151\nlog Command\n153\nmapObjectInfo Command\n155\nmapObjectList Command\n157\nmapObjectTypeInfo Command\n159\nmapObjectTypeList Command\n161\nnewConfigParam Command\n163\nnewConfigSectionComment Command\n165\nodometer Command\n167\nodometerReset Command\n168\noneLineStatus Command\n169\noutputList Command\n171\noutputOff Command\n173\noutputOn Command\n174\noutputQuery Command\n175\npatrol Command\n177\npatrolOnce Command\n179\npatrolResume Command\n181\npauseTaskCancel Command\n183\npauseTaskState Command\n185\npayloadQuery Command (shortcut: pq)\n187\npayloadQueryLocal Command (shortcut: pql)\n190\npayloadRemove Command (shortcut: pr)\n192\npayloadSet Command (shortcut: ps)\n194\npayloadSlotCount Command (shortcut: psc)\n196\nAdept ARCL Reference Guide, Updated: 9:26:48 AM\nPage 71",
    "Page 72": "payloadSlotCountLocal Command (shortcut: pscl)\n198\nplay Command\n199\npopupSimple Command\n201\nqueryDockStatus Command\n203\nqueryFaults Command (shortcut: qf)\n204\nqueryMotors Command\n207\nqueueCancel Command (shortcut: qc)\n209\nqueueCancelLocal Command (shortcut:\u00a0qcl)\n212\nqueueDropoff Command (shortcut: qd)\n215\nqueueModify Command (shortcut: qmod)\n218\nqueueModifyLocal Command (shortcut: qmodl)\n224\nqueueMulti Command (shortcut: qm)\n229\nqueuePickup Command (shortcut: qp)\n233\nqueuePickupDropoff Command (shortcut: qpd)\n236\nqueueQuery Command (shortcut: qq)\n241\nqueueQueryLocal Command (shortcut: qql)\n244\nqueueShow Command (shortcut: qs)\n247\nqueueShowCompleted Command (shortcut: qsc)\n249\nqueueShowRobot Command (shortcut:\u00a0qsr)\n251\nqueueShowRobotLocal Command (shortcut: qsrl)\n253\nquit Command\n254\nrangeDeviceGetCumulative Command\n255\nrangeDeviceGetCurrent Command\n257\nrangeDeviceList Command\n259\nsay Command\n261\nscanAddGoal Command\n262\nscanAddInfo Command\n264\nscanAddTag Command\n267\nscanStart Command\n269\nscanStop Command\n271\nsetPayload Command\n272\nsetPrecedence Command\n274\nshutdown Command\n275\nstatus Command\n276\nstop Command\n278\ntrackSectors Command\n279\ntrackSectorsAtGoal Command\n282\ntrackSectorsAtPoint Command\n285\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 72\n\npayloadSlotCountLocal Command (shortcut: pscl)\n198\nplay Command\n199\npopupSimple Command\n201\nqueryDockStatus Command\n203\nqueryFaults Command (shortcut: qf)\n204\nqueryMotors Command\n207\nqueueCancel Command (shortcut: qc)\n209\nqueueCancelLocal Command (shortcut:\u00a0qcl)\n212\nqueueDropoff Command (shortcut: qd)\n215\nqueueModify Command (shortcut: qmod)\n218\nqueueModifyLocal Command (shortcut: qmodl)\n224\nqueueMulti Command (shortcut: qm)\n229\nqueuePickup Command (shortcut: qp)\n233\nqueuePickupDropoff Command (shortcut: qpd)\n236\nqueueQuery Command (shortcut: qq)\n241\nqueueQueryLocal Command (shortcut: qql)\n244\nqueueShow Command (shortcut: qs)\n247\nqueueShowCompleted Command (shortcut: qsc)\n249\nqueueShowRobot Command (shortcut:\u00a0qsr)\n251\nqueueShowRobotLocal Command (shortcut: qsrl)\n253\nquit Command\n254\nrangeDeviceGetCumulative Command\n255\nrangeDeviceGetCurrent Command\n257\nrangeDeviceList Command\n259\nsay Command\n261\nscanAddGoal Command\n262\nscanAddInfo Command\n264\nscanAddTag Command\n267\nscanStart Command\n269\nscanStop Command\n271\nsetPayload Command\n272\nsetPrecedence Command\n274\nshutdown Command\n275\nstatus Command\n276\nstop Command\n278\ntrackSectors Command\n279\ntrackSectorsAtGoal Command\n282\ntrackSectorsAtPoint Command\n285\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 72",
    "Page 73": "trackSectorsPath Command\n288\nundock Command\n291\nupdateInfo Command\n293\nwaitTaskCancel Command\n295\nwaitTaskState Command\n297\nSee Also...\nIntroduction to ARCL on page 25\nEnable Options in\nSet ARCL Parameters in MobilePlanner on page 30\nConnect to ARCL Using a Telnet Client on page 42\nUsing the ARCL Commands on page 46\nARCL Command Reference on page 70\nARCL Server Messages on page 299\nAdept ARCL Reference Guide, Updated: 9:26:48 AM\nPage 73\n\ntrackSectorsPath Command\n288\nundock Command\n291\nupdateInfo Command\n293\nwaitTaskCancel Command\n295\nwaitTaskState Command\n297\nSee Also...\nIntroduction to ARCL on page 25\nEnable Options in\nSet ARCL Parameters in MobilePlanner on page 30\nConnect to ARCL Using a Telnet Client on page 42\nUsing the ARCL Commands on page 46\nARCL Command Reference on page 70\nARCL Server Messages on page 299\nAdept ARCL Reference Guide, Updated: 9:26:48 AM\nPage 73",
    "Page 74": "analogInputList Command\nanalogInputList Command\nLists the named analog inputs.\nSyntax\nanalogInputList\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns a series of \"AnalogInputList\" in the following format:\nAnalogInputList: <minV> <maxV> <maxRaw> <name>\nDetails\nThe analogInputList command returns the list of analog input ports with specs enabled through SetNetGo.\n<minV> and <maxV> are doubles converted to volts, and <maxRaw> is an integer of the maximum\nvalue of the analog to digital conversion (minRaw is always 0); 1023 for a 10-bit A/D converter, for\nexample.\nExamples\nTo view the list of analog input ports, enter the following:\nanalogInputList\nRelated Commands\nanalogInputQueryRaw Command on page 75\nanalogInputQueryVoltage Command on page 76\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 74\n\nanalogInputList Command\nanalogInputList Command\nLists the named analog inputs.\nSyntax\nanalogInputList\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns a series of \"AnalogInputList\" in the following format:\nAnalogInputList: <minV> <maxV> <maxRaw> <name>\nDetails\nThe analogInputList command returns the list of analog input ports with specs enabled through SetNetGo.\n<minV> and <maxV> are doubles converted to volts, and <maxRaw> is an integer of the maximum\nvalue of the analog to digital conversion (minRaw is always 0); 1023 for a 10-bit A/D converter, for\nexample.\nExamples\nTo view the list of analog input ports, enter the following:\nanalogInputList\nRelated Commands\nanalogInputQueryRaw Command on page 75\nanalogInputQueryVoltage Command on page 76\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 74",
    "Page 75": "analogInputQueryRaw Command\nanalogInputQueryRaw Command\nQueries the state of an analog input by raw.\nSyntax\nanalogInputQueryRaw <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the device to query.\nResponses\nThe command returns the state of the specified analog port in the following format:\nAnalogInputRaw: <name> <rawValue>\nDetails\nThe analogInputQueryRaw command queries the state of the specified analog input. The data returned by\nanalogInputQueryRaw is an integer called <rawValue>.\nTo convert the <rawValue> to voltage, use the following equation:\n<minVoltage> + (<maxVoltage> - <minVoltage>) * <rawValue> / <maxRaw>\nRelated Commands\nanalogInputList Command on page 74\nanalogInputQueryVoltage Command on page 76\nAdept ARCL Reference Guide, Updated: 9:26:48 AM\nPage 75\n\nanalogInputQueryRaw Command\nanalogInputQueryRaw Command\nQueries the state of an analog input by raw.\nSyntax\nanalogInputQueryRaw\n <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the device to query.\nResponses\nThe command returns the state of the specified analog port in the following format:\nAnalogInputRaw: <name> <rawValue>\nDetails\nThe analogInputQueryRaw command queries the state of the specified analog input. The data returned by\nanalogInputQueryRaw is an integer called <rawValue>.\nTo convert the <rawValue> to voltage, use the following equation:\n<minVoltage> + (<maxVoltage> - <minVoltage>) * <rawValue> / <maxRaw>\nRelated Commands\nanalogInputList Command on page 74\nanalogInputQueryVoltage Command on page 76\nAdept ARCL Reference Guide, Updated: 9:26:48 AM\nPage 75",
    "Page 76": "analogInputQueryVoltage Command\nanalogInputQueryVoltage Command\nQueries the state of an analog input by voltage.\nSyntax\nanalogInputQueryVoltage <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the device to query.\nResponses\nThe command returns the state of the specified analog port in the following format:\nAnalogInputVoltage: <name> <V>\nwhere <V> is a double converted to volts.\nDetails\nThe analogInputQueryRaw command queries the state of the specified analog input by voltage. The data\nreturned by analogInputQueryVoltage is a voltage as a double between <minVoltage> and\n<maxVoltage>.\nRelated Commands\nanalogInputList Command on page 74\nanalogInputQueryRaw Command on page 75\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 76\n\nanalogInputQueryVoltage Command\nanalogInputQueryVoltage Command\nQueries the state of an analog input by voltage.\nSyntax\nanalogInputQueryVoltage\n <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the device to query.\nResponses\nThe command returns the state of the specified analog port in the following format:\nAnalogInputVoltage: <name> <V>\nwhere <V> is a double converted to volts.\nDetails\nThe analogInputQueryRaw command queries the state of the specified analog input by voltage. The data\nreturned by analogInputQueryVoltage is a voltage as a double between <minVoltage> and\n<maxVoltage>.\nRelated Commands\nanalogInputList Command on page 74\nanalogInputQueryRaw Command on page 75\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 76",
    "Page 77": "applicationFaultClear Command\napplicationFaultClear Command\nClears a named application fault.\nSyntax\napplicationFaultClear <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the fault.\nResponses\nThe command returns:\nFaultCleared: Fault_<drivingFault or criticalFault> <name> \"<short_desc>\" \"<long_desc>\"\nbool_driving bool_critical bool_applicaiton\u00a0\u00a0\u00a0\n...\nApplicationFaultClear cleared <name>\nDetails\nThe faultsGet command returns the list of faults that are currently triggered. For Enterprise Manager, if a\nrobot is unavailable because of a fault, the returned message will start with Fault_ and end with _<name>\nwith the relevant flags in the middle, and each flag will be separated by the underscore character (_).\nExamples\nThe following example clears the application fault named \"faulTest2\":\napplicationfaultclear faulTest2\nThe command returns:\nFaultCleared: Fault_Driving_Critical_Application faulTest2 \"Fault test 2\" \"This is a test\nof the driving application fault\" true true true\nStopping\nApplicationFaultClear cleared faulTest2\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 77\n\napplicationFaultClear Command\napplicationFaultClear Command\nClears a named application fault.\nSyntax\napplicationFaultClear\n <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the fault.\nResponses\nThe command returns:\nFaultCleared: Fault_<drivingFault or criticalFault> <name> \"<short_desc>\" \"<long_desc>\"\nbool_driving bool_critical bool_applicaiton\u00a0\u00a0\u00a0\n...\nApplicationFaultClear cleared <name>\nDetails\nThe faultsGet command returns the list of faults that are currently triggered. For Enterprise Manager, if a\nrobot is unavailable because of a fault, the returned message will start with Fault_ and end with _<name>\nwith the relevant flags in the middle, and each flag will be separated by the underscore character (_).\nExamples\nThe following example clears the application fault named \"faulTest2\":\napplicationfaultclear faulTest2\nThe command returns:\nFaultCleared: Fault_Driving_Critical_Application faulTest2 \"Fault test 2\" \"This is a test\nof the driving application fault\" true true true\nStopping\nApplicationFaultClear cleared faulTest2\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 77",
    "Page 78": "applicationFaultClear Command\nRelated Commands\napplicationFaultQuery Command on page 79\napplicationFaultSet Command on page 81\nfaultsGet Command on page 114\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 78\n\napplicationFaultClear Command\nRelated Commands\napplicationFaultQuery Command on page 79\napplicationFaultSet Command on page 81\nfaultsGet Command on page 114\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 78",
    "Page 79": "applicationFaultQuery Command\napplicationFaultQuery Command\nGets the list of any application faults currently triggered.\nSyntax\napplicationFaultQuery\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nApplicationFaultQuery: Fault_<drivingFault or criticalFault> <name> \"<short_desc>\"\n\"<long_desc>\" bool_driving bool_critical bool_applicaiton\u00a0\u00a0\u00a0\n...\nEnd of ApplicationFaultQuery\nDetails\nThe applicationFaultQuery command returns the list of application faults that are currently triggered. For\nEnterprise Manager, if a robot is unavailable because of a fault, the returned message will start with Fault_\nand end with _<name> with the relevant flags in the middle, and each flag will be separated by the under-\nscore character (_).\nThis command is related to the faultsGet command. For details, see faultsGet Command on page 114\nExamples\nThe following example shows a listing of the application faults:\napplicationfaultquery\nThe command returns:\nApplicationFaultQuery: Fault_Driving_Critical_Application faulTest2 \"Fault test 2\" \"This\nis a test of the driving application fault\" true true true\nEnd of ApplicationFaultQuery\nRelated Commands\napplicationFaultClear Command on page 77\napplicationFaultSet Command on page 81\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 79\n\napplicationFaultQuery Command\napplicationFaultQuery Command\nGets the list of any application faults currently triggered.\nSyntax\napplicationFaultQuery\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nApplicationFaultQuery: Fault_<drivingFault or criticalFault> <name> \"<short_desc>\"\n\"<long_desc>\" bool_driving bool_critical bool_applicaiton\u00a0\u00a0\u00a0\n...\nEnd of ApplicationFaultQuery\nDetails\nThe applicationFaultQuery command returns the list of application faults that are currently triggered. For\nEnterprise Manager, if a robot is unavailable because of a fault, the returned message will start with Fault_\nand end with _<name> with the relevant flags in the middle, and each flag will be separated by the under-\nscore character (_).\nThis command is related to the faultsGet command. For details, see faultsGet Command on page 114\nExamples\nThe following example shows a listing of the application faults:\napplicationfaultquery\nThe command returns:\nApplicationFaultQuery: Fault_Driving_Critical_Application faulTest2 \"Fault test 2\" \"This\nis a test of the driving application fault\" true true true\nEnd of ApplicationFaultQuery\nRelated Commands\napplicationFaultClear Command on page 77\napplicationFaultSet Command on page 81\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 79",
    "Page 80": "applicationFaultQuery Command\nfaultsGet Command on page 114\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 80\n\napplicationFaultQuery Command\nfaultsGet Command on page 114\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 80",
    "Page 81": "applicationFaultSet Command\napplicationFaultSet Command\nSets an application fault.\nSyntax\napplicationFaultSet <name> \"<short_description>\" \"<long_description>\" <bool_driving> <bool_crit-\nical>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the fault.\nshort_description\nEnter a string that will be a brief description of the fault. If the string\ncontains spaces, it must be enclosed in double quotes.\nlong_description\nEnter a string that will be a detailed description of the fault. If the\nstring contains spaces, it must be enclosed in double quotes.\nbool_driving\nEnter 1 if this is a driving fault; otherwise, enter 0.\nbool_critical\nEnter 1 if this is a critical fault; otherwise, enter 0.\nResponses\nThe command returns:\nApplicationFaultSet set <name>\nFault: Fault_<drivingFault or criticalFault> <name> \"<short_desc>\" \"<long_desc>\" bool_\ndriving bool_critical bool_applicaiton\u00a0\u00a0\u00a0\nDetails\nThe applicationFaultSet command sets an application fault. All parameters are required. For Enterprise Man-\nager, if a robot is unavailable because of a fault, the returned message will start with Fault_ and end with _\n<name> with the relevant flags in the middle, and each flag will be separated by the underscore character\n(_).\nExamples\nThe following example sets a fault named \"faulTest\":\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 81\n\napplicationFaultSet Command\napplicationFaultSet Command\nSets an application fault.\nSyntax\napplicationFaultSet\n <name> \"<short_description>\" \"<long_description>\" <bool_driving> <bool_crit-\nical>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the fault.\nshort_description\nEnter a string that will be a brief description of the fault. If the string\ncontains spaces, it must be enclosed in double quotes.\nlong_description\nEnter a string that will be a detailed description of the fault. If the\nstring contains spaces, it must be enclosed in double quotes.\nbool_driving\nEnter 1 if this is a driving fault; otherwise, enter 0.\nbool_critical\nEnter 1 if this is a critical fault; otherwise, enter 0.\nResponses\nThe command returns:\nApplicationFaultSet set <name>\nFault: Fault_<drivingFault or criticalFault> <name> \"<short_desc>\" \"<long_desc>\" bool_\ndriving bool_critical bool_applicaiton\u00a0\u00a0\u00a0\nDetails\nThe applicationFaultSet command sets an application fault. All parameters are required. For Enterprise Man-\nager, if a robot is unavailable because of a fault, the returned message will start with Fault_ and end with _\n<name> with the relevant flags in the middle, and each flag will be separated by the underscore character\n(_).\nExamples\nThe following example sets a fault named \"faulTest\":\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 81",
    "Page 82": "applicationFaultSet Command\nApplicationFaultSet faulTest \"Fault test\" \"This is a test of the driving application\nfault\" 1 1\nThe command returns:\nApplicationFaultSet set faulTest\nFault: Fault_Driving_Critical_Application faulTest \"Fault test\" \"This is a test of the\ndriving application fault\" true true true\nRelated Commands\napplicationFaultClear Command on page 77\napplicationFaultQuery Command on page 79\nfaultsGet Command on page 114\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 82\n\napplicationFaultSet Command\nApplicationFaultSet faulTest \"Fault test\" \"This is a test of the driving application\nfault\" 1 1\nThe command returns:\nApplicationFaultSet set faulTest\nFault: Fault_Driving_Critical_Application faulTest \"Fault test\" \"This is a test of the\ndriving application fault\" true true true\nRelated Commands\napplicationFaultClear Command on page 77\napplicationFaultQuery Command on page 79\nfaultsGet Command on page 114\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 82",
    "Page 83": "arclSendText Command\narclSendText Command\nSends the given message to all ARCL clients.\nSyntax\narclSendText <string>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nTo use this command, you must first enable the -enableTaskArclSendText option in SetNetGo, see Setup\nOptions in for details.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nstring\nEnter a text string that represents the message you want to send to\nthe ARCL clients. Quotes around the string are optional.\nResponses\nThe command returns the following:\n<string>\nDetails\nThe arclSendText command sends a message to all ARCL clients. This is an instant task; you can use this\ncommand to associate the ArclSendText task with goals and routes.\nThis is typically used to notify or activate other offboard automation processes in conjunction with the\nrobot's activities. ARAM sends the task's string argument to all ARCL connections.\nExample\narclsendtext \"Entering room, please stand clear.\"\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 83\n\narclSendText Command\narclSendText Command\nSends the given message to all ARCL clients.\nSyntax\narclSendText\n <string>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nTo use this command, you must first enable the -enableTaskArclSendText option in SetNetGo, see Setup\nOptions in for details.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nstring\nEnter a text string that represents the message you want to send to\nthe ARCL clients. Quotes around the string are optional.\nResponses\nThe command returns the following:\n<string>\nDetails\nThe arclSendText command sends a message to all ARCL clients. This is an instant task; you can use this\ncommand to associate the ArclSendText task with goals and routes.\nThis is typically used to notify or activate other offboard automation processes in conjunction with the\nrobot's activities. ARAM sends the task's string argument to all ARCL connections.\nExample\narclsendtext \"Entering room, please stand clear.\"\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 83",
    "Page 84": "clearAllObstacles Command\nclearAllObstacles Command\nClears all obstacle readings.\nCAUTION: DO\u00a0NOT\u00a0execute this command while the robot is moving. Otherwise,\ndamage to the robot or other equipment may result.\nSyntax\nclearAllObstacles\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command, when successful, returns the following response:\nCleared all obstacles\nDetails\nThe clearAllObstacles command clears (removes) all obstacle readings from the robot. Therefore, it must\nnot be used while the robot is moving, or the robot could crash and cause damage to itself, its payload or\nother equipment.\nExamples\nTo clear the robot's obstacle readings, enter:\nclearAllObstacles\nThe command returns:\nCleared all obstacles\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 84\n\nclearAllObstacles Command\nclearAllObstacles Command\nClears all obstacle readings.\nCAUTION:\n DO\u00a0NOT\u00a0execute this command while the robot is moving. Otherwise,\ndamage to the robot or other equipment may result.\nSyntax\nclearAllObstacles\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command, when successful, returns the following response:\nCleared all obstacles\nDetails\nThe clearAllObstacles command clears (removes) all obstacle readings from the robot. Therefore, it\n must\nnot\n be used while the robot is moving, or the robot could crash and cause damage to itself, its payload or\nother equipment.\nExamples\nTo clear the robot's obstacle readings, enter:\nclearAllObstacles\nThe command returns:\nCleared all obstacles\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 84",
    "Page 85": "configAdd Command\nconfigAdd Command\nUse the configAdd command to enter sections and related configuration parameter keywords and values to\nthe configuration list.\nSyntax\nconfigadd <section>\nconfigadd <configuration> <value>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the Configuration > Robot Interface tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nsection\nEnter a text string to represent a name for the new section you\nwant to add to the configuration list.\nconfiguration\nEnter a text string to represent a name for the new parameter you\nwant to add to the configuration list.\nvalue\nEnter a value for the new parameter.\nResponses\nThe command returns information about the added configuration in the following format:\nAdded\n<configuration> <value>\nDetails\nWhen creating the configuration list, you must first identify which section the configuration parameter is\nassociated, and then provide the parameter\u2019s keyword and new value. Configuration keywords are case-\nsensitive.\nExamples\nconfigAdd Section Files\nAdded 'Section Files' to the config\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 85\n\nconfigAdd Command\nconfigAdd Command\nUse the configAdd command to enter sections and related configuration parameter keywords and values to\nthe configuration list.\nSyntax\nconfigadd\n <section>\nconfigadd\n <configuration> <value>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the\n Configuration > Robot Interface\n tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nsection\nEnter a text string to represent a name for the new section you\nwant to add to the configuration list.\nconfiguration\nEnter a text string to represent a name for the new parameter you\nwant to add to the configuration list.\nvalue\nEnter a value for the new parameter.\nResponses\nThe command returns information about the added configuration in the following format:\nAdded\n<configuration> <value>\nDetails\nWhen creating the configuration list, you must first identify which section the configuration parameter is\nassociated, and then provide the parameter\u2019s keyword and new value. Configuration keywords are case-\nsensitive.\nExamples\nconfigAdd Section Files\nAdded 'Section Files' to the config\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 85",
    "Page 86": "configAdd Command\nconfigAdd Map theNewMap.map\nAdded 'Map theNewMap.map' to the config\nRelated Commands\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 86\n\nconfigAdd Command\nconfigAdd Map theNewMap.map\nAdded 'Map theNewMap.map' to the config\nRelated Commands\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 86",
    "Page 87": "configParse Command\nconfigParse Command\nSends the configuration parameters to ARAM, which implements the configuration changes.\nSyntax\nconfigParse\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the Configuration > Robot Interface tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns information about the added configuration in the following format:\nWill parse config\nConfig parsed fine\n\u00a0\u00a0\u00a0\u00a0\u00a0-OR-\nConfig had errors parsing: <errors>\nDetails\nThe configParse command sends the configuration parameters to ARAM, which implements the con-\nfiguration changes.\nNotice, in the following example, that the \u201cMap changed\u201d response was not generated by ARCL. Rather, it is\nan ARAM event-warning, which is sent automatically to all attached clients. See Server Messages for\ndetails. ARAM catches and reports errors both for configuration and system issues, for example if it is\nunable to find a file or correctly load a map file.\nExamples\nconfigParse\nWill parse config \"Map changed\"\nConfig parsed fine\nRelated Commands\nconfigAdd Command on page 85\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 87\n\nconfigParse Command\nconfigParse Command\nSends the configuration parameters to ARAM, which implements the configuration changes.\nSyntax\nconfigParse\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the\n Configuration > Robot Interface\n tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns information about the added configuration in the following format:\nWill parse config\nConfig parsed fine\n\u00a0\u00a0\u00a0\u00a0\u00a0-OR-\nConfig had errors parsing: <errors>\nDetails\nThe configParse command sends the configuration parameters to ARAM, which implements the con-\nfiguration changes.\nNotice, in the following example, that the \u201cMap changed\u201d response was not generated by ARCL. Rather, it is\nan ARAM event-warning, which is sent automatically to all attached clients. See Server Messages for\ndetails. ARAM catches and reports errors both for configuration and system issues, for example if it is\nunable to find a file or correctly load a map file.\nExamples\nconfigParse\nWill parse config \"Map changed\"\nConfig parsed fine\nRelated Commands\nconfigAdd Command on page 85\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 87",
    "Page 88": "configParse Command\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 88\n\nconfigParse Command\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 88",
    "Page 89": "configStart Command\nconfigStart Command\nInitialize a configuration list, similar to creating a task list. The configStart command overwrites any pre-\nvious list.\nSyntax\nconfigstart\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the Configuration > Robot Interface tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns the following information:\nNew config starting\nDetails\nUse the configStart command to initialize a configuration list, similar to creating a task list. The configStart\ncommand overwrites any previous list.\nWhen creating the configuration list, you must first identify which section the configuration parameter is\nassociated, and then provide the parameter\u2019s keyword and new value. Configuration keywords are case-\nsensitive.\nExamples\nTo start a new configuration, enter the following:\nconfigStart\nThe command returns:\nNew config starting\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 89\n\nconfigStart Command\nconfigStart Command\nInitialize a configuration list, similar to creating a task list. The configStart command overwrites any pre-\nvious list.\nSyntax\nconfigstart\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the\n Configuration > Robot Interface\n tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns the following information:\nNew config starting\nDetails\nUse the configStart command to initialize a configuration list, similar to creating a task list. The configStart\ncommand overwrites any previous list.\nWhen creating the configuration list, you must first identify which section the configuration parameter is\nassociated, and then provide the parameter\u2019s keyword and new value. Configuration keywords are case-\nsensitive.\nExamples\nTo start a new configuration, enter the following:\nconfigStart\nThe command returns:\nNew config starting\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 89",
    "Page 90": "configStart Command\nRelated Commands\nconfigAdd Command on page 85\nconfigParse Command on page 87\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 90\n\nconfigStart Command\nRelated Commands\nconfigAdd Command on page 85\nconfigParse Command on page 87\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 90",
    "Page 91": "connectOutgoing Command\nconnectOutgoing Command\nConnects (or reconnects) a socket to the specified outside server.\nSyntax\nconnectOutgoing <hostname> <port>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nhostname\nEnter the name of the host (outside server) that you wish to con-\nnect to. This can also be entered as the IP\u00a0address of the host.\nport\nEnter the port number that will be used for the connection.\nResponses\nThe command returns information about the outgoing connection in the following format:\nOutgoing connected to <hostname> <port>\nDetails\nThis command (re)connects a socket to the specified outside server. It is primarily used for debugging pur-\nposes.\nExamples\nTo connect to IP\u00a0192.168.0.12 with port 5353, enter:\nconnectOutgoing 192.168.0.12 5353\nTo connect to host named \"ourhost\" with port 5353, enter:\nconnectOutgoing ourhost 5353\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 91\n\nconnectOutgoing Command\nconnectOutgoing Command\nConnects (or reconnects) a socket to the specified outside server.\nSyntax\nconnectOutgoing\n <hostname> <port>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nhostname\nEnter the name of the host (outside server) that you wish to con-\nnect to. This can also be entered as the IP\u00a0address of the host.\nport\nEnter the port number that will be used for the connection.\nResponses\nThe command returns information about the outgoing connection in the following format:\nOutgoing connected to <hostname> <port>\nDetails\nThis command (re)connects a socket to the specified outside server. It is primarily used for debugging pur-\nposes.\nExamples\nTo connect to IP\u00a0192.168.0.12 with port 5353, enter:\nconnectOutgoing 192.168.0.12 5353\nTo connect to host named \"ourhost\" with port 5353, enter:\nconnectOutgoing ourhost 5353\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 91",
    "Page 92": "createInfo Command\ncreateInfo Command\nCreates a piece of information.\nSyntax\ncreateInfo <infoName> <maxLen> <infoValue>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ninfoName\nEnter a string that will represent the name for the information.\nmaxLen\nEnter the maximum character length that can be used for the\ninformation.\ninfoValue\nEnter a string that represents the information value.\nNOTE:\u00a0If the number of characters in the string exceeds the\n<maxLen> value, the string will be truncated to that number of\ncharacters.\nResponses\nThe command returns information about the new piece of information in the following format:\nCreated info for <infoName>\nDetails\nThis command is used to create a piece of information that resides on the connected device. Once the\ninformation is created, it can be viewed using the getInfo command, or updated using the updateInfo com-\nmand. For details, see getInfo Command on page 126 and updateInfo Command on page 293.\nAll information on the connected device can be listed with the getInfoList command. For details, see getIn-\nfoList Command on page 128.\nExamples\nTo create a new piece of information called \"myString\" with a maximum length of 10 characters and an ini-\ntial value of \"testing\", enter the following:\ncreateinfo myString 10 testing\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 92\n\ncreateInfo Command\ncreateInfo Command\nCreates a piece of information.\nSyntax\ncreateInfo\n <infoName> <maxLen> <infoValue>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ninfoName\nEnter a string that will represent the name for the information.\nmaxLen\nEnter the maximum character length that can be used for the\ninformation.\ninfoValue\nEnter a string that represents the information value.\nNOTE:\n\u00a0If the number of characters in the string exceeds the\n<maxLen> value, the string will be truncated to that number of\ncharacters.\nResponses\nThe command returns information about the new piece of information in the following format:\nCreated info for <infoName>\nDetails\nThis command is used to create a piece of information that resides on the connected device. Once the\ninformation is created, it can be viewed using the getInfo command, or updated using the updateInfo com-\nmand. For details, see getInfo Command on page 126 and updateInfo Command on page 293.\nAll information on the connected device can be listed with the getInfoList command. For details, see getIn-\nfoList Command on page 128.\nExamples\nTo create a new piece of information called \"myString\" with a maximum length of 10 characters and an ini-\ntial value of \"testing\", enter the following:\ncreateinfo myString 10 testing\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 92",
    "Page 93": "createInfo Command\nThe command returns:\nCreated info for myString\nRelated Commands\ngetInfo Command on page 126\ngetInfoList Command on page 128\nupdateInfo Command on page 293\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 93\n\ncreateInfo Command\nThe command returns:\nCreated info for myString\nRelated Commands\ngetInfo Command on page 126\ngetInfoList Command on page 128\nupdateInfo Command on page 293\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 93",
    "Page 94": "customReadingAddAbsolute Command\ncustomReadingAddAbsolute Command\nAdds a sensor reading in absolute (map) coordinates.\nSyntax\ncustomReadingAddAbsolute<name> <X> <Y>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThere is no space between the command and the sensor name. See the examples section.\nThis parameter is case-sensitive.\nThis adds the device in absolute (map) coordinates. To add the device relative to the robot, use the cus-\ntomReadingAdd command. For details, see customReadingAdd Command on page 96.\nARAM Settings\nThis command requires the addition of the \"-customSensor <name>\" argument to the Custom Argu-\nments section of the Configuration > Debug tab in the MobilePlanner software. For details, see the\nAdept Motivity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the device. This para-\nmeter is case-sensitive.\nX\nEnter the X map coordinate (in mm).\nY\nEnter the Y map coordinate (in mm).\nResponses\nThe command returns:\nAdded absolute reading <X> <Y>\nDetails\nThe customReadingAddAbsolute command adds a sensor reading that is at <X> <Y> millimeters in abso-\nlute (map) coordinates. For example, an entry of 200 100 would be a point that is 200 mm in front of the\nrobot and 100 mm to the left of the robot.\nThis parameter is case-sensitive.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 94\n\ncustomReadingAddAbsolute Command\ncustomReadingAddAbsolute Command\nAdds a sensor reading in absolute (map) coordinates.\nSyntax\ncustomReadingAddAbsolute\n<name> <X> <Y>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThere is no space between the command and the sensor name. See the examples section.\nThis parameter is case-sensitive.\nThis adds the device in absolute (map) coordinates. To add the device relative to the robot, use the cus-\ntomReadingAdd command. For details, see customReadingAdd Command on page 96.\nARAM Settings\nThis command requires the addition of the \"-customSensor <name>\" argument to the Custom Argu-\nments section of the\n Configuration > Debug\n tab in the MobilePlanner software. For details, see the\nAdept Motivity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the device. This para-\nmeter is case-sensitive.\nX\nEnter the X map coordinate (in mm).\nY\nEnter the Y map coordinate (in mm).\nResponses\nThe command returns:\nAdded absolute reading <X> <Y>\nDetails\nThe customReadingAddAbsolute command adds a sensor reading that is at <X> <Y> millimeters in abso-\nlute (map) coordinates. For example, an entry of 200 100 would be a point that is 200 mm in front of the\nrobot and 100 mm to the left of the robot.\nThis parameter is case-sensitive.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 94",
    "Page 95": "customReadingAddAbsolute Command\nNote that this command adds the device in absolute (map) coordinates. To add the sensor reading in robot-\nrelative coordinates, use the customReadingAdd command. For details, see customReadingAdd Command\non page 96.\nExamples\nNOTE:\u00a0The following example assumes a custom sensor named \"ARCL_CustomSensor\" was previously\nadded to the system. For details, see the ARAM\u00a0Settings section.\nTo add a sensor reading at absolute (map) coordinates X: -2532 Y: 5471, enter the following:\ncustomReadingAddAbsoluteARCL_CustomSensor -2532 5471\nThe command returns:\nAdded absolute reading -2532 5471\nRelated Commands\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 95\n\ncustomReadingAddAbsolute Command\nNote that this command adds the device in absolute (map) coordinates. To add the sensor reading in robot-\nrelative coordinates, use the customReadingAdd command. For details, see customReadingAdd Command\non page 96.\nExamples\nNOTE:\n\u00a0The following example assumes a custom sensor named \"ARCL_CustomSensor\" was previously\nadded to the system. For details, see the ARAM\u00a0Settings section.\nTo add a sensor reading at absolute (map) coordinates X: -2532 Y: 5471, enter the following:\ncustomReadingAddAbsoluteARCL_CustomSensor -2532 5471\nThe command returns:\nAdded absolute reading -2532 5471\nRelated Commands\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nAdept ARCL Reference Guide, Updated: 9:26:49 AM\nPage 95",
    "Page 96": "customReadingAdd Command\ncustomReadingAdd Command\nAdds a sensor reading in robot-relative coordinates.\nSyntax\ncustomReadingAdd<name> <X> <Y>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThere is no space between the command and the sensor name. See the examples section.\nThis parameter is case-sensitive.\nThis adds the sensor reading in relative (to the robot base) coordinates. To add the device in absolute\n(map) coordinates, use the customReadingAddAbsolute command. For details, see cus-\ntomReadingAddAbsolute Command on page 94.\nARAM Settings\nThis command requires the addition of the \"-customSensor <name>\" argument to the Custom Argu-\nments section of the Configuration > Debug tab in the MobilePlanner software. For details, see the\nAdept Motivity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the device. This para-\nmeter is case-sensitive.\nX\nEnter the X coordinate (in mm) relative to the robot base.\nY\nEnter the Y coordinate (in mm) relative to the robot base.\nResponses\nThe command returns:\nAdded reading <X> <Y>\nDetails\nThe customReadingAdd command adds a sensor reading that is at <X> <Y> millimeters in robot-relative\ncoordinates (where +X is in front of the robot, +Y is to the left of the robot). For example, an entry of 200\n100 would be a point that is 200 mm in front of the robot and 100 mm to the left of the robot.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 96\n\ncustomReadingAdd Command\ncustomReadingAdd Command\nAdds a sensor reading in robot-relative coordinates.\nSyntax\ncustomReadingAdd\n<name> <X> <Y>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThere is no space between the command and the sensor name. See the examples section.\nThis parameter is case-sensitive.\nThis adds the sensor reading in relative (to the robot base) coordinates. To add the device in absolute\n(map) coordinates, use the customReadingAddAbsolute command. For details, see cus-\ntomReadingAddAbsolute Command on page 94.\nARAM Settings\nThis command requires the addition of the \"-customSensor <name>\" argument to the Custom Argu-\nments section of the\n Configuration > Debug\n tab in the MobilePlanner software. For details, see the\nAdept Motivity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the device. This para-\nmeter is case-sensitive.\nX\nEnter the X coordinate (in mm) relative to the robot base.\nY\nEnter the Y coordinate (in mm) relative to the robot base.\nResponses\nThe command returns:\nAdded reading <X> <Y>\nDetails\nThe customReadingAdd command adds a sensor reading that is at <X> <Y> millimeters in robot-relative\ncoordinates (where +X is in front of the robot, +Y is to the left of the robot). For example, an entry of 200\n100 would be a point that is 200 mm in front of the robot and 100 mm to the left of the robot.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 96",
    "Page 97": "customReadingAdd Command\nThis parameter is case-sensitive.\nNote that this command adds the device in robot-relative (to the robot base) coordinates. To add the sensor\nreading in absolute (map) coordinates, use the customReadingAddAbsolute command. For details, see cus-\ntomReadingAddAbsolute Command on page 94.\nExamples\nNOTE:\u00a0The following example assumes a custom sensor named \"ARCL_CustomSensor\" was previously\nadded to the system. For details, see the ARAM\u00a0Settings section.\nTo add a sensor reading at robot-relative coordinates X: 100 Y: 0, enter the following:\ncustomReadingAddARCL_CustomSensor 100 0\nThe command returns:\nAdded reading 100 0\nRelated Commands\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 97\n\ncustomReadingAdd Command\nThis parameter is case-sensitive.\nNote that this command adds the device in robot-relative (to the robot base) coordinates. To add the sensor\nreading in absolute (map) coordinates, use the customReadingAddAbsolute command. For details, see cus-\ntomReadingAddAbsolute Command on page 94.\nExamples\nNOTE:\n\u00a0The following example assumes a custom sensor named \"ARCL_CustomSensor\" was previously\nadded to the system. For details, see the ARAM\u00a0Settings section.\nTo add a sensor reading at robot-relative coordinates X: 100 Y: 0, enter the following:\ncustomReadingAddARCL_CustomSensor 100 0\nThe command returns:\nAdded reading 100 0\nRelated Commands\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 97",
    "Page 98": "customReadingsClear Command\ncustomReadingsClear Command\nClears all the named sensor readings from ARAM.\nSyntax\ncustomReadingsClear<name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThere is no space between the command and the sensor name. See the examples section.\nARAM Settings\nThis command requires the addition of the \"-customSensor <name>\" argument to the Custom Argu-\nments section of the Configuration > Debug tab in the MobilePlanner software. For details, see the\nAdept Motivity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the device.\nResponses\nThe command returns:\nCleared readings\nDetails\nThe customReadingClear command clears all custom senor readings that were added using the cus-\ntomReadingAdd command or the customReadingAddAbsolute command. For details on these commands,\nuse the links in the Related Commands section.\nExamples\nTo clear the custom sensor readings, enter the following:\ncustomReadingsClearARCL_CustomSensor\nThe command returns:\nCleared readings\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 98\n\ncustomReadingsClear Command\ncustomReadingsClear Command\nClears all the named sensor readings from ARAM.\nSyntax\ncustomReadingsClear\n<name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThere is no space between the command and the sensor name. See the examples section.\nARAM Settings\nThis command requires the addition of the \"-customSensor <name>\" argument to the Custom Argu-\nments section of the\n Configuration > Debug\n tab in the MobilePlanner software. For details, see the\nAdept Motivity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the device.\nResponses\nThe command returns:\nCleared readings\nDetails\nThe customReadingClear command clears all custom senor readings that were added using the cus-\ntomReadingAdd command or the customReadingAddAbsolute command. For details on these commands,\nuse the links in the Related Commands section.\nExamples\nTo clear the custom sensor readings, enter the following:\ncustomReadingsClearARCL_CustomSensor\nThe command returns:\nCleared readings\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 98",
    "Page 99": "customReadingsClear Command\nRelated Commands\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 99\n\ncustomReadingsClear Command\nRelated Commands\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 99",
    "Page 100": "distanceBetween Command\ndistanceBetween Command\nFinds the path distance between two given goals.\nSyntax\ndistancebetween <FromGoal> <ToGoal>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThis command should only be used when the robot is idle and stationary.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nFromGoal\nEnter the name of the first goal.\nToGoal\nEnter the name of the second goal.\nResponses\nThe command returns:\nWill find distance between \"<FromGoal>\" and \"<ToGoal>\"\nDistanceBetween: <mm> \"<FromGoal>\" \"<ToGoal>\"\nDetails\nThe distanceBetween command plans a path from goal to goal and reports that path distance. It assumes,\nof course, there are no unforeseen obstacles. This command is processing-intensive. Therefore, it should\nbe used only when the robot is idle and stationary. Additionally, be sure to update the distance after any\nchanges are made to the map.\nTo find the distance from the current robot position to a specified goal, use the distanceFromHere com-\nmand. For details, see distanceFromHere Command on page 102.\nExamples\nThe following example finds the distance between goals \"g_6\" and \"g_7\".\ndistancebetween g_6 g_7\nThe command returns:\nWill find distance between \"g_6\" and \"g_7\"\nDistanceBetween: 13183 \"g_6\" \"g_7\"\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 100\n\ndistanceBetween Command\ndistanceBetween Command\nFinds the path distance between two given goals.\nSyntax\ndistancebetween\n <FromGoal> <ToGoal>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThis command should only be used when the robot is idle and stationary.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nFromGoal\nEnter the name of the first goal.\nToGoal\nEnter the name of the second goal.\nResponses\nThe command returns:\nWill find distance between \"<FromGoal>\" and \"<ToGoal>\"\nDistanceBetween: <mm> \"<FromGoal>\" \"<ToGoal>\"\nDetails\nThe distanceBetween command plans a path from goal to goal and reports that path distance. It assumes,\nof course, there are no unforeseen obstacles. This command is processing-intensive. Therefore, it should\nbe used only when the robot is idle and stationary. Additionally, be sure to update the distance after any\nchanges are made to the map.\nTo find the distance from the current robot position to a specified goal, use the distanceFromHere com-\nmand. For details, see distanceFromHere Command on page 102.\nExamples\nThe following example finds the distance between goals \"g_6\" and \"g_7\".\ndistancebetween g_6 g_7\nThe command returns:\nWill find distance between \"g_6\" and \"g_7\"\nDistanceBetween: 13183 \"g_6\" \"g_7\"\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 100",
    "Page 101": "distanceBetween Command\nRelated Commandss\ndistanceFromHere Command on page 102\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 101\n\ndistanceBetween Command\nRelated Commandss\ndistanceFromHere Command on page 102\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 101",
    "Page 102": "distanceFromHere Command\ndistanceFromHere Command\nFinds the path distance from the current robot position to a given goal.\nSyntax\ndistanceFromHere <ToGoal>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThis command should only be used when the robot is idle and stationary.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nToGoal\nEnter the name of the goal.\nResponses\nThe command returns:\nWill find distance from here to <ToGoal>.\nDistanceBetween: <mm> \"<to goal>\"\nDetails\nThe distanceFromHere command plans a path from the current robot position to the specified goal and\nreports that path distance. It assumes, of course, there are no unforeseen obstacles. This command is pro-\ncessing-intensive. Therefore, it should be used only when the robot is idle and stationary. Additionally, be\nsure to update the distance after any changes are made to the map.\nTo find the distance between two specified goals, use the distanceBetween command. For details, see dis-\ntanceBetween Command on page 100.\nExamples\nThe following example finds the distance from the current robot position to goal \"g_5\".\ndistancefromhere g_5\nThe command returns:\nWill find distance from here to \"g_5\"\nDistanceFromHere: 9960 \"g_5\"\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 102\n\ndistanceFromHere Command\ndistanceFromHere Command\nFinds the path distance from the current robot position to a given goal.\nSyntax\ndistanceFromHere\n <ToGoal>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThis command should only be used when the robot is idle and stationary.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nToGoal\nEnter the name of the goal.\nResponses\nThe command returns:\nWill find distance from here to <ToGoal>.\nDistanceBetween: <mm> \"<to goal>\"\nDetails\nThe distanceFromHere command plans a path from the current robot position to the specified goal and\nreports that path distance. It assumes, of course, there are no unforeseen obstacles. This command is pro-\ncessing-intensive. Therefore, it should be used only when the robot is idle and stationary. Additionally, be\nsure to update the distance after any changes are made to the map.\nTo find the distance between two specified goals, use the distanceBetween command. For details, see dis-\ntanceBetween Command on page 100.\nExamples\nThe following example finds the distance from the current robot position to goal \"g_5\".\ndistancefromhere g_5\nThe command returns:\nWill find distance from here to \"g_5\"\nDistanceFromHere: 9960 \"g_5\"\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 102",
    "Page 103": "distanceFromHere Command\nRelated Commands\ndistanceBetween Command on page 100\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 103\n\ndistanceFromHere Command\nRelated Commands\ndistanceBetween Command on page 100\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 103",
    "Page 104": "dock Command\ndock Command\nSends the robot to the dock.\nSyntax\ndock\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nDockingState: <dock_state> ForcedState: <forced_state> ChargeState: <charge_state>\nDetails\nThe dock command sends the robot to the dock so it can recharge.\nWhen the robot is fully-charged, it will automatically undock from the dock/recharge station.\nYou can undock the robot with the undock command, or by using one of the \"goto...\" commands. For\ndetails on these commands, use the links in the Related Commands section.\nExamples\nThe following example docks the robot:\ndock\nThe command returns:\nDockingState: Undocked ForcedState: Unforced ChargeState: Unknowable\nDockingState: Docking ForcedState: Unforced ChargeState: Unknowable\nRelated Commands\ngoto Command on page 135\ngotoPoint Command on page 137\ngotoRouteGoal Command on page 139\nundock Command on page 291\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 104\n\ndock Command\ndock Command\nSends the robot to the dock.\nSyntax\ndock\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nDockingState: <dock_state> ForcedState: <forced_state> ChargeState: <charge_state>\nDetails\nThe dock command sends the robot to the dock so it can recharge.\nWhen the robot is fully-charged, it will automatically undock from the dock/recharge station.\nYou can undock the robot with the undock command, or by using one of the \"goto...\" commands. For\ndetails on these commands, use the links in the Related Commands section.\nExamples\nThe following example docks the robot:\ndock\nThe command returns:\nDockingState: Undocked ForcedState: Unforced ChargeState: Unknowable\nDockingState: Docking ForcedState: Unforced ChargeState: Unknowable\nRelated Commands\ngoto Command on page 135\ngotoPoint Command on page 137\ngotoRouteGoal Command on page 139\nundock Command on page 291\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 104",
    "Page 105": "doTask Command\ndoTask Command\nPerforms a single task.\nSyntax\ndoTask <task> <argument>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ntask\nEnter the name of the task you want the mobile robot to perform,\nsuch as a goto task.\nargument\nEnter the appropriate arguments for the task you want the robot to\nperform. Using the goto task example, you would need to enter a\ngoal name, such as goto goal_1.\nEnclose any string arguments in double quotes.\nResponses\nThe command returns:\nWill do task <task> <argument>\nDoing task <task> <argument>\n...\nCompleted doing task <task> <argument>\nDetails\nThe doTask command tells the robot to perform a single task. The task is carried out immediately. This task\nis similar to the doTaskInstant command, which performs \"instant tasks\" immediately. For details, see\ndoTaskInstant Command on page 107.\nExamples\nThe following example tells the robot to go to goal g_5:\ndotask goto g_5\nThe command returns:\nWill do task goto g_5\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 105\n\ndoTask Command\ndoTask Command\nPerforms a single task.\nSyntax\ndoTask\n <task> <argument>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ntask\nEnter the name of the task you want the mobile robot to perform,\nsuch as a goto task.\nargument\nEnter the appropriate arguments for the task you want the robot to\nperform. Using the goto task example, you would need to enter a\ngoal name, such as goto goal_1.\nEnclose any string arguments in double quotes.\nResponses\nThe command returns:\nWill do task <task> <argument>\nDoing task <task> <argument>\n...\nCompleted doing task <task> <argument>\nDetails\nThe doTask command tells the robot to perform a single task. The task is carried out immediately. This task\nis similar to the doTaskInstant command, which performs \"instant tasks\" immediately. For details, see\ndoTaskInstant Command on page 107.\nExamples\nThe following example tells the robot to go to goal g_5:\ndotask goto g_5\nThe command returns:\nWill do task goto g_5\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 105",
    "Page 106": "doTask Command\nDoing task goto g_5\nCompleted doing task goto g_5\nThe following example tells the robot to wait for 10 seconds:\ndoTask wait 10\nThe command returns:\nWill do task wait 10\nDoing task wait 10\nWaitState: Waiting 10 seconds with status \"Waiting\"\nWaitState: Waiting completed\nCompleted doing task wait 10\nRelated Commands\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 106\n\ndoTask Command\nDoing task goto g_5\nCompleted doing task goto g_5\nThe following example tells the robot to wait for 10 seconds:\ndoTask wait 10\nThe command returns:\nWill do task wait 10\nDoing task wait 10\nWaitState: Waiting 10 seconds with status \"Waiting\"\nWaitState: Waiting completed\nCompleted doing task wait 10\nRelated Commands\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 106",
    "Page 107": "doTaskInstant Command\ndoTaskInstant Command\nPerforms an instant task.\nSyntax\ndoTaskInstant <task> <argument>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ntask\nEnter the name of the instant task you want the mobile robot to per-\nform.\nargument\nEnter the appropriate arguments for the instant task you want the\nrobot to perform. Enclose strings in double quotes.\nResponses\nThe command returns:\nCompleted doing instant task <task> <argument>\nDetails\nThe doTaskInstant command tells the mobile robot to immediately perform the specified task. You can only\nuse \"instant tasks\" with the doTaskInstant command. This command is similar to the doTask command.\nFor details, see doTask Command on page 105.\nThe following are examples of two instant tasks that are available for use with ARCL.\nl movementParametersTemp - Sets the movement parameters temporarily (this route and/or this\nmode).\nl pathPlanningSettingsTemp - Sets the path-planning parameters temporarily (this route and/or this\nmode).\nThe list of available instant tasks can be viewed using the MobilePlanner software. For details, see the Adept\nMotivity User's Guide.\nRelated Commands\ndoTask Command on page 105\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 107\n\ndoTaskInstant Command\ndoTaskInstant Command\nPerforms an instant task.\nSyntax\ndoTaskInstant\n <task> <argument>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ntask\nEnter the name of the instant task you want the mobile robot to per-\nform.\nargument\nEnter the appropriate arguments for the instant task you want the\nrobot to perform. Enclose strings in double quotes.\nResponses\nThe command returns:\nCompleted doing instant task <task> <argument>\nDetails\nThe doTaskInstant command tells the mobile robot to immediately perform the specified task. You can only\nuse \"instant tasks\" with the doTaskInstant command. This command is similar to the doTask command.\nFor details, see doTask Command on page 105.\nThe following are examples of two instant tasks that are available for use with ARCL.\nl\n movementParametersTemp - Sets the movement parameters temporarily (this route and/or this\nmode).\nl\n pathPlanningSettingsTemp - Sets the path-planning parameters temporarily (this route and/or this\nmode).\nThe list of available instant tasks can be viewed using the MobilePlanner software. For details, see the\n Adept\nMotivity User's Guide\n.\nRelated Commands\ndoTask Command on page 105\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 107",
    "Page 108": "doTaskInstant Command\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 108\n\ndoTaskInstant Command\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 108",
    "Page 109": "echo Command\necho Command\nEnables/disables echo, or returns the current echo state.\nSyntax\necho [state]\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nstate\nOptional. Enter \"on\" to enable echo; enter \"off\" to disable echo. If\nomitted, the command returns the current echo state.\nResponses\nThe command returns:\nEcho is <state>\n-Or-\nEcho turned <state>\nExamples\nThe following command returns the current echo state:\necho\nEcho is off.\nThe following command turns echo on:\necho on\nEcho turned on.\nThe following command turns echo off:\necho off\nEcho turned off.\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 109\n\necho Command\necho Command\nEnables/disables echo, or returns the current echo state.\nSyntax\necho\n [state]\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nstate\nOptional. Enter \"on\" to enable echo; enter \"off\" to disable echo. If\nomitted, the command returns the current echo state.\nResponses\nThe command returns:\nEcho is <state>\n-Or-\nEcho turned <state>\nExamples\nThe following command returns the current echo state:\necho\nEcho is off.\nThe following command turns echo on:\necho on\nEcho turned on.\nThe following command turns echo off:\necho off\nEcho turned off.\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 109",
    "Page 110": "enableMotors Command\nenableMotors Command\nEnables the robot motors, if the robot was not E-stopped.\nSyntax\nenableMotors\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nMotors are enabled\nHowever, if an E-stop was pressed on the robot, the following message is displayed.\nEstop pressed cannot enable motors\nExamples\nThe following command enables the robot motors:\nenablemotors\nThe command returns:\nMotors are enabled\nRelated Commands\nqueryMotors Command on page 207\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 110\n\nenableMotors Command\nenableMotors Command\nEnables the robot motors, if the robot was not E-stopped.\nSyntax\nenableMotors\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nMotors are enabled\nHowever, if an E-stop was pressed on the robot, the following message is displayed.\nEstop pressed cannot enable motors\nExamples\nThe following command enables the robot motors:\nenablemotors\nThe command returns:\nMotors are enabled\nRelated Commands\nqueryMotors Command on page 207\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 110",
    "Page 111": "etaRequest Command\netaRequest Command\nSyntax\netaRequest\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\neta <seconds> <distance_mm>\nDetails\nThe etaRequest command returns the estimated time (in seconds) and distance (in mm) to reach the goal.\nIf the robot is not traveling to a goal, the command returns 0 for both values.\nExamples\nTo get the estimated time (and distance) before the robot reaches the goal, enter:\netarequest\nThe command returns:\neta 17 25449\nRelated Commands\nstatus Command on page 276\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 111\n\netaRequest Command\netaRequest Command\nSyntax\netaRequest\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\neta <seconds> <distance_mm>\nDetails\nThe etaRequest command returns the estimated time (in seconds) and distance (in mm) to reach the goal.\nIf the robot is not traveling to a goal, the command returns 0 for both values.\nExamples\nTo get the estimated time (and distance) before the robot reaches the goal, enter:\netarequest\nThe command returns:\neta 17 25449\nRelated Commands\nstatus Command on page 276\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 111",
    "Page 112": "executeMacro Command\nexecuteMacro Command\nExecutes the specified macro.\nSyntax\nexecuteMacro <macro_name >\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nmacro_name\nEnter the name of the macro you want the mobile robot to per-\nform.\nResponses\nThe command returns:\nExecuting macro <macro_name>\nWaitState: <wait_status>\n...\nCompleted macro <macro_name>\nDetails\nUse this command to execute a specified macro found on the map. You can use the MobilePlanner soft-\nware to create macros. For details, see the Adept Motivity User's Guide.\nUse the getMacros command to display a list of the macros available in ARCL. For details, see getMacros\nCommand on page 130.\nExample\nThe following example executes the macro named \"Adept Greeting\".\nexecutemacro Adept Greeting\nThe command returns:\nExecuting macro Adept Greeting\nWaitState: Waiting 1 seconds with status \"Waiting\"\nWaitState: Waiting completed\nCompleted macro Adept Greeting\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 112\n\nexecuteMacro Command\nexecuteMacro Command\nExecutes the specified macro.\nSyntax\nexecuteMacro\n <macro_name >\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nmacro_name\nEnter the name of the macro you want the mobile robot to per-\nform.\nResponses\nThe command returns:\nExecuting macro <macro_name>\nWaitState: <wait_status>\n...\nCompleted macro <macro_name>\nDetails\nUse this command to execute a specified macro found on the map. You can use the MobilePlanner soft-\nware to create macros. For details, see the\n Adept Motivity User's Guide\n.\nUse the getMacros command to display a list of the macros available in ARCL. For details, see getMacros\nCommand on page 130.\nExample\nThe following example executes the macro named \"Adept Greeting\".\nexecutemacro Adept Greeting\nThe command returns:\nExecuting macro Adept Greeting\nWaitState: Waiting 1 seconds with status \"Waiting\"\nWaitState: Waiting completed\nCompleted macro Adept Greeting\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 112",
    "Page 113": "executeMacro Command\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 113\n\nexecuteMacro Command\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 113",
    "Page 114": "faultsGet Command\nfaultsGet Command\nGets the list of any faults currently triggered.\nSyntax\nfaultsGet\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nFaultList: Fault_<drivingFault or criticalFault> <name> \"<short_desc>\" \"<long_desc>\"\nbool_driving bool_critical bool_applicaiton\u00a0\u00a0\u00a0\n...\nEnd of FaultList\nFor Enterprise Manager, if a robot is unavailable because of a fault, the returned message will start with\nFault_ and end with _<name> with the relevant flags in the middle, and each flag will be separated by the\nunderscore character (_).\nDetails\nThe faultsGet command returns the list of faults that are currently triggered\u2014this includes system-gen-\neratd faults and application-generated faults. Application faults can be set using the applicationFaultSet\ncommand, cleared using the applicationFaultClear command, and queried using the applicationFaultQuery\ncommand. For details on these commands, see the related commands section.\nExamples\nThe following example shows a listing of the faults:\nfaultsget\nThe command returns:\nFaultList: Fault_Driving_Application faultTest \"Fault test\" \"This is a test of the\napplication fault\" true false true\nFaultList: Fault_Critical_Application faulTest2 \"Fault test 2\" \"This is a test of the\napplication fault two\" false true true\nEnd of FaultList\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 114\n\nfaultsGet Command\nfaultsGet Command\nGets the list of any faults currently triggered.\nSyntax\nfaultsGet\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nFaultList: Fault_<drivingFault or criticalFault> <name> \"<short_desc>\" \"<long_desc>\"\nbool_driving bool_critical bool_applicaiton\u00a0\u00a0\u00a0\n...\nEnd of FaultList\nFor Enterprise Manager, if a robot is unavailable because of a fault, the returned message will start with\nFault_ and end with _<name> with the relevant flags in the middle, and each flag will be separated by the\nunderscore character (_).\nDetails\nThe faultsGet command returns the list of faults that are currently triggered\u2014this includes system-gen-\neratd faults and application-generated faults. Application faults can be set using the applicationFaultSet\ncommand, cleared using the applicationFaultClear command, and queried using the applicationFaultQuery\ncommand. For details on these commands, see the related commands section.\nExamples\nThe following example shows a listing of the faults:\nfaultsget\nThe command returns:\nFaultList: Fault_Driving_Application faultTest \"Fault test\" \"This is a test of the\napplication fault\" true false true\nFaultList: Fault_Critical_Application faulTest2 \"Fault test 2\" \"This is a test of the\napplication fault two\" false true true\nEnd of FaultList\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 114",
    "Page 115": "faultsGet Command\nRelated Commands\napplicationFaultClear Command on page 77\napplicationFaultQuery Command on page 79\napplicationFaultSet Command on page 81\nlog Command on page 153\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 115\n\nfaultsGet Command\nRelated Commands\napplicationFaultClear Command on page 77\napplicationFaultQuery Command on page 79\napplicationFaultSet Command on page 81\nlog Command on page 153\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 115",
    "Page 116": "follow Command\nfollow Command\nFollow a person walking ahead of the robot.\nSyntax\nfollow\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nFollowing\nDetails\nThe follow command engages the leg-following behavior for no-hands operation. When this command is\nexecuted, the robot will follow (at a safe distance) behind a person who is walking ahead of it.\nExamples\nTo engage the leg-following behavior, enter the following:\nfollow\nThe command returns:\nFollowing\nRelated Commands\ngoto Command on page 135\ngotoPoint Command on page 137\ngotoRouteGoal Command on page 139\npatrol Command on page 177\npatrolOnce Command on page 179\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 116\n\nfollow Command\nfollow Command\nFollow a person walking ahead of the robot.\nSyntax\nfollow\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nFollowing\nDetails\nThe follow command engages the leg-following behavior for no-hands operation. When this command is\nexecuted, the robot will follow (at a safe distance) behind a person who is walking ahead of it.\nExamples\nTo engage the leg-following behavior, enter the following:\nfollow\nThe command returns:\nFollowing\nRelated Commands\ngoto Command on page 135\ngotoPoint Command on page 137\ngotoRouteGoal Command on page 139\npatrol Command on page 177\npatrolOnce Command on page 179\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 116",
    "Page 117": "getConfigSectionInfo Command\ngetConfigSectionInfo Command\nDisplays details about the configuration parameters in a specified section.\nSyntax\ngetConfigSectionInfo <section>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the Configuration > Robot Interface tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThe getConfigSectionInfo arguments are described in the table below.\nParameters\nDefinition\nsection\nEnter the name of the section from which you want to see a list of\nconfiguration parameters. This is a text string; it is case-sensitive.\nThe string must not be enclosed in double quotes.\nResponses\nWhen using the getConfigSectionInfo command, ARCL displays the following information:\ngetconfigsectioninfo \"<type>\" \"<type>\"\nThen for each parameter in the section, ARCL displays the following information:\nGetConfigSectionInfo:\u00a0<type> <name> <priority> <min> <max> \"<description>\" \"<display\nhint>\"\n...\nEndOfGetConfigSectionInfo\nDetails\nThe getConfigSectionInfo command displays details about the configuration parameters in a specified sec-\ntion. See Examples for details.\nNote that a valid section name must be entered, and the section name is case-sensitive.\nUse the getConfigSectionList Command to display a list of available sections. For details, see getCon-\nfigSectionList Command on page 119.\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 117\n\ngetConfigSectionInfo Command\ngetConfigSectionInfo Command\nDisplays details about the configuration parameters in a specified section.\nSyntax\ngetConfigSectionInfo\n <section>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the\n Configuration > Robot Interface\n tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThe getConfigSectionInfo arguments are described in the table below.\nParameters\nDefinition\nsection\nEnter the name of the section from which you want to see a list of\nconfiguration parameters. This is a text string; it is case-sensitive.\nThe string must not be enclosed in double quotes.\nResponses\nWhen using the getConfigSectionInfo command, ARCL displays the following information:\ngetconfigsectioninfo \"<type>\" \"<type>\"\nThen for each parameter in the section, ARCL displays the following information:\nGetConfigSectionInfo:\u00a0<type> <name> <priority> <min> <max> \"<description>\" \"<display\nhint>\"\n...\nEndOfGetConfigSectionInfo\nDetails\nThe getConfigSectionInfo command displays details about the configuration parameters in a specified sec-\ntion. See Examples for details.\nNote that a valid section name must be entered, and the section name is case-sensitive.\nUse the getConfigSectionList Command to display a list of available sections. For details, see getCon-\nfigSectionList Command on page 119.\nAdept ARCL Reference Guide, Updated: 9:26:50 AM\nPage 117",
    "Page 118": "getConfigSectionInfo Command\nExamples\nThe following example displays details about the configuration parameters in the section\"Outgoing\nARCL\u00a0Commands\".\ngetconfigsectioninfo Outgoing ARCL Commands\nGetConfigSectionInfo: \"\" \"SEPARATE_SECTION\"\nGetConfigSectionParamInfo: Separator\nGetConfigSectionParamInfo: Bool LogOutgoingCommands Advanced None None \"True\nto log outgoing commands from below, false not to\" \"(null)\"\nGetConfigSectionParamInfo: Separator\nGetConfigSectionParamInfo: String OutgoingCommands1 Advanced None None \"ARCL\ncommand(s) to call on the outgoing socket\" \"(null)\"\nGetConfigSectionParamInfo: Double OutgoingCommands1Seconds Advanced 0 inf \"Call\nthe command every this many seconds (note it's a double so you can do .5 for half a\nsecond)\n0 disables (seconds)\" \"(null)\"\nRelated Commands\nconfigAdd Command on page 85\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nconfigAdd Command on page 85\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 118\n\ngetConfigSectionInfo Command\nExamples\nThe following example displays details about the configuration parameters in the section\"Outgoing\nARCL\u00a0Commands\".\ngetconfigsectioninfo Outgoing ARCL Commands\nGetConfigSectionInfo: \"\" \"SEPARATE_SECTION\"\nGetConfigSectionParamInfo: Separator\nGetConfigSectionParamInfo: Bool LogOutgoingCommands Advanced None None \"True\nto log outgoing commands from below, false not to\" \"(null)\"\nGetConfigSectionParamInfo: Separator\nGetConfigSectionParamInfo: String OutgoingCommands1 Advanced None None \"ARCL\ncommand(s) to call on the outgoing socket\" \"(null)\"\nGetConfigSectionParamInfo: Double OutgoingCommands1Seconds Advanced 0 inf \"Call\nthe command every this many seconds (note it's a double so you can do .5 for half a\nsecond)\n0 disables (seconds)\" \"(null)\"\nRelated Commands\nconfigAdd Command on page 85\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nconfigAdd Command on page 85\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 118",
    "Page 119": "getConfigSectionList Command\ngetConfigSectionList Command\nDisplays the list of sections enabled in the ARAM configuration parameters.\nSyntax\ngetConfigSectionList\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the Configuration > Robot Interface tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThis command does not have any parameters.\nValue\nDetails\nThe getConfigSectionList displays the list of sections enabled in the ARAM configuration parameters. See\nExamples for a sample list.\nThis command would be used in conjunction with getConfigSectionInfo, which returns information about a\nspecified section. For details, see getConfigSectionInfo Command on page 117.\nExamples\nThe following example returns a list of sections that are enabled in the ARAM\u00a0configuration parameters.\ngetconfigsectionlist\nGetConfigSectionList: Log Config\nGetConfigSectionList: Connection timeouts\nGetConfigSectionList: ARCL server setup\nGetConfigSectionList: Outgoing ARCL connection setup\nGetConfigSectionList: Outgoing ARCL commands\nGetConfigSectionList: Files\nGetConfigSectionList: Path Planning Settings\nGetConfigSectionList: Debug log\nGetConfigSectionList: lms2xx_1 Settings\nGetConfigSectionList: Localization settings\nGetConfigSectionList: Instant Macro Button Settings\nGetConfigSectionList: Periodic Macros\nGetConfigSectionList: Driving problem response\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 119\n\ngetConfigSectionList Command\ngetConfigSectionList Command\nDisplays the list of sections enabled in the ARAM configuration parameters.\nSyntax\ngetConfigSectionList\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the\n Configuration > Robot Interface\n tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThis command does not have any parameters.\nValue\nDetails\nThe getConfigSectionList displays the list of sections enabled in the ARAM configuration parameters. See\nExamples for a sample list.\nThis command would be used in conjunction with getConfigSectionInfo, which returns information about a\nspecified section. For details, see getConfigSectionInfo Command on page 117.\nExamples\nThe following example returns a list of sections that are enabled in the ARAM\u00a0configuration parameters.\ngetconfigsectionlist\nGetConfigSectionList: Log Config\nGetConfigSectionList: Connection timeouts\nGetConfigSectionList: ARCL server setup\nGetConfigSectionList: Outgoing ARCL connection setup\nGetConfigSectionList: Outgoing ARCL commands\nGetConfigSectionList: Files\nGetConfigSectionList: Path Planning Settings\nGetConfigSectionList: Debug log\nGetConfigSectionList: lms2xx_1 Settings\nGetConfigSectionList: Localization settings\nGetConfigSectionList: Instant Macro Button Settings\nGetConfigSectionList: Periodic Macros\nGetConfigSectionList: Driving problem response\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 119",
    "Page 120": "getConfigSectionList Command\nGetConfigSectionList: bumpers Settings\nGetConfigSectionList: Teleop settings\nGetConfigSectionList: Robot config\nGetConfigSectionList: Destination Drawing\nGetConfigSectionList: Patrol\nGetConfigSectionList: Docking\nGetConfigSectionList: Move settings\nGetConfigSectionList: Follow (laser) settings\nGetConfigSectionList: A/V Config\nGetConfigSectionList: Speech Synthesis\nGetConfigSectionList: MultiRobot\nGetConfigSectionList: Data Log Settings\nEndOfGetConfigSectionList\nRelated Commands\nconfigAdd Command on page 85\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionValues Command on page 121\nconfigAdd Command on page 85\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 120\n\ngetConfigSectionList Command\nGetConfigSectionList: bumpers Settings\nGetConfigSectionList: Teleop settings\nGetConfigSectionList: Robot config\nGetConfigSectionList: Destination Drawing\nGetConfigSectionList: Patrol\nGetConfigSectionList: Docking\nGetConfigSectionList: Move settings\nGetConfigSectionList: Follow (laser) settings\nGetConfigSectionList: A/V Config\nGetConfigSectionList: Speech Synthesis\nGetConfigSectionList: MultiRobot\nGetConfigSectionList: Data Log Settings\nEndOfGetConfigSectionList\nRelated Commands\nconfigAdd Command on page 85\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionValues Command on page 121\nconfigAdd Command on page 85\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 120",
    "Page 121": "getConfigSectionValues Command\ngetConfigSectionValues Command\nDisplays the current parameter values for the specified section.\nSyntax\ngetConfigSectionValues <section>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the Configuration > Robot Interface tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nsection\nEnter the name of the section from which you want to see a list of\nparameter values. This is a text string; it is case-sensitive. The\nstring must not be enclosed in double quotes.\nResponses\nThe command returns:\nGetConfigSectionValue: <value>\n...\nEndOfGetConfigSectionValues\nDetails\nThe getConfigSectionValues command displays a list of the specified section's current parameter values.\nSee Examples for a sample listing.\nIt is typically used with the getConfigSectionList command, which lists the available sections, and the\ngetConfigSectionInfo command, which displays the information for a specified section.\nExamples\nThe following example displays the parameter values for the section \"Outgoing ARCL\u00a0Commands\".\ngetconfigsectionvalues Outgoing ARCL Commands\nGetConfigSectionValue: LogOutgoingCommands true\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 121\n\ngetConfigSectionValues Command\ngetConfigSectionValues Command\nDisplays the current parameter values for the specified section.\nSyntax\ngetConfigSectionValues\n <section>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the\n Configuration > Robot Interface\n tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nsection\nEnter the name of the section from which you want to see a list of\nparameter values. This is a text string; it is case-sensitive. The\nstring must not be enclosed in double quotes.\nResponses\nThe command returns:\nGetConfigSectionValue: <value>\n...\nEndOfGetConfigSectionValues\nDetails\nThe getConfigSectionValues command displays a list of the specified section's current parameter values.\nSee Examples for a sample listing.\nIt is typically used with the getConfigSectionList command, which lists the available sections, and the\ngetConfigSectionInfo command, which displays the information for a specified section.\nExamples\nThe following example displays the parameter values for the section \"Outgoing ARCL\u00a0Commands\".\ngetconfigsectionvalues Outgoing ARCL Commands\nGetConfigSectionValue: LogOutgoingCommands true\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 121",
    "Page 122": "getConfigSectionValues Command\nGetConfigSectionValue: OutgoingCommands1\nGetConfigSectionValue: OutgoingCommands1Seconds 0\nGetConfigSectionValue: OutgoingCommands2\nGetConfigSectionValue: OutgoingCommands2Seconds 0\nGetConfigSectionValue: OutgoingCommands3\nGetConfigSectionValue: OutgoingCommands3Seconds 0\nGetConfigSectionValue: OutgoingCommands4\nGetConfigSectionValue: OutgoingCommands4Seconds 0\nGetConfigSectionValue: OutgoingCommands5\nGetConfigSectionValue: OutgoingCommands5Seconds 0\nEndOfGetConfigSectionValues\nRelated Commands\nconfigAdd Command on page 85\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\nconfigAdd Command on page 85\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 122\n\ngetConfigSectionValues Command\nGetConfigSectionValue: OutgoingCommands1\nGetConfigSectionValue: OutgoingCommands1Seconds 0\nGetConfigSectionValue: OutgoingCommands2\nGetConfigSectionValue: OutgoingCommands2Seconds 0\nGetConfigSectionValue: OutgoingCommands3\nGetConfigSectionValue: OutgoingCommands3Seconds 0\nGetConfigSectionValue: OutgoingCommands4\nGetConfigSectionValue: OutgoingCommands4Seconds 0\nGetConfigSectionValue: OutgoingCommands5\nGetConfigSectionValue: OutgoingCommands5Seconds 0\nEndOfGetConfigSectionValues\nRelated Commands\nconfigAdd Command on page 85\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\nconfigAdd Command on page 85\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 122",
    "Page 123": "getDateTime Command\ngetDateTime Command\nReturns the system date and time.\nSyntax\ngetDateTime\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nParameters\nThis command does not have any parameters.\nExamples\nTo view the current system date and time, enter:\ngetdatetime\nThe command returns:\nDateTime: 05/03/2012 04:48:55\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 123\n\ngetDateTime Command\ngetDateTime Command\nReturns the system date and time.\nSyntax\ngetDateTime\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nParameters\nThis command does not have any parameters.\nExamples\nTo view the current system date and time, enter:\ngetdatetime\nThe command returns:\nDateTime: 05/03/2012 04:48:55\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 123",
    "Page 124": "getGoals Command\ngetGoals Command\nReturns a list of goal names found in the current map.\nSyntax\ngetGoals\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nGoal: <name>\n...\nGoal: <name>\nEnd of goals\nExamples\nTo get a list of the goal names in the current map, enter the following:\ngetgoals\nThe command returns:\nGoal: w200\nGoal: Y\nGoal: X\nGoal: First_Goal\nGoal: goal space\nGoal: T\nGoal: w180\nGoal: First\nGoal: V\nGoal: w20\nGoal: z\nEnd of goals\nRelated Commands\ngetGoals Command on page 124\ngetRoutes Command on page 134\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 124\n\ngetGoals Command\ngetGoals Command\nReturns a list of goal names found in the current map.\nSyntax\ngetGoals\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nGoal: <name>\n...\nGoal: <name>\nEnd of goals\nExamples\nTo get a list of the goal names in the current map, enter the following:\ngetgoals\nThe command returns:\nGoal: w200\nGoal: Y\nGoal: X\nGoal: First_Goal\nGoal: goal space\nGoal: T\nGoal: w180\nGoal: First\nGoal: V\nGoal: w20\nGoal: z\nEnd of goals\nRelated Commands\ngetGoals Command on page 124\ngetRoutes Command on page 134\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 124",
    "Page 125": "getGoals Command\ngoto Command on page 135\ngotoRouteGoal Command on page 139\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 125\n\ngetGoals Command\ngoto Command on page 135\ngotoRouteGoal Command on page 139\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 125",
    "Page 126": "getInfo Command\ngetInfo Command\nReturns the string associated with the information name.\nSyntax\ngetInfo <infoName>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nYou can view the value of any information on the connected device\u2014it is not restricted to the information\ncreated with the createInfo command. For details, see createInfo Command on page 92.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\n<infoName>\nEnter the name of the information you want to view.\nResponses\nThe command returns:\nInfo: <label> <string_value>\nDetails\nThe getInfo command returns the information associated with the specified information name. You can\nuse the command to view the value of any information on the connected device. To see a list of all inform-\nation names on the device, use the getInfoList command. For details, see getInfoList Command on page\n128.\nExamples\nTo view the information associated with the information name \"mystring\", enter the following:\ngetinfo mystring\nThe command returns:\nInfo: Flags 400\nRelated Commands\ncreateInfo Command on page 92\ngetInfoList Command on page 128\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 126\n\ngetInfo Command\ngetInfo Command\nReturns the string associated with the information name.\nSyntax\ngetInfo\n <infoName>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nYou can view the value of any information on the connected device\u2014it is not restricted to the information\ncreated with the createInfo command. For details, see createInfo Command on page 92.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\n<infoName>\nEnter the name of the information you want to view.\nResponses\nThe command returns:\nInfo: <label> <string_value>\nDetails\nThe getInfo command returns the information associated with the specified information name. You can\nuse the command to view the value of any information on the connected device. To see a list of all inform-\nation names on the device, use the getInfoList command. For details, see getInfoList Command on page\n128.\nExamples\nTo view the information associated with the information name \"mystring\", enter the following:\ngetinfo mystring\nThe command returns:\nInfo: Flags 400\nRelated Commands\ncreateInfo Command on page 92\ngetInfoList Command on page 128\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 126",
    "Page 127": "getInfo Command\nupdateInfo Command on page 293\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 127\n\ngetInfo Command\nupdateInfo Command on page 293\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 127",
    "Page 128": "getInfoList Command\ngetInfoList Command\nReturns the list of information names.\nSyntax\ngetInfoList\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThis command lists all information names on the connected device\u2014it is not restricted to the names cre-\nated with the createInfo command. For details, see createInfo Command on page 92.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nInfoList: <info>\n...\nInfoList: <info>\nEnd of info list\nDetails\nThe getInfoList command is used to list all the information names on the connected device. The list\nincludes the system information names and any user-created information names that were added with\nthe createInfo command. For details, see createInfo Command on page 92.\nExamples\nTo view the list of information names, enter the following:\ngetinfolist\nThe command returns:\nInfoList: Odometer(KM)\nInfoList: LaserUncertainty\nInfoList: LaserScore\nInfoList: LaserLock\nInfoList: LaserNumSamples\nInfoList: Flags\nInfoList: Fault flags\nInfoList: MPacs\nInfoList: lms2xx_1 Pacs\nInfoList: CPU Use\nInfoList: SBC Uptime\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 128\n\ngetInfoList Command\ngetInfoList Command\nReturns the list of information names.\nSyntax\ngetInfoList\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThis command lists all information names on the connected device\u2014it is not restricted to the names cre-\nated with the createInfo command. For details, see createInfo Command on page 92.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nInfoList: <info>\n...\nInfoList: <info>\nEnd of info list\nDetails\nThe getInfoList command is used to list all the information names on the connected device. The list\nincludes the system information names and any user-created information names that were added with\nthe createInfo command. For details, see createInfo Command on page 92.\nExamples\nTo view the list of information names, enter the following:\ngetinfolist\nThe command returns:\nInfoList: Odometer(KM)\nInfoList: LaserUncertainty\nInfoList: LaserScore\nInfoList: LaserLock\nInfoList: LaserNumSamples\nInfoList: Flags\nInfoList: Fault flags\nInfoList: MPacs\nInfoList: lms2xx_1 Pacs\nInfoList: CPU Use\nInfoList: SBC Uptime\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 128",
    "Page 129": "getInfoList Command\nInfoList: ARAM Uptime\nInfoList: Idle\nInfoList: Queue ID\nInfoList: Queue Job ID\nInfoList: DebugLogState\nInfoList: DebugLogSeconds\nInfoList: mystring\nEnd of info list\nRelated Commands\ncreateInfo Command on page 92\ngetInfo Command on page 126\nupdateInfo Command on page 293\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 129\n\ngetInfoList Command\nInfoList: ARAM Uptime\nInfoList: Idle\nInfoList: Queue ID\nInfoList: Queue Job ID\nInfoList: DebugLogState\nInfoList: DebugLogSeconds\nInfoList: mystring\nEnd of info list\nRelated Commands\ncreateInfo Command on page 92\ngetInfo Command on page 126\nupdateInfo Command on page 293\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 129",
    "Page 130": "getMacros Command\ngetMacros Command\nDisplays a list of macros found in the current map.\nSyntax\ngetmacros\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\n<macro_name>\n...\n<macro_name>\nEnd of macros\nDetails\nThe getMacros command provides a list of the macro names found in the current map.\nUse this command with the executeMacro command. For details, see executeMacro Command on page\n112.\nExamples\ngetmacros\nThe command returns:\nMacro_1\nMacro_2\nMacro_3\nEnd of macros\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 130\n\ngetMacros Command\ngetMacros Command\nDisplays a list of macros found in the current map.\nSyntax\ngetmacros\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\n<macro_name>\n...\n<macro_name>\nEnd of macros\nDetails\nThe getMacros command provides a list of the macro names found in the current map.\nUse this command with the executeMacro command. For details, see executeMacro Command on page\n112.\nExamples\ngetmacros\nThe command returns:\nMacro_1\nMacro_2\nMacro_3\nEnd of macros\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 130",
    "Page 131": "getMacros Command\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 131\n\ngetMacros Command\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 131",
    "Page 132": "getPayload\u00a0Command\ngetPayload\u00a0Command\nGets the payload name.\nSyntax\ngetPayload\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\npayload <payload>\nDetails\nThe getPayload command gets the name of the robot payload. To set the payload name, use the setPay-\nload command. For details, see setPayload Command on page 272.\nExamples\nThe following example requests the payload name:\ngetpayload\nThe command returns:\npayload This has widgets\nRelated Commands\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 132\n\ngetPayload\u00a0Command\ngetPayload\u00a0Command\nGets the payload name.\nSyntax\ngetPayload\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\npayload <payload>\nDetails\nThe getPayload command gets the name of the robot payload. To set the payload name, use the setPay-\nload command. For details, see setPayload Command on page 272.\nExamples\nThe following example requests the payload name:\ngetpayload\nThe command returns:\npayload This has widgets\nRelated Commands\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 132",
    "Page 133": "getPrecedence Command\ngetPrecedence Command\nDisplays the precedence information for the robot, which is used in a multi-robot encounter. Lower values\ntake higher precedence.\nSyntax\ngetprecedence\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\ngetPrecedence: <value>\nDetails\nThe getPrecedence command is used to display the precedence information for the robot. The precedence\nvalue is used in a multi-robot encounter. The robot that has the lowest value will get highest precedence,\nthe robot with the next lowest value will get the next highest precedence, and so on. The precedence value\nis set using the setPrecedence command. For details, see setPrecedence Command on page 274.\nExamples\nTo get the precedence information for the robot, enter the following:\ngetprecedence\nThe command returns:\ngetPrecedence: 0\nRelated Commands\nsetPrecedence Command on page 274\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 133\n\ngetPrecedence Command\ngetPrecedence Command\nDisplays the precedence information for the robot, which is used in a multi-robot encounter. Lower values\ntake higher precedence.\nSyntax\ngetprecedence\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\ngetPrecedence: <value>\nDetails\nThe getPrecedence command is used to display the precedence information for the robot. The precedence\nvalue is used in a multi-robot encounter. The robot that has the lowest value will get highest precedence,\nthe robot with the next lowest value will get the next highest precedence, and so on. The precedence value\nis set using the setPrecedence command. For details, see setPrecedence Command on page 274.\nExamples\nTo get the precedence information for the robot, enter the following:\ngetprecedence\nThe command returns:\ngetPrecedence: 0\nRelated Commands\nsetPrecedence Command on page 274\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 133",
    "Page 134": "getRoutes Command\ngetRoutes Command\nDisplays the list of route names found on the current map.\nSyntax\ngetRoutes\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nRoutes\nRoute: <routeName>\n...\nRoute: <routeName>\nEnd of routes\nExamples\nTo show the list of routes on the current map, enter the following:\ngetroutes\nThe command returns:\nRoutes\nRoute: tv\nRoute: xyz\nRoute: yzx\nRoute: zy\nEnd of routes\nRelated Commands\ngetGoals Command on page 124\ngotoRouteGoal Command on page 139\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 134\n\ngetRoutes Command\ngetRoutes Command\nDisplays the list of route names found on the current map.\nSyntax\ngetRoutes\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nRoutes\nRoute: <routeName>\n...\nRoute: <routeName>\nEnd of routes\nExamples\nTo show the list of routes on the current map, enter the following:\ngetroutes\nThe command returns:\nRoutes\nRoute: tv\nRoute: xyz\nRoute: yzx\nRoute: zy\nEnd of routes\nRelated Commands\ngetGoals Command on page 124\ngotoRouteGoal Command on page 139\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 134",
    "Page 135": "goto Command\ngoto Command\nSends the robot to the named goal and, when it arrives, turns the robot to the specified heading, if spe-\ncified.\nSyntax\ngoto <goal_name> [heading]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe goto arguments are described in the table below.\nParameter\nDefinition\ngoal_name\nEnter the name of the goal you want the robot to drive to.\nheading\nEnter an optional heading in degrees.\nResponses\nThe command returns:\nGoing to <goal_name> with heading [heading]\nArrived at <goal_name> with heading [heading]\nDetails\nThe goto command sends the robot to the named goal and, when it arrives, turns the robot to the specified\nheading if it was specified.\nExamples\nTo have the robot go to goal \"g_15\", enter the following:\ngoto g_15\nThe command returns:\nGoing to g_15\nArrived at g_15\nTo have the robot go to goal \"X\" with a heading of \"10\", enter the following:\ngoto X 10\nThe command returns:\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 135\n\ngoto Command\ngoto Command\nSends the robot to the named goal and, when it arrives, turns the robot to the specified heading, if spe-\ncified.\nSyntax\ngoto\n <goal_name> [heading]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe goto arguments are described in the table below.\nParameter\nDefinition\ngoal_name\nEnter the name of the goal you want the robot to drive to.\nheading\nEnter an optional heading in degrees.\nResponses\nThe command returns:\nGoing to <goal_name> with heading [heading]\nArrived at <goal_name> with heading [heading]\nDetails\nThe goto command sends the robot to the named goal and, when it arrives, turns the robot to the specified\nheading if it was specified.\nExamples\nTo have the robot go to goal \"g_15\", enter the following:\ngoto g_15\nThe command returns:\nGoing to g_15\nArrived at g_15\nTo have the robot go to goal \"X\" with a heading of \"10\", enter the following:\ngoto X 10\nThe command returns:\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 135",
    "Page 136": "goto Command\nGoing to X with heading 10\nArrived at X with heading 10\nRelated Commands\ngotoPoint Command on page 137\ngotoRouteGoal Command on page 139\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 136\n\ngoto Command\nGoing to X with heading 10\nArrived at X with heading 10\nRelated Commands\ngotoPoint Command on page 137\ngotoRouteGoal Command on page 139\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 136",
    "Page 137": "gotoPoint Command\ngotoPoint Command\nSends robot to the specified point (optional heading, on arrival).\nSyntax\ngotoPoint <X> <Y> <heading: optional>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nX\nSpecifies the distance of travel in the robot X direction.\nY\nSpecifies the distance of travel in the robot Y direction.\nheading: optional\nSpecifies an optional heading in degrees.\nResponses\nThe command returns:\nGoing to point <x> <y> <heading:optional>\nArrived at point <x> <y> <heading:optional>\nDetails\nThe gotoPoint command sends the robot to the specified point in the map and, upon arrival, turn to the\ngiven heading, if it was specified.\nExamples\nThe following is a gotoPoint command with a heading:\ngotopoint 14000 25000 180\nGoing to point 14000 25000 180\nArrived at point 14000 25000 180\nThe following is a gotoPoint command without a heading:\ngotopoint 13000 26000\nGoing to point 13000 26000\nArrived at point 13000 26000\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 137\n\ngotoPoint Command\ngotoPoint Command\nSends robot to the specified point (optional heading, on arrival).\nSyntax\ngotoPoint\n <X> <Y> <heading: optional>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nX\nSpecifies the distance of travel in the robot X direction.\nY\nSpecifies the distance of travel in the robot Y direction.\nheading: optional\nSpecifies an optional heading in degrees.\nResponses\nThe command returns:\nGoing to point <x> <y> <heading:optional>\nArrived at point <x> <y> <heading:optional>\nDetails\nThe gotoPoint command sends the robot to the specified point in the map and, upon arrival, turn to the\ngiven heading, if it was specified.\nExamples\nThe following is a gotoPoint command with a heading:\ngotopoint 14000 25000 180\nGoing to point 14000 25000 180\nArrived at point 14000 25000 180\nThe following is a gotoPoint command without a heading:\ngotopoint 13000 26000\nGoing to point 13000 26000\nArrived at point 13000 26000\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 137",
    "Page 138": "gotoPoint Command\nRelated Commands\ngoto Command on page 135\ngotoRouteGoal Command on page 139\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 138\n\ngotoPoint Command\nRelated Commands\ngoto Command on page 135\ngotoRouteGoal Command on page 139\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 138",
    "Page 139": "gotoRouteGoal Command\ngotoRouteGoal Command\nSends robot to the specified goal within the specified route (optional route index can be asserted).\nSyntax\ngotoRouteGoal <route_name> <goal_name> [index]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThe optional index parameter is typically reserved for specific applications and is not required under normal\ncircumstances.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nroute_name\nEnter the name of the route where the robot will find the goal.\ngoal_name\nEnter the name of the goal you want the robot to navigate to.\nindex\nEnter an optional index. This is typically reserved for specific applic-\nations and is not required under normal circumstances.\nResponses\nThe command returns:\nGoing to <goal_name>\nArrived at <goal_name>\nDetails\nSends robot to specified goal within the specified goal. Optionally, the command also asserts a route index if\none has been specified. However, this is typically reserved for specific applications and is not required under\nnormal circumstances.\nExamples\nTo send the robot to goal \"g_17\" in the route named \"test\", enter the following:\ngotoroutegoal test g_17\nThe command returns:\nGoing to g_17\nArrived at g_17\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 139\n\ngotoRouteGoal Command\ngotoRouteGoal Command\nSends robot to the specified goal within the specified route (optional route index can be asserted).\nSyntax\ngotoRouteGoal\n <route_name> <goal_name> [index]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThe optional index parameter is typically reserved for specific applications and is not required under normal\ncircumstances.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nroute_name\nEnter the name of the route where the robot will find the goal.\ngoal_name\nEnter the name of the goal you want the robot to navigate to.\nindex\nEnter an optional index. This is typically reserved for specific applic-\nations and is not required under normal circumstances.\nResponses\nThe command returns:\nGoing to <goal_name>\nArrived at <goal_name>\nDetails\nSends robot to specified goal within the specified goal. Optionally, the command also asserts a route index if\none has been specified. However, this is typically reserved for specific applications and is not required under\nnormal circumstances.\nExamples\nTo send the robot to goal \"g_17\" in the route named \"test\", enter the following:\ngotoroutegoal test g_17\nThe command returns:\nGoing to g_17\nArrived at g_17\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 139",
    "Page 140": "gotoRouteGoal Command\nRelated Commands\ngoto Command on page 135\ngotoPoint Command on page 137\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 140\n\ngotoRouteGoal Command\nRelated Commands\ngoto Command on page 135\ngotoPoint Command on page 137\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 140",
    "Page 141": "help Command\nhelp Command\nProvides a list and brief description of available ARCL commands.\nSyntax\nhelp\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThis command does not have any parameters.\nDetails\nThe help command provides a list and brief description of the available ARCL commands on the connected\nserver or robot. The list shown depends on the current configuration of your server or robot, therefore, it\nmay not show the entire library of commands.\nExamples\nTo view the command list and descriptions, enter the following:\nhelp\nThe command returns:\nNOTE:\u00a0The list of available commands depends on your system configuration.\nCommands:\naddCustomCommand\u00a0\u00a0\u00a0 Adds a custom command that sends a message out ARCL when\ncalled\naddCustomStringCommand\nAdds a custom string command that sends a message out ARCL when\ncalled\narclSendText\nSends the given message to all ARCL clients\nconnectOutgoing\n(re)connects a socket to the given outside server\necho\nwith no args gets echo, with args sets echo\n\u2026\nqueueShowRobot\nshows the status of all the robots [qsr]\nquit\ncloses this connection to the server\nEnd of commands\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 141\n\nhelp Command\nhelp Command\nProvides a list and brief description of available ARCL commands.\nSyntax\nhelp\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThis command does not have any parameters.\nDetails\nThe help command provides a list and brief description of the available ARCL commands on the connected\nserver or robot. The list shown depends on the current configuration of your server or robot, therefore, it\nmay not show the entire library of commands.\nExamples\nTo view the command list and descriptions, enter the following:\nhelp\nThe command returns:\nNOTE:\n\u00a0The list of available commands depends on your system configuration.\nCommands:\naddCustomCommand\u00a0\u00a0\u00a0 Adds a custom command that sends a message out ARCL when\ncalled\naddCustomStringCommand\nAdds a custom string command that sends a message out ARCL when\ncalled\narclSendText\nSends the given message to all ARCL clients\nconnectOutgoing\n(re)connects a socket to the given outside server\necho\nwith no args gets echo, with args sets echo\n\u2026\nqueueShowRobot\nshows the status of all the robots [qsr]\nquit\ncloses this connection to the server\nEnd of commands\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 141",
    "Page 142": "inputList Command\ninputList Command\nLists the named digital inputs.\nSyntax\ninputList\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nInput: <name>\n...\nEnd of InputList\nDetails\nThe inputList command returns the list of digital inputs. To get the status of a particular digital input, use\nthe inputQuery command. For details, see inputQuery Command on page 144.\nExamples\nTo get the list of digital inputs, enter the following:\ninputlist\nThe command returns:\nInputList: out_one\nInputList: out_two\nEnd of InputList\nRelated Commands\ninputQuery Command on page 144\noutputList Command on page 171\noutputOff Command on page 173\noutputOn Command on page 174\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 142\n\ninputList Command\ninputList Command\nLists the named digital inputs.\nSyntax\ninputList\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nInput: <name>\n...\nEnd of InputList\nDetails\nThe inputList command returns the list of digital inputs. To get the status of a particular digital input, use\nthe inputQuery command. For details, see inputQuery Command on page 144.\nExamples\nTo get the list of digital inputs, enter the following:\ninputlist\nThe command returns:\nInputList: out_one\nInputList: out_two\nEnd of InputList\nRelated Commands\ninputQuery Command on page 144\noutputList Command on page 171\noutputOff Command on page 173\noutputOn Command on page 174\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 142",
    "Page 143": "inputList Command\noutputQuery Command on page 175\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 143\n\ninputList Command\noutputQuery Command on page 175\nAdept ARCL Reference Guide, Updated: 9:26:51 AM\nPage 143",
    "Page 144": "inputQuery Command\ninputQuery Command\nQueries the state of a named input.\nSyntax\ninputQuery <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the input to query.\nResponses\nThe command returns:\nInput: <name> <status>\nDetails\nThe outputQuery command returns the status of the named digital input. To get a list of the digital inputs,\nuse the inputList command. For details, see inputList Command on page 142.\nExamples\nTo get the status of digital input named \"in_one\", enter the following:\nInputquery in_one\nThe command returns:\nInput: in_one off\nRelated Commands\ninputList Command on page 142\noutputList Command on page 171\noutputOff Command on page 173\noutputOn Command on page 174\noutputQuery Command on page 175\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 144\n\ninputQuery Command\ninputQuery Command\nQueries the state of a named input.\nSyntax\ninputQuery\n <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the input to query.\nResponses\nThe command returns:\nInput: <name> <status>\nDetails\nThe outputQuery command returns the status of the named digital input. To get a list of the digital inputs,\nuse the inputList command. For details, see inputList Command on page 142.\nExamples\nTo get the status of digital input named \"in_one\", enter the following:\nInputquery in_one\nThe command returns:\nInput: in_one off\nRelated Commands\ninputList Command on page 142\noutputList Command on page 171\noutputOff Command on page 173\noutputOn Command on page 174\noutputQuery Command on page 175\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 144",
    "Page 145": "listAdd Command\nlistAdd Command\nAdds a task to the task list.\nSyntax\nlistAdd <task> <argument>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe listAdd arguments are described in the table below.\nParameters\nDefinition\ntask\nEnter the name of the task you want to add to the task list, such as\na goto task.\nargument\nEnter the appropriate arguments for the task you want the robot to\nperform. Using the goto task example, you would need to enter a\ngoal name, such as goto goal_1. Strings must be enclosed in double\nquotes.\nResponses\nThe command returns:\nAdded task <task> <argument>\n...\nDetails\nARCL allows you to create a task list, add tasks to the list, and then execute the task list. In doing so, you\ncan make use of the tasks that are available in MobilePlanner for building routes and macros.\nYou must first initialize a task list with the listStart command. This overwrites any list that has already star-\nted but has not been executed. For details, see listStart Command on page 149.\nUse the listAdd command with a task name as an argument, followed by any other task argument. This\nputs the task into the current list.\nWhen the list is complete, use listExecute to perform the series of tasks in the order they were entered.\nThe list can be executed only once. For details, see listExecute Command on page 147.\nExamples\nAs shown below, the list commands allow you to assemble and execute a sequence of tasks. In the fol-\nlowing example, the robot travels to the goal Lobby and when it gets there, says its name and then asks for\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 145\n\nlistAdd Command\nlistAdd Command\nAdds a task to the task list.\nSyntax\nlistAdd\n <task> <argument>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe listAdd arguments are described in the table below.\nParameters\nDefinition\ntask\nEnter the name of the task you want to add to the task list, such as\na goto task.\nargument\nEnter the appropriate arguments for the task you want the robot to\nperform. Using the goto task example, you would need to enter a\ngoal name, such as goto goal_1. Strings must be enclosed in double\nquotes.\nResponses\nThe command returns:\nAdded task <task> <argument>\n...\nDetails\nARCL allows you to create a task list, add tasks to the list, and then execute the task list. In doing so, you\ncan make use of the tasks that are available in MobilePlanner for building routes and macros.\nYou must first initialize a task list with the listStart command. This overwrites any list that has already star-\nted but has not been executed. For details, see listStart Command on page 149.\nUse the listAdd command with a task name as an argument, followed by any other task argument. This\nputs the task into the current list.\nWhen the list is complete, use listExecute to perform the series of tasks in the order they were entered.\nThe list can be executed only once. For details, see listExecute Command on page 147.\nExamples\nAs shown below, the list commands allow you to assemble and execute a sequence of tasks. In the fol-\nlowing example, the robot travels to the goal\n Lobby\n and when it gets there, says its name and then asks for\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 145",
    "Page 146": "listAdd Command\na name:\nliststart\nList being cleared\nMaking new list\nlistadd goto Lobby\nAdded task goto Lobby\nlistadd say \"My name is PatrolBot\"\nAdded task say \"My name is PatrolBot\"\nlistadd say \"What is your name?\"\nAdded task say \"What is your name?\"\nlistexecute\nExecuting list\nSuccessfully finished task list\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 146\n\nlistAdd Command\na name:\nliststart\nList being cleared\nMaking new list\nlistadd goto Lobby\nAdded task goto Lobby\nlistadd say \"My name is PatrolBot\"\nAdded task say \"My name is PatrolBot\"\nlistadd say \"What is your name?\"\nAdded task say \"What is your name?\"\nlistexecute\nExecuting list\nSuccessfully finished task list\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 146",
    "Page 147": "listExecute Command\nlistExecute Command\nUse listExecute to perform the series of tasks, with the order of first in, first out; the list can be executed\nonly once.\nSyntax\nlistExecute\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nExecuting list\nSuccessfully finished task list\nDetails\nARCL allows you to create a task list, add tasks to the list, and then execute the task list. In doing so, you\ncan make use of the tasks that are available in MobilePlanner for building routes and macros.\nYou must first initialize a task list with the listStart command. This overwrites any list that has already star-\nted but has not been executed. For details, see listStart Command on page 149.\nUse the listAdd command with a task name as an argument, followed by any other task argument. This\nputs the task into the current list. For details, see listAdd Command on page 145.\nWhen the list is complete, use listExecute to perform the series of tasks in the order they were entered.\nThe list can be executed only once.\nExamples\nAs shown below, the list commands allow you to assemble and execute a sequence of tasks. In the fol-\nlowing example, the robot travels to the goal Lobby and when it gets there, says its name and then asks for\na name:\nliststart\nList being cleared\nMaking new list\nlistadd goto Lobby\nAdded task goto Lobby\nlistadd say \"My name is PatrolBot\"\nAdded task say \"My name is PatrolBot\"\nlistadd say \"What is your name?\"\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 147\n\nlistExecute Command\nlistExecute Command\nUse listExecute to perform the series of tasks, with the order of first in, first out; the list can be executed\nonly once.\nSyntax\nlistExecute\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nExecuting list\nSuccessfully finished task list\nDetails\nARCL allows you to create a task list, add tasks to the list, and then execute the task list. In doing so, you\ncan make use of the tasks that are available in MobilePlanner for building routes and macros.\nYou must first initialize a task list with the listStart command. This overwrites any list that has already star-\nted but has not been executed. For details, see listStart Command on page 149.\nUse the listAdd command with a task name as an argument, followed by any other task argument. This\nputs the task into the current list. For details, see listAdd Command on page 145.\nWhen the list is complete, use listExecute to perform the series of tasks in the order they were entered.\nThe list can be executed only once.\nExamples\nAs shown below, the list commands allow you to assemble and execute a sequence of tasks. In the fol-\nlowing example, the robot travels to the goal\n Lobby\n and when it gets there, says its name and then asks for\na name:\nliststart\nList being cleared\nMaking new list\nlistadd goto Lobby\nAdded task goto Lobby\nlistadd say \"My name is PatrolBot\"\nAdded task say \"My name is PatrolBot\"\nlistadd say \"What is your name?\"\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 147",
    "Page 148": "listExecute Command\nAdded task say \"What is your name?\"\nlistexecute\nExecuting list\nSuccessfully finished task list\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 148\n\nlistExecute Command\nAdded task say \"What is your name?\"\nlistexecute\nExecuting list\nSuccessfully finished task list\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 148",
    "Page 149": "listStart Command\nlistStart Command\nInitializes a new task list for the robot to perform.\nSyntax\nlistStart\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nList being cleared\nMaking new list\nDetails\nARCL allows you to create a task list, add tasks to the list, and then execute the task list. In doing so, you\ncan make use of the tasks that are available in MobilePlanner for building routes and macros.\nYou must first initialize a task list with the listStart command. This overwrites any list that has already star-\nted but has not been executed.\nUse the listAdd command with a task name as an argument, followed by any other task argument. This\nputs the task into the current list. For details, see listAdd Command on page 145.\nWhen the list is complete, use listExecute to perform the series of tasks in the order they were entered.\nThe list can be executed only once. For details, see listExecute Command on page 147.\nExamples\nAs shown below, the list commands allow you to assemble and execute a sequence of tasks. In the fol-\nlowing example, the robot travels to the goal Lobby and when it gets there, says its name and then asks for\na name:\nliststart\nList being cleared\nMaking new list\nlistadd goto Lobby\nAdded task goto Lobby\nlistadd say \"My name is PatrolBot\"\nAdded task say \"My name is PatrolBot\"\nlistadd say \"What is your name?\"\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 149\n\nlistStart Command\nlistStart Command\nInitializes a new task list for the robot to perform.\nSyntax\nlistStart\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nList being cleared\nMaking new list\nDetails\nARCL allows you to create a task list, add tasks to the list, and then execute the task list. In doing so, you\ncan make use of the tasks that are available in MobilePlanner for building routes and macros.\nYou must first initialize a task list with the listStart command. This overwrites any list that has already star-\nted but has not been executed.\nUse the listAdd command with a task name as an argument, followed by any other task argument. This\nputs the task into the current list. For details, see listAdd Command on page 145.\nWhen the list is complete, use listExecute to perform the series of tasks in the order they were entered.\nThe list can be executed only once. For details, see listExecute Command on page 147.\nExamples\nAs shown below, the list commands allow you to assemble and execute a sequence of tasks. In the fol-\nlowing example, the robot travels to the goal\n Lobby\n and when it gets there, says its name and then asks for\na name:\nliststart\nList being cleared\nMaking new list\nlistadd goto Lobby\nAdded task goto Lobby\nlistadd say \"My name is PatrolBot\"\nAdded task say \"My name is PatrolBot\"\nlistadd say \"What is your name?\"\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 149",
    "Page 150": "listStart Command\nAdded task say \"What is your name?\"\nlistexecute\nExecuting list\nSuccessfully finished task list\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 150\n\nlistStart Command\nAdded task say \"What is your name?\"\nlistexecute\nExecuting list\nSuccessfully finished task list\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 150",
    "Page 151": "localizeToPoint Command\nlocalizeToPoint Command\nLocalizes to a given point, optionally with spread.\nSyntax\nlocalizeToPoint <X> <Y> <T> [xySpread] [thSpread]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nX\nEnter an integer (in mm) that represents the X coordinate where\nyou want the robot to localize.\nY\nEnter an integer (in mm) that represents the Y coordinate where\nyou want the robot to localize.\nT\nEnter an integer that represents the Theta value in degrees.\nxySpread\nEnter an optional integer (mm) that represents the XY spread.\nthSpread\nEnter an optional integer (degrees) that represents the Theta\nspread.\nResponses\nThe command returns:\nLocalized to point\nDetails\nLocalizes to a given point, optionally with XY and Theta spread.\nExamples\nThe following example localizes the robot to point XYT point 100 100 0:\nlocalizetopoint 100 100 0\nLocalized to point\nThe following example localizes the robot to the previous XYT point, but it includes an XY\u00a0spread of 10 mm\nand a Theta spread of 2 degrees:\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 151\n\nlocalizeToPoint Command\nlocalizeToPoint Command\nLocalizes to a given point, optionally with spread.\nSyntax\nlocalizeToPoint\n <X> <Y> <T> [xySpread] [thSpread]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nX\nEnter an integer (in mm) that represents the X coordinate where\nyou want the robot to localize.\nY\nEnter an integer (in mm) that represents the Y coordinate where\nyou want the robot to localize.\nT\nEnter an integer that represents the Theta value in degrees.\nxySpread\nEnter an optional integer (mm) that represents the XY spread.\nthSpread\nEnter an optional integer (degrees) that represents the Theta\nspread.\nResponses\nThe command returns:\nLocalized to point\nDetails\nLocalizes to a given point, optionally with XY and Theta spread.\nExamples\nThe following example localizes the robot to point XYT point 100 100 0:\nlocalizetopoint 100 100 0\nLocalized to point\nThe following example localizes the robot to the previous XYT point, but it includes an XY\u00a0spread of 10 mm\nand a Theta spread of 2 degrees:\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 151",
    "Page 152": "localizeToPoint Command\nlocalizetopoint 100 100 0 10 2\nLocalized to point\nRelated Commands\ngotoPoint Command on page 137\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 152\n\nlocalizeToPoint Command\nlocalizetopoint 100 100 0 10 2\nLocalized to point\nRelated Commands\ngotoPoint Command on page 137\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 152",
    "Page 153": "log Command\nlog Command\nLogs the message to the normal log file.\nSyntax\nlog <message> [level]\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nmessage\nEnter the string the will be the log message. If it contains any\nspaces, the string must be enclosed in double quotes.\nlevel\nEnter the optional level for the message: Terse, Normal, or Verbose:\nTerse = Used for critical errors\nNormal = Used for standard error information\nVerbose = Used for routine information that typically doesn't need\nto be seen.\nIf no level is specified, it defaults to the \"Normal\" level.\nResponses\nThe command returns:\nLogging '<message>' with level [level]\nDetails\nThe log command is used to add user-created messages to the system log file. There are three levels that\ncan be optionally specified for the message; if none is specified, the default level of \"Normal\" is used.\nExamples\nThe following example logs the message \"This is a test\" with no level specified:\nlog \"This is a test\" terse\nLogging 'This is a test' with level Normal\nThe following example logs the message \"This is a test\" with a level of \"Terse\":\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 153\n\nlog Command\nlog Command\nLogs the message to the normal log file.\nSyntax\nlog\n <message> [level]\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nmessage\nEnter the string the will be the log message. If it contains any\nspaces, the string must be enclosed in double quotes.\nlevel\nEnter the optional level for the message: Terse, Normal, or Verbose:\nTerse = Used for critical errors\nNormal = Used for standard error information\nVerbose = Used for routine information that typically doesn't need\nto be seen.\nIf no level is specified, it defaults to the \"Normal\" level.\nResponses\nThe command returns:\nLogging '<message>' with level [level]\nDetails\nThe log command is used to add user-created messages to the system log file. There are three levels that\ncan be optionally specified for the message; if none is specified, the default level of \"Normal\" is used.\nExamples\nThe following example logs the message \"This is a test\" with no level specified:\nlog \"This is a test\" terse\nLogging 'This is a test' with level Normal\nThe following example logs the message \"This is a test\" with a level of \"Terse\":\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 153",
    "Page 154": "log Command\nlog \"This is a test\" terse\nLogging 'This is a test' with level Terse\nRelated Commands\nfaultsGet Command on page 114\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 154\n\nlog Command\nlog \"This is a test\" terse\nLogging 'This is a test' with level Terse\nRelated Commands\nfaultsGet Command on page 114\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 154",
    "Page 155": "mapObjectInfo Command\nmapObjectInfo Command\nGets the information about a named map object.\nSyntax\nmapObjectInfo <name>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name of the map object.\nResponses\nThe command returns:\nMapObjectInfo: \"<name>\" <type> \"<description>\"\nMapObjectInfoParams: \"<name>\" <params>\nEnd of MapObjectInfo\nNote that if there are no parameters the MapObjectInfoParams will not be shown. The <params> will show\nall the parameters that are present; strings will be in quotes (if they contain spaces)\u2014those should be\nlooked for and removed. The <description> is what the user enters in the MobilePlanner software.\nDetails\nThe mapObjectInfo command displays information about a specific map object. See Examples for details.\nThere are four related commands that are used to get information about map objects: mapObjectTypeList,\nmapObjectTypeInfo, mapObjectList, and mapObjectInfo. These can be used in one of two ways:\nl Exploratory - by getting broad/general information and \"drilling down\" to the desired specific inform-\nation. For this method, you would:\nl Use mapObjectTypeList to show the map object <type>s.\nl Use mapObjectTypeInfo <type> to see if it has parameters or other information.\nl Use mapObjectList <type> to get the <name> of the map objects of that type.\nl Use mapObjectInfo <name> to get information about each map object (this is mostly for\nthose that have parameters).\nl Direct - by going after information on a specific map object. For this method, you would:\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 155\n\nmapObjectInfo Command\nmapObjectInfo Command\nGets the information about a named map object.\nSyntax\nmapObjectInfo\n <name>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name of the map object.\nResponses\nThe command returns:\nMapObjectInfo: \"<name>\" <type> \"<description>\"\nMapObjectInfoParams: \"<name>\" <params>\nEnd of MapObjectInfo\nNote that if there are no parameters the MapObjectInfoParams will not be shown. The <params> will show\nall the parameters that are present; strings will be in quotes (if they contain spaces)\u2014those should be\nlooked for and removed. The <description> is what the user enters in the MobilePlanner software.\nDetails\nThe mapObjectInfo command displays information about a specific map object. See Examples for details.\nThere are four related commands that are used to get information about map objects: mapObjectTypeList,\nmapObjectTypeInfo, mapObjectList, and mapObjectInfo. These can be used in one of two ways:\nl\n Exploratory - by getting broad/general information and \"drilling down\" to the desired specific inform-\nation. For this method, you would:\nl\n Use mapObjectTypeList to show the map object <type>s.\nl\n Use mapObjectTypeInfo <type> to see if it has parameters or other information.\nl\n Use mapObjectList <type> to get the <name> of the map objects of that type.\nl\n Use mapObjectInfo <name> to get information about each map object (this is mostly for\nthose that have parameters).\nl\n Direct - by going after information on a specific map object. For this method, you would:\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 155",
    "Page 156": "mapObjectInfo Command\nl Use mapObjectInfo <name> to find out its <type> and its parameters.\nl Use mapObjectTypeInfo <type> to see what parameters it has and what they mean. This\nstep isn't needed if you already know what the parameters mean. However, it can be useful\nfor verifying ordering and other details.\nFor more details on these commands, see the links in the Related Commands section.\nExamples\nThe following example returns information about the map object named \"Pre-\nferredDirectionRightSingle1\":\nmapobjectinfo PreferredDirectionRightSingle1\nThe command returns:\nMapObjectInfo: \"PreferredDirectionRightSingle1\" DriveOnRightSector \"\"\nMapObjectInfoParams: \"PreferredDirectionRightSingle1\" true 300\nEnd of MapObjectInfo\nRelated Commands\nmapObjectList Command on page 157\nmapObjectTypeInfo Command on page 159\nmapObjectTypeList Command on page 161\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 156\n\nmapObjectInfo Command\nl\n Use mapObjectInfo <name> to find out its <type> and its parameters.\nl\n Use mapObjectTypeInfo <type> to see what parameters it has and what they mean. This\nstep isn't needed if you already know what the parameters mean. However, it can be useful\nfor verifying ordering and other details.\nFor more details on these commands, see the links in the Related Commands section.\nExamples\nThe following example returns information about the map object named \"Pre-\nferredDirectionRightSingle1\":\nmapobjectinfo PreferredDirectionRightSingle1\nThe command returns:\nMapObjectInfo: \"PreferredDirectionRightSingle1\" DriveOnRightSector \"\"\nMapObjectInfoParams: \"PreferredDirectionRightSingle1\" true 300\nEnd of MapObjectInfo\nRelated Commands\nmapObjectList Command on page 157\nmapObjectTypeInfo Command on page 159\nmapObjectTypeList Command on page 161\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 156",
    "Page 157": "mapObjectList Command\nmapObjectList Command\nGets the names of map objects of a given type.\nSyntax\nmapObjectList <type>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ntype\nEnter a string that represents the type of map objects you want to\nlist. The string must not contain spaces. The string must not be\nenclosed in double quotes.\nThis is a text string; it is case-sensitive.\nResponses\nThe command returns:\nMapObjectList: \"<name>\" <type>\nMapObjectList: \"<name>\" <type>\nEnd of MapObjectList\nDetails\nThe mapObjectList command displays a list (by name) of the map objects of the specified type. See\nExamples for details.\nThere are four related commands that are used to get information about map objects: mapObjectTypeList,\nmapObjectTypeInfo, mapObjectList, and mapObjectInfo. These can be used in one of two ways:\nl Exploratory - by getting broad/general information and \"drilling down\" to the desired specific inform-\nation. For this method, you would:\nl Use mapObjectTypeList to show the map object <type>s.\nl Use mapObjectTypeInfo <type> to see if it has parameters or other information.\nl Use mapObjectList <type> to get the <name> of the map objects of that type.\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 157\n\nmapObjectList Command\nmapObjectList Command\nGets the names of map objects of a given type.\nSyntax\nmapObjectList\n <type>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ntype\nEnter a string that represents the type of map objects you want to\nlist. The string must not contain spaces. The string must not be\nenclosed in double quotes.\nThis is a text string; it is case-sensitive.\nResponses\nThe command returns:\nMapObjectList: \"<name>\" <type>\nMapObjectList: \"<name>\" <type>\nEnd of MapObjectList\nDetails\nThe mapObjectList command displays a list (by name) of the map objects of the specified type. See\nExamples for details.\nThere are four related commands that are used to get information about map objects: mapObjectTypeList,\nmapObjectTypeInfo, mapObjectList, and mapObjectInfo. These can be used in one of two ways:\nl\n Exploratory - by getting broad/general information and \"drilling down\" to the desired specific inform-\nation. For this method, you would:\nl\n Use mapObjectTypeList to show the map object <type>s.\nl\n Use mapObjectTypeInfo <type> to see if it has parameters or other information.\nl\n Use mapObjectList <type> to get the <name> of the map objects of that type.\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 157",
    "Page 158": "mapObjectList Command\nl Use mapObjectInfo <name> to get information about each map object (this is mostly for\nthose that have parameters).\nl Direct - by going after information on a specific map object. For this method, you would:\nl Use mapObjectInfo <name> to find out its <type> and its parameters.\nl Use mapObjectTypeInfo <type> to see what parameters it has and what they mean. This\nstep isn't needed if you already know what the parameters mean. However, it can be useful\nfor verifying ordering and other details.\nFor more details on these commands, see the links in the Related Commands section.\nExamples\nThe following example lists the names of the \"DriveOnRightSector\" object types in the map:\nmapobjectlist driveonrightsector\nThe command returns:\nMapObjectList: \"PreferredDirectionRightSingle1\" DriveOnRightSector\nMapObjectList: \"PreferredDirectionRightSingle2\" DriveOnRightSector\nEnd of MapObjectList\nRelated Commands\nmapObjectInfo Command on page 155\nmapObjectTypeInfo Command on page 159\nmapObjectTypeList Command on page 161\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 158\n\nmapObjectList Command\nl\n Use mapObjectInfo <name> to get information about each map object (this is mostly for\nthose that have parameters).\nl\n Direct - by going after information on a specific map object. For this method, you would:\nl\n Use mapObjectInfo <name> to find out its <type> and its parameters.\nl\n Use mapObjectTypeInfo <type> to see what parameters it has and what they mean. This\nstep isn't needed if you already know what the parameters mean. However, it can be useful\nfor verifying ordering and other details.\nFor more details on these commands, see the links in the Related Commands section.\nExamples\nThe following example lists the names of the \"DriveOnRightSector\" object types in the map:\nmapobjectlist driveonrightsector\nThe command returns:\nMapObjectList: \"PreferredDirectionRightSingle1\" DriveOnRightSector\nMapObjectList: \"PreferredDirectionRightSingle2\" DriveOnRightSector\nEnd of MapObjectList\nRelated Commands\nmapObjectInfo Command on page 155\nmapObjectTypeInfo Command on page 159\nmapObjectTypeList Command on page 161\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 158",
    "Page 159": "mapObjectTypeInfo Command\nmapObjectTypeInfo Command\nGets detailed information about a particular type of map object.\nSyntax\nmapObjectTypeInfo <type>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ntype\nEnter a string that represents the type of objects. For example,\nSlowSector. The string must not contain spaces. The string must\nnot be enclosed in double quotes.\nResponses\nThe command returns:\nMapObjectTypeList: <type> <metaType> \"<label>\" \"<desc>\"\nMapObjectTypeInfoArgument: <argName> <argType> <argImportance> \"<argDescription>\"\nMapObjectTypeInfoArgument: <argName> <argType> <argImportance> \"<argDescription>\"\nMapObjectTypeInfoArgument: <argName> <argType> <argImportance> \"<argDescription>\"\nEnd of MapObjectTypeInfo\nDetails\nThe mapObjectTypeInfo command displays detailed information about a specified type of map object. See\nExamples for details.\nThere are four related commands that are used to get information about map objects: mapObjectTypeList,\nmapObjectTypeInfo, mapObjectList, and mapObjectInfo. These can be used in one of two ways:\nl Exploratory - by getting broad/general information and \"drilling down\" to the desired specific inform-\nation. For this method, you would:\nl Use mapObjectTypeList to show the map object <type>s.\nl Use mapObjectTypeInfo <type> to see if it has parameters or other information.\nl Use mapObjectList <type> to get the <name> of the map objects of that type.\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 159\n\nmapObjectTypeInfo Command\nmapObjectTypeInfo Command\nGets detailed information about a particular type of map object.\nSyntax\nmapObjectTypeInfo\n <type>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ntype\nEnter a string that represents the type of objects. For example,\nSlowSector. The string must not contain spaces. The string must\nnot be enclosed in double quotes.\nResponses\nThe command returns:\nMapObjectTypeList: <type> <metaType> \"<label>\" \"<desc>\"\nMapObjectTypeInfoArgument: <argName> <argType> <argImportance> \"<argDescription>\"\nMapObjectTypeInfoArgument: <argName> <argType> <argImportance> \"<argDescription>\"\nMapObjectTypeInfoArgument: <argName> <argType> <argImportance> \"<argDescription>\"\nEnd of MapObjectTypeInfo\nDetails\nThe mapObjectTypeInfo command displays detailed information about a specified type of map object. See\nExamples for details.\nThere are four related commands that are used to get information about map objects: mapObjectTypeList,\nmapObjectTypeInfo, mapObjectList, and mapObjectInfo. These can be used in one of two ways:\nl\n Exploratory - by getting broad/general information and \"drilling down\" to the desired specific inform-\nation. For this method, you would:\nl\n Use mapObjectTypeList to show the map object <type>s.\nl\n Use mapObjectTypeInfo <type> to see if it has parameters or other information.\nl\n Use mapObjectList <type> to get the <name> of the map objects of that type.\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 159",
    "Page 160": "mapObjectTypeInfo Command\nl Use mapObjectInfo <name> to get information about each map object (this is mostly for\nthose that have parameters).\nl Direct - by going after information on a specific map object. For this method, you would:\nl Use mapObjectInfo <name> to find out its <type> and its parameters.\nl Use mapObjectTypeInfo <type> to see what parameters it has and what they mean. This\nstep isn't needed if you already know what the parameters mean. However, it can be useful\nfor verifying ordering and other details.\nFor more details on these commands, see the links in the Related Commands section.\nExamples\nThe following example displays detailed information about the \"DriveOnRightSector\" object type:\nmapObjectTypeInfo DriveOnRightSector\nThe command returns:\nMapObjectTypeList: DriveOnRightSector SectorType \"PreferredDirectionRightSingle\" \"One\nWay Drive on Right\"\nMapObjectTypeInfoArgument: UseDefaultSideOffset bool Normal \"True to use the default\nside offset of 'Path Planning Settings'->'PreferredDirectionSideOffset', false to use\nthe PreferredDirectionSideOffset parameter of this object.\"\nMapObjectTypeInfoArgument: PreferredDirectionSideOffset int Normal \"The side offset for\nthis sector, which decides how far from the edge of the sector the robot will try to\ndrive. Setting this too low may cause the robot to pop out of the sector if it can get\nto an open area.\"\nEnd of MapObjectTypeInfo\nRelated Commands\nmapObjectInfo Command on page 155\nmapObjectList Command on page 157\nmapObjectTypeList Command on page 161\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 160\n\nmapObjectTypeInfo Command\nl\n Use mapObjectInfo <name> to get information about each map object (this is mostly for\nthose that have parameters).\nl\n Direct - by going after information on a specific map object. For this method, you would:\nl\n Use mapObjectInfo <name> to find out its <type> and its parameters.\nl\n Use mapObjectTypeInfo <type> to see what parameters it has and what they mean. This\nstep isn't needed if you already know what the parameters mean. However, it can be useful\nfor verifying ordering and other details.\nFor more details on these commands, see the links in the Related Commands section.\nExamples\nThe following example displays detailed information about the \"DriveOnRightSector\" object type:\nmapObjectTypeInfo DriveOnRightSector\nThe command returns:\nMapObjectTypeList: DriveOnRightSector SectorType \"PreferredDirectionRightSingle\" \"One\nWay Drive on Right\"\nMapObjectTypeInfoArgument: UseDefaultSideOffset bool Normal \"True to use the default\nside offset of 'Path Planning Settings'->'PreferredDirectionSideOffset', false to use\nthe PreferredDirectionSideOffset parameter of this object.\"\nMapObjectTypeInfoArgument: PreferredDirectionSideOffset int Normal \"The side offset for\nthis sector, which decides how far from the edge of the sector the robot will try to\ndrive. Setting this too low may cause the robot to pop out of the sector if it can get\nto an open area.\"\nEnd of MapObjectTypeInfo\nRelated Commands\nmapObjectInfo Command on page 155\nmapObjectList Command on page 157\nmapObjectTypeList Command on page 161\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 160",
    "Page 161": "mapObjectTypeList Command\nmapObjectTypeList Command\nGets a list of the types of map objects in the map.\nSyntax\nmapObjectTypeList\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nMapObjectTypeList: <typeName> <metaType>\nMapObjectTypeList: <typeName> <metaType>\nEnd of MapObjectTypeList\nDetails\nThe mapObjectInfo command displays a list of the various types of map objects contained in the current\nmap. See Examples for details.\nThere are four related commands that are used to get information about map objects: mapObjectTypeList,\nmapObjectTypeInfo, mapObjectList, and mapObjectInfo. These can be used in one of two ways:\nl Exploratory - by getting broad/general information and \"drilling down\" to the desired specific inform-\nation. For this method, you would:\nl Use mapObjectTypeList to show the map object <type>s.\nl Use mapObjectTypeInfo <type> to see if it has parameters or other information.\nl Use mapObjectList <type> to get the <name> of the map objects of that type.\nl Use mapObjectInfo <name> to get information about each map object (this is mostly for\nthose that have parameters).\nl Direct - by going after information on a specific map object. For this method, you would:\nl Use mapObjectInfo <name> to find out its <type> and its parameters.\nl Use mapObjectTypeInfo <type> to see what parameters it has and what they mean. This\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 161\n\nmapObjectTypeList Command\nmapObjectTypeList Command\nGets a list of the types of map objects in the map.\nSyntax\nmapObjectTypeList\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nMapObjectTypeList: <typeName> <metaType>\nMapObjectTypeList: <typeName> <metaType>\nEnd of MapObjectTypeList\nDetails\nThe mapObjectInfo command displays a list of the various types of map objects contained in the current\nmap. See Examples for details.\nThere are four related commands that are used to get information about map objects: mapObjectTypeList,\nmapObjectTypeInfo, mapObjectList, and mapObjectInfo. These can be used in one of two ways:\nl\n Exploratory - by getting broad/general information and \"drilling down\" to the desired specific inform-\nation. For this method, you would:\nl\n Use mapObjectTypeList to show the map object <type>s.\nl\n Use mapObjectTypeInfo <type> to see if it has parameters or other information.\nl\n Use mapObjectList <type> to get the <name> of the map objects of that type.\nl\n Use mapObjectInfo <name> to get information about each map object (this is mostly for\nthose that have parameters).\nl\n Direct - by going after information on a specific map object. For this method, you would:\nl\n Use mapObjectInfo <name> to find out its <type> and its parameters.\nl\n Use mapObjectTypeInfo <type> to see what parameters it has and what they mean. This\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 161",
    "Page 162": "mapObjectTypeList Command\nstep isn't needed if you already know what the parameters mean. However, it can be useful\nfor verifying ordering and other details.\nFor more details on these commands, see the links in the Related Commands section.\nExamples\nThe following example lists the types of map objects in the current map:\nmapObjectTypeList\nThe command returns:\nMapObjectTypeList: DriveOnRightSector SectorType\nMapObjectTypeList: FastSector SectorType\nMapObjectTypeList: LocalPathPlanningBehaviorSector SectorType\nMapObjectTypeList: MovementParametersSector SectorType\nEnd of MapObjectTypeList\nRelated Commands\nmapObjectInfo Command on page 155\nmapObjectList Command on page 157\nmapObjectTypeInfo Command on page 159\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 162\n\nmapObjectTypeList Command\nstep isn't needed if you already know what the parameters mean. However, it can be useful\nfor verifying ordering and other details.\nFor more details on these commands, see the links in the Related Commands section.\nExamples\nThe following example lists the types of map objects in the current map:\nmapObjectTypeList\nThe command returns:\nMapObjectTypeList: DriveOnRightSector SectorType\nMapObjectTypeList: FastSector SectorType\nMapObjectTypeList: LocalPathPlanningBehaviorSector SectorType\nMapObjectTypeList: MovementParametersSector SectorType\nEnd of MapObjectTypeList\nRelated Commands\nmapObjectInfo Command on page 155\nmapObjectList Command on page 157\nmapObjectTypeInfo Command on page 159\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 162",
    "Page 163": "newConfigParam Command\nnewConfigParam Command\nAdds a custom parameter to ARAM\u2019s configuration, which can then be managed through ARCL or\nMobilePlanner.\nSyntax\nnewConfigParam <section> <name> <description> <priority_level> <type> <default_value> <min>\n<max> <DisplayHint>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nThe parameter is not persistent through an ARAM restart; however, its last-set value persists.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the Configuration > Robot Interface tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nsection\nEnter the name of the section where you want to add a new con-\nfiguration parameter. This is a text string and is case-sensitive.\nname\nEnter the name of the new configuration parameter. This is a text\nstring and is case-sensitive.\ndescription\nEnter a description of the new configuration parameter. This is a\ntext string with quotes around it.\npriority_level\nEnter the priority level of the new parameter: Basic, Intermediate,\nAdvanced, Expert or Factory.\ntype\nEnter the type of parameter: integer, double, string, boolean or sep-\narator.\ndefault_value\nEnter the default value for the parameter.\nmin\nEnter a minimum value, if applicable, otherwise enter \"None\".\nmax\nEnter a maximum value, if applicable, otherwise enter \"None\".\nDisplayHint\nEnter a display hint for the new configuration parameter. This is a\ntext string with quotes around it. If you do not want to use a display\nhint, enter \"None\".\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 163\n\nnewConfigParam Command\nnewConfigParam Command\nAdds a custom parameter to ARAM\u2019s configuration, which can then be managed through ARCL or\nMobilePlanner.\nSyntax\nnewConfigParam\n <section> <name> <description> <priority_level> <type> <default_value> <min>\n<max> <DisplayHint>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nThe parameter is not persistent through an ARAM restart; however, its last-set value persists.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the\n Configuration > Robot Interface\n tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nsection\nEnter the name of the section where you want to add a new con-\nfiguration parameter. This is a text string and is case-sensitive.\nname\nEnter the name of the new configuration parameter. This is a text\nstring and is case-sensitive.\ndescription\nEnter a description of the new configuration parameter. This is a\ntext string with quotes around it.\npriority_level\nEnter the priority level of the new parameter: Basic, Intermediate,\nAdvanced, Expert or Factory.\ntype\nEnter the type of parameter: integer, double, string, boolean or sep-\narator.\ndefault_value\nEnter the default value for the parameter.\nmin\nEnter a minimum value, if applicable, otherwise enter \"None\".\nmax\nEnter a maximum value, if applicable, otherwise enter \"None\".\nDisplayHint\nEnter a display hint for the new configuration parameter. This is a\ntext string with quotes around it. If you do not want to use a display\nhint, enter \"None\".\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 163",
    "Page 164": "newConfigParam Command\nResponses\nThe command returns:\nWill add new param '<name>' to section '<section>'\nDetails\nThe newConfigParam command adds a custom parameter to ARAM\u2019s configuration. After the parameter is\nadded, it can be managed through ARCL or MobilePlanner. For details on managing parameters in\nMobilePlanner, see the Adept Motivity User's Guide.\nExamples\nThe following example adds a new configuration parameter \"newparam\" to the section \"Log\":\nnewconfigparam Log newparam \"this is a test param\" Basic string \"a test\" none none \"a\nhint\"\nWill add new param 'newparam' to section 'Log'\nYou can see the new parameter by entering the getConfigSectionInfo command, as follows:\ngetconfigsectioninfo log\nGetConfigSectionInfo: \"\" \"CENTRAL_SECTION\"\nGetConfigSectionParamInfo: String newparam Basic None None \"this is a test param\" \"a\nhint\"\nEndOfGetConfigSectionInfo\nRelated Commands\nconfigAdd Command on page 85\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 164\n\nnewConfigParam Command\nResponses\nThe command returns:\nWill add new param '<name>' to section '<section>'\nDetails\nThe newConfigParam command adds a custom parameter to ARAM\u2019s configuration. After the parameter is\nadded, it can be managed through ARCL or MobilePlanner. For details on managing parameters in\nMobilePlanner, see the\n Adept Motivity User's Guide\n.\nExamples\nThe following example adds a new configuration parameter \"newparam\" to the section \"Log\":\nnewconfigparam Log newparam \"this is a test param\" Basic string \"a test\" none none \"a\nhint\"\nWill add new param 'newparam' to section 'Log'\nYou can see the new parameter by entering the getConfigSectionInfo command, as follows:\ngetconfigsectioninfo log\nGetConfigSectionInfo: \"\" \"CENTRAL_SECTION\"\nGetConfigSectionParamInfo: String newparam Basic None None \"this is a test param\" \"a\nhint\"\nEndOfGetConfigSectionInfo\nRelated Commands\nconfigAdd Command on page 85\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 164",
    "Page 165": "newConfigSectionComment Command\nnewConfigSectionComment Command\nAdds a comment to a section.\nSyntax\nnewConfigSectionComment <section> <comment>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the Configuration > Robot Interface tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nsection\nEnter the name of the section from which you want to see a list of\nparameter values. This is a text string and is case-sensitive.\ncomment\nEnter a description of the new configuration parameter. This is a\ntext string; quotes around it are optional.\nResponses\nThe command returns:\nWill add config comment '<comment>' to section '<section>'\nDetails\nThe newConfigSectionComment command allows you to enter a comment to display above the section\u2019s\nparameter list in the MobilePlanner configuration dialog.\nExamples\nThis example adds the comment \"my comments\" to the section \"Log\":\nnewConfigSectionComment Log \"my comments\"\nWill add config comment 'my comments' to section 'Log'\nYou can see the added comment by entering the getConfigSectionInfo command, as follows:\ngetconfigsectioninfo log\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 165\n\nnewConfigSectionComment Command\nnewConfigSectionComment Command\nAdds a comment to a section.\nSyntax\nnewConfigSectionComment\n <section> <comment>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nARAM Settings\nYou have to explicitly enable this feature in MobilePlanner by checking and applying the ArclConfig para-\nmeter in the ARCL\u00a0server setup section of the\n Configuration > Robot Interface\n tab. For more inform-\nation, see Set ARCL Parameters in MobilePlanner on page 30. Changes do not take effect until: the robot is\nidle and stationary; the Configuration changes are saved.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nsection\nEnter the name of the section from which you want to see a list of\nparameter values. This is a text string and is case-sensitive.\ncomment\nEnter a description of the new configuration parameter. This is a\ntext string; quotes around it are optional.\nResponses\nThe command returns:\nWill add config comment '<comment>' to section '<section>'\nDetails\nThe newConfigSectionComment command allows you to enter a comment to display above the section\u2019s\nparameter list in the MobilePlanner configuration dialog.\nExamples\nThis example adds the comment \"my comments\" to the section \"Log\":\nnewConfigSectionComment Log \"my comments\"\nWill add config comment 'my comments' to section 'Log'\nYou can see the added comment by entering the getConfigSectionInfo command, as follows:\ngetconfigsectioninfo log\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 165",
    "Page 166": "newConfigSectionComment Command\nGetConfigSectionInfo: \"my comments\" \"CENTRAL_SECTION\"\nGetConfigSectionParamInfo: String newparam Basic None None \"this is a test param\" \"a\nhint\"\nEndOfGetConfigSectionInfo\nRelated Commands\nconfigAdd Command on page 85\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 166\n\nnewConfigSectionComment Command\nGetConfigSectionInfo: \"my comments\" \"CENTRAL_SECTION\"\nGetConfigSectionParamInfo: String newparam Basic None None \"this is a test param\" \"a\nhint\"\nEndOfGetConfigSectionInfo\nRelated Commands\nconfigAdd Command on page 85\nconfigParse Command on page 87\nconfigStart Command on page 89\ngetConfigSectionInfo Command on page 117\ngetConfigSectionList Command on page 119\ngetConfigSectionValues Command on page 121\nnewConfigParam Command on page 163\nnewConfigSectionComment Command on page 165\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 166",
    "Page 167": "odometer Command\nodometer Command\nShows the robot trip odometer readings.\nSyntax\nodometer\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nOdometer: <distance> mm <heading> deg <time> sec\nDetails\nHow far and how long the robot has traveled since ARAM startup or reset. The odometer is reset with the\nodometerReset command. For details, see odometerReset Command on page 168.\nExamples\nTo view the robot odometer readings, enter the following:\nodometer\nThe command returns:\nOdometer: 8281 mm 210 deg 469 sec\nRelated Commands\nodometerReset Command on page 168\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 167\n\nodometer Command\nodometer Command\nShows the robot trip odometer readings.\nSyntax\nodometer\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nOdometer: <distance> mm <heading> deg <time> sec\nDetails\nHow far and how long the robot has traveled since ARAM startup or reset. The odometer is reset with the\nodometerReset command. For details, see odometerReset Command on page 168.\nExamples\nTo view the robot odometer readings, enter the following:\nodometer\nThe command returns:\nOdometer: 8281 mm 210 deg 469 sec\nRelated Commands\nodometerReset Command on page 168\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 167",
    "Page 168": "odometerReset Command\nodometerReset Command\nResets the robot trip odometer.\nSyntax\nodometerReset\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nReset odometer\nDetails\nThe odometerReset command resets distance, heading and time odometer values to 0.\nExamples\nTo reset the robot odometer, enter the following:\nodometerreset\nThe command returns:\nReset odometer\nRelated Commands\nodometer Command on page 167\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 168\n\nodometerReset Command\nodometerReset Command\nResets the robot trip odometer.\nSyntax\nodometerReset\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nReset odometer\nDetails\nThe odometerReset command resets distance, heading and time odometer values to 0.\nExamples\nTo reset the robot odometer, enter the following:\nodometerreset\nThe command returns:\nReset odometer\nRelated Commands\nodometer Command on page 167\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 168",
    "Page 169": "oneLineStatus Command\noneLineStatus Command\nShows the status of the robot on one line of text.\nSyntax\noneLineStatus\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nStatus: Arrived at <goal> BatteryVoltage: <volts_dc> Location: <X_mm> <Y_mm> <heading>\nTemperature: <degrees>\u00a0\u00a0\u00a0\u00a0\nDetails\nThe oneLineStatus command returns the robot\u2019s operating state, battery voltage and position status as a\nsingle line of text. To get a multi-line status of the robot, use the status command. For details, see status\nCommand on page 276.\nExamples\nTo get a one-line status of the robot, enter the following:\nonelinestatus\nThe command returns:\nStatus: Arrived at g_24 BatteryVoltage: 13.0 Location: 7038 -8342 0 Temperature: -127\nRelated Commands\ngetDateTime Command on page 123\ngetGoals Command on page 124\ngetInfo Command on page 126\ngetInfoList Command on page 128\ngetPayload\u00a0Command on page 132\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 169\n\noneLineStatus Command\noneLineStatus Command\nShows the status of the robot on one line of text.\nSyntax\noneLineStatus\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nStatus: Arrived at <goal> BatteryVoltage: <volts_dc> Location: <X_mm> <Y_mm> <heading>\nTemperature: <degrees>\u00a0\u00a0\u00a0\u00a0\nDetails\nThe oneLineStatus command returns the robot\u2019s operating state, battery voltage and position status as a\nsingle line of text. To get a multi-line status of the robot, use the status command. For details, see status\nCommand on page 276.\nExamples\nTo get a one-line status of the robot, enter the following:\nonelinestatus\nThe command returns:\nStatus: Arrived at g_24 BatteryVoltage: 13.0 Location: 7038 -8342 0 Temperature: -127\nRelated Commands\ngetDateTime Command on page 123\ngetGoals Command on page 124\ngetInfo Command on page 126\ngetInfoList Command on page 128\ngetPayload\u00a0Command on page 132\nAdept ARCL Reference Guide, Updated: 9:26:52 AM\nPage 169",
    "Page 170": "oneLineStatus Command\ngetRoutes Command on page 134\nqueryDockStatus Command on page 203\nqueryMotors Command on page 207\nstatus Command on page 276\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 170\n\noneLineStatus Command\ngetRoutes Command on page 134\nqueryDockStatus Command on page 203\nqueryMotors Command on page 207\nstatus Command on page 276\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 170",
    "Page 171": "outputList Command\noutputList Command\nLists the named digital outputs.\nSyntax\noutputList\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nOutput: <name>\n...\nEnd of OutputList\nDetails\nThe outputList command returns the list of digital outputs. To get the status of a particular digital output,\nuse the outputQuery command. For details, see outputQuery Command on page 175.\nExamples\nTo get the list of digital outputs, enter the following:\noutputlist\nThe command returns:\nOutputList: out_one\nOutputList: out_two\nEnd of OutputList\nRelated Commands\ninputList Command on page 142\ninputQuery Command on page 144\noutputOff Command on page 173\noutputOn Command on page 174\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 171\n\noutputList Command\noutputList Command\nLists the named digital outputs.\nSyntax\noutputList\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nOutput: <name>\n...\nEnd of OutputList\nDetails\nThe outputList command returns the list of digital outputs. To get the status of a particular digital output,\nuse the outputQuery command. For details, see outputQuery Command on page 175.\nExamples\nTo get the list of digital outputs, enter the following:\noutputlist\nThe command returns:\nOutputList: out_one\nOutputList: out_two\nEnd of OutputList\nRelated Commands\ninputList Command on page 142\ninputQuery Command on page 144\noutputOff Command on page 173\noutputOn Command on page 174\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 171",
    "Page 172": "outputList Command\noutputQuery Command on page 175\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 172\n\noutputList Command\noutputQuery Command on page 175\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 172",
    "Page 173": "outputOff Command\noutputOff Command\nTurns off the named digital output.\nSyntax\noutputOff <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the output to turn off.\nResponses\nThe command returns:\nOutput: <name> <status>\nDetails\nThe outputOff command turns off the named digital output. To get a list of the digital outputs, use the out-\nputList command. For details, see outputList Command on page 171.\nExamples\nTo turn off digital output named \"out_one\", enter the following:\noutputoff out_one\nThe command returns:\nOutput: out_one off\nRelated Commands\ninputList Command on page 142\ninputQuery Command on page 144\noutputList Command on page 171\noutputOn Command on page 174\noutputQuery Command on page 175\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 173\n\noutputOff Command\noutputOff Command\nTurns off the named digital output.\nSyntax\noutputOff\n <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the output to turn off.\nResponses\nThe command returns:\nOutput: <name> <status>\nDetails\nThe outputOff command turns off the named digital output. To get a list of the digital outputs, use the out-\nputList command. For details, see outputList Command on page 171.\nExamples\nTo turn off digital output named \"out_one\", enter the following:\noutputoff out_one\nThe command returns:\nOutput: out_one off\nRelated Commands\ninputList Command on page 142\ninputQuery Command on page 144\noutputList Command on page 171\noutputOn Command on page 174\noutputQuery Command on page 175\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 173",
    "Page 174": "outputOn Command\noutputOn Command\nTurns on the named digital output.\nSyntax\noutputOn <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the output to turn on.\nResponses\nThe command returns:\nOutput: <name> <status>\nDetails\nThe outputOn command turns on the named digital output. To get a list of the digital outputs, use the out-\nputList command. For details, see outputList Command on page 171.\nExamples\nTo turn on digital output named \"out_one\", enter the following:\noutputon out_one\nThe command returns:\nOutput: out_one on\nRelated Commands\ninputList Command on page 142\ninputQuery Command on page 144\noutputList Command on page 171\noutputOff Command on page 173\noutputQuery Command on page 175\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 174\n\noutputOn Command\noutputOn Command\nTurns on the named digital output.\nSyntax\noutputOn\n <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the output to turn on.\nResponses\nThe command returns:\nOutput: <name> <status>\nDetails\nThe outputOn command turns on the named digital output. To get a list of the digital outputs, use the out-\nputList command. For details, see outputList Command on page 171.\nExamples\nTo turn on digital output named \"out_one\", enter the following:\noutputon out_one\nThe command returns:\nOutput: out_one on\nRelated Commands\ninputList Command on page 142\ninputQuery Command on page 144\noutputList Command on page 171\noutputOff Command on page 173\noutputQuery Command on page 175\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 174",
    "Page 175": "outputQuery Command\noutputQuery Command\nQueries the state of a named output.\nSyntax\noutputQuery <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the output to query.\nResponses\nThe command returns:\nOutput: <name> <status>\nDetails\nThe outputQuery command returns the status of the named digital output. To get a list of the digital out-\nputs, use the outputList command. For details, see outputList Command on page 171.\nExamples\nTo get the status of digital output named \"out_one\", enter the following:\noutputquery out_one\nThe command returns:\nOutput: out_one off\nRelated Commands\ninputList Command on page 142\ninputQuery Command on page 144\noutputList Command on page 171\noutputOff Command on page 173\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 175\n\noutputQuery Command\noutputQuery Command\nQueries the state of a named output.\nSyntax\noutputQuery\n <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the output to query.\nResponses\nThe command returns:\nOutput: <name> <status>\nDetails\nThe outputQuery command returns the status of the named digital output. To get a list of the digital out-\nputs, use the outputList command. For details, see outputList Command on page 171.\nExamples\nTo get the status of digital output named \"out_one\", enter the following:\noutputquery out_one\nThe command returns:\nOutput: out_one off\nRelated Commands\ninputList Command on page 142\ninputQuery Command on page 144\noutputList Command on page 171\noutputOff Command on page 173\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 175",
    "Page 176": "outputQuery Command\noutputOn Command on page 174\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 176\n\noutputQuery Command\noutputOn Command on page 174\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 176",
    "Page 177": "patrol Command\npatrol Command\nInitiates continuous patrol of the named route.\nSyntax\npatrol <route_name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nroute_name\nEnter the name of the route you want the robot to patrol.\nResponses\nThe command returns:\nPatrolling route <route_name>\nDetails\nThe patrol command instructs the robot to perform a continuous patrol of the named route. (\"Patrol\"\nmeans to stop at all the route goals in the order on the route list.) The robot will keep patrolling until a stop\ncommand is entered. For details, see stop Command on page 278.\nExamples\nThe following example starts a patrol of the route named \"test\" and then interrupts the patrol with a stop\ncommand.\npatrol test\nPatrolling route test\nstop\nInterrupted: Patrolling route test\nStopping\nStopped\nRelated Commands\npatrolOnce Command on page 179\npatrolResume Command on page 181\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 177\n\npatrol Command\npatrol Command\nInitiates continuous patrol of the named route.\nSyntax\npatrol\n <route_name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nroute_name\nEnter the name of the route you want the robot to patrol.\nResponses\nThe command returns:\nPatrolling route <route_name>\nDetails\nThe patrol command instructs the robot to perform a continuous patrol of the named route. (\"Patrol\"\nmeans to stop at all the route goals in the order on the route list.) The robot will keep patrolling until a stop\ncommand is entered. For details, see stop Command on page 278.\nExamples\nThe following example starts a patrol of the route named \"test\" and then interrupts the patrol with a stop\ncommand.\npatrol test\nPatrolling route test\nstop\nInterrupted: Patrolling route test\nStopping\nStopped\nRelated Commands\npatrolOnce Command on page 179\npatrolResume Command on page 181\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 177",
    "Page 178": "patrol Command\nstop Command on page 278\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 178\n\npatrol Command\nstop Command on page 278\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 178",
    "Page 179": "patrolOnce Command\npatrolOnce Command\nPatrol the named route one time.\nSyntax\npatrolOnce <route_name> [index]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nroute_name\nEnter the name of the route you want the robot to patrol.\nindex\nEnter an optional index value. No value or 0 instructs the robot to\nstart at the beginning of the route.\nResponses\nThe command returns:\nPatrolling route <route_name> once\nFinished patrolling route <route_name>\nDetails\nThe patrolOnce command instructs the robot to patrol the named route one time. (\"Patrol\" means to stop\nat all the route goals in the order on the route list.) The patrol starts from the first goal on the list or from\nthe specified indexed goal.\nExamples\nTo command the robot to patrol the route \"test\", enter:\npatrolonce test\nThe command returns:\nPatrolling route test once\nFinished patrolling route test\nRelated Commands\npatrol Command on page 177\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 179\n\npatrolOnce Command\npatrolOnce Command\nPatrol the named route one time.\nSyntax\npatrolOnce\n <route_name> [index]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nroute_name\nEnter the name of the route you want the robot to patrol.\nindex\nEnter an optional index value. No value or 0 instructs the robot to\nstart at the beginning of the route.\nResponses\nThe command returns:\nPatrolling route <route_name> once\nFinished patrolling route <route_name>\nDetails\nThe patrolOnce command instructs the robot to patrol the named route one time. (\"Patrol\" means to stop\nat all the route goals in the order on the route list.) The patrol starts from the first goal on the list or from\nthe specified indexed goal.\nExamples\nTo command the robot to patrol the route \"test\", enter:\npatrolonce test\nThe command returns:\nPatrolling route test once\nFinished patrolling route test\nRelated Commands\npatrol Command on page 177\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 179",
    "Page 180": "patrolOnce Command\npatrolResume Command on page 181\nstop Command on page 278\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 180\n\npatrolOnce Command\npatrolResume Command on page 181\nstop Command on page 278\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 180",
    "Page 181": "patrolResume Command\npatrolResume Command\nContinue navigating the current route.\nSyntax\npatrolResume [route_name]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nroute_name\nEnter the name of the route you want the robot to patrol.\nResponses\nThe command returns:\nPatrolling route <route_name> once\nFinished patrolling route <route_name>\nDetails\nThe patrolResume command instructs the robot to continue the patrol of the named route. (\"Patrol\"\nmeans to stop at all the route goals in the order on the route list.)\nExamples\nThe following example starts a patrol of the route named \"test\", interrupts the patrol with a stop com-\nmand, and then uses the patrolResume command to continue the patrol.\npatrolonce test 0\nPatrolling route test once\nstop\nInterrupted: Patrolling route test once\nStopping\nStopped\npatrolresume test\nPatrolling route test once\nFinished patrolling route test\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 181\n\npatrolResume Command\npatrolResume Command\nContinue navigating the current route.\nSyntax\npatrolResume\n [route_name]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nroute_name\nEnter the name of the route you want the robot to patrol.\nResponses\nThe command returns:\nPatrolling route <route_name> once\nFinished patrolling route <route_name>\nDetails\nThe patrolResume command instructs the robot to continue the patrol of the named route. (\"Patrol\"\nmeans to stop at all the route goals in the order on the route list.)\nExamples\nThe following example starts a patrol of the route named \"test\", interrupts the patrol with a stop com-\nmand, and then uses the patrolResume command to continue the patrol.\npatrolonce test 0\nPatrolling route test once\nstop\nInterrupted: Patrolling route test once\nStopping\nStopped\npatrolresume test\nPatrolling route test once\nFinished patrolling route test\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 181",
    "Page 182": "patrolResume Command\nRelated Commands\npatrol Command on page 177\npatrolOnce Command on page 179\nstop Command on page 278\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 182\n\npatrolResume Command\nRelated Commands\npatrol Command on page 177\npatrolOnce Command on page 179\nstop Command on page 278\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 182",
    "Page 183": "pauseTaskCancel Command\npauseTaskCancel Command\nCancels the pause task if one is active.\nSyntax\npauseTaskCancel\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nPauseTask: <status>\nThe pauseTaskCancel command returns one of the following status messages:\nl PauseTask: Pausing with status \"Pausing\"\nl PauseTask: Pausing interrupted\nl PauseTask: Pausing cancelled\nl PauseTask: Not pausing\nThese messages are broadcast to all of the clients, with the exception of \"Not pausing\".\nDetails\nThe pauseTaskCancel command is used to cancel a pause task if one is active. See the Examples section.\nExamples\nThe following example starts, builds and executes a task list. The pauseTaskCancel command is used to end\nthe \"pause\" (3rd) task on the list. When the pause task is canceled, the robot continues to the last goal (g_\n23).\nliststart mylist\nList being cleared\nMaking new list\nlistadd goto g_5\nAdded task 'goto g_5' to the list\nlistadd goto g_6\nAdded task 'goto g_6' to the list\nlistadd pause\nAdded task 'pause' to the list\nlistadd goto g_23\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 183\n\npauseTaskCancel Command\npauseTaskCancel Command\nCancels the pause task if one is active.\nSyntax\npauseTaskCancel\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nPauseTask: <status>\nThe pauseTaskCancel command returns one of the following status messages:\nl\n PauseTask: Pausing with status \"Pausing\"\nl\n PauseTask: Pausing interrupted\nl\n PauseTask: Pausing cancelled\nl\n PauseTask: Not pausing\nThese messages are broadcast to all of the clients, with the exception of \"Not pausing\".\nDetails\nThe pauseTaskCancel command is used to cancel a pause task if one is active. See the Examples section.\nExamples\nThe following example starts, builds and executes a task list. The pauseTaskCancel command is used to end\nthe \"pause\" (3rd) task on the list. When the pause task is canceled, the robot continues to the last goal (g_\n23).\nliststart mylist\nList being cleared\nMaking new list\nlistadd goto g_5\nAdded task 'goto g_5' to the list\nlistadd goto g_6\nAdded task 'goto g_6' to the list\nlistadd pause\nAdded task 'pause' to the list\nlistadd goto g_23\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 183",
    "Page 184": "pauseTaskCancel Command\nAdded task 'goto g_23' to the list\nlistexecute\nExecuting list\npausetaskcancel\nPauseTask: Pause cancelled\nSuccessfully finished task list\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 184\n\npauseTaskCancel Command\nAdded task 'goto g_23' to the list\nlistexecute\nExecuting list\npausetaskcancel\nPauseTask: Pause cancelled\nSuccessfully finished task list\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 184",
    "Page 185": "pauseTaskState Command\npauseTaskState Command\nDisplays the status of the pause task.\nSyntax\npauseTaskState\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nPauseState: <status>\nThe pauseTaskState command returns one of the following status messages:\nl PauseState: Pausing with status \"Pausing\"\nl PauseState: Pausing interrupted\nl PauseState: Pausing cancelled\nl PauseState: Not pausing\nThese messages are not broadcast to all of the clients, with the exception of \"Not pausing\". This command\nis helpful after a connection, to make sure a broadcast wasn't missed.\nExamples\nThe following example shows the status of the pause task.\npausetaskstate\nPauseState: Pausing with status \"Pausing\"\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 185\n\npauseTaskState Command\npauseTaskState Command\nDisplays the status of the pause task.\nSyntax\npauseTaskState\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nPauseState: <status>\nThe pauseTaskState command returns one of the following status messages:\nl\n PauseState: Pausing with status \"Pausing\"\nl\n PauseState: Pausing interrupted\nl\n PauseState: Pausing cancelled\nl\n PauseState: Not pausing\nThese messages are\n not\n broadcast to all of the clients, with the exception of \"Not pausing\". This command\nis helpful after a connection, to make sure a broadcast wasn't missed.\nExamples\nThe following example shows the status of the pause task.\npausetaskstate\nPauseState: Pausing with status \"Pausing\"\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 185",
    "Page 186": "pauseTaskState Command\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 186\n\npauseTaskState Command\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 186",
    "Page 187": "payloadQuery Command (shortcut: pq)\npayloadQuery Command (shortcut: pq)\nQueries the payload for a specified robot, a specified robot and slot, or all connected robots that have a pay-\nload configured.\nSyntax\npayloadQuery [robotName or \"default\"] [slotNumber or \"default\"] [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nrobotName\nEnter the name of the robot to display its slot information.\nslotNumber\nEnter the slot number to display its information. Requires a value in\nthe previous parameter.\nechoString\nAn optional string that is appended to each line of the results.\nRequires a value in the previous parameter.\nResponses\nThe command returns the payload query in the following format:\nPayloadQuery: \"<robotName>\" <slotNumber> \"<description>\" <date> <time> \"[echoString]\"\nThe date and time are assigned by the system when the slot payload is set on the robot.\nDetails\nThis command can be used to view the payload information for:\nl all slots on all robots\nl a specified slot on a robot\nl all slots on a specified robot\nSlot numbering starts at 1 (there is no slot 0).\nAn optional string can be specified, which will be appended to each line of the results.\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 187\n\npayloadQuery Command (shortcut: pq)\npayloadQuery Command (shortcut: pq)\nQueries the payload for a specified robot, a specified robot and slot, or all connected robots that have a pay-\nload configured.\nSyntax\npayloadQuery\n [robotName or \"default\"] [slotNumber or \"default\"] [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nrobotName\nEnter the name of the robot to display its slot information.\nslotNumber\nEnter the slot number to display its information. Requires a value in\nthe previous parameter.\nechoString\nAn optional string that is appended to each line of the results.\nRequires a value in the previous parameter.\nResponses\nThe command returns the payload query in the following format:\nPayloadQuery: \"<robotName>\" <slotNumber> \"<description>\" <date> <time> \"[echoString]\"\nThe date and time are assigned by the system when the slot payload is set on the robot.\nDetails\nThis command can be used to view the payload information for:\nl\n all slots on all robots\nl\n a specified slot on a robot\nl\n all slots on a specified robot\nSlot numbering starts at 1 (there is no slot 0).\nAn optional string can be specified, which will be appended to each line of the results.\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 187",
    "Page 188": "payloadQuery Command (shortcut: pq)\nExamples\nIn the example below, robot 21 is carrying books and glasses. To view what robot 21 is carrying, enter the\nfollowing command:\npayloadQuery 21\nThe command returns:\nPayloadQuery: \"21\" 1 \"Books\" 05/07/2012 21:11:33 \"\"\nPayloadQuery: \"21\" 2 \"Glasses\" 05/07/2012 21:15:11 \"\"\nPayloadQuery: \"21\" 3 \"Empty\" None None \"\"\nPayloadQuery: \"21\" 4 \"Empty\" None None \"\"\nEndPayloadQuery\nThe following example displays all of the defined slots on all robots connected to the Enterprise Manager.\nThe command is entered without the robotName argument.\npayloadQuery\nPayloadQuery: \"21\" 1 \"Books\" 05/07/2012 21:11:33 \"\"\nPayloadQuery: \"21\" 2 \"Glasses\" 05/07/2012 21:14:51 \"\"\nPayloadQuery: \"21\" 3 \"Empty\" None None \"\"\nPayloadQuery: \"21\" 4 \"Empty\" None None \"\"\nPayloadQuery: \"22\" 1 \"Empty\" None None \"\"\nPayloadQuery: \"22\" 2 \"Empty\" None None \"\"\nPayloadQuery: \"22\" 3 \"stuff\" 09/10/2012 12:14:14 \"\"\nPayloadQuery: \"22\" 4 \"Empty\" None None \"\"\nPayloadQuery: \"23\" 1 \"morestuff\" 09/10/2012 12:17:23 \"\"\nPayloadQuery: \"23\" 2 \"Empty\" None None \"\"\nPayloadQuery: \"23\" 3 \"Bread\" 09/10/2012 12:23:39 \"\"\nPayloadQuery: \"23\" 4 \"Empty\" None None \"\"\nEndPayloadQuery\nThe following example displays all of the defined slots on all robots and echoes the string \"hello\":\npayloadquery default default hello\nPayloadQuery: \"31\" 1 \"slotjunk\" 05/07/2012 21:11:33 hello\nPayloadQuery: \"31\" 2 \"abc\" 05/07/2012 21:10:53 hello\nPayloadQuery: \"31\" 3 \"def\" 09/10/2012 12:14:14 hello\nPayloadQuery: \"31\" 4 \"ghi\" 09/10/2012 12:23:39 hello\nPayloadQuery: \"32\" 1 \"Empty\" None None hello\nPayloadQuery: \"32\" 2 \"Empty\" None None hello\nPayloadQuery: \"32\" 3 \"Empty\" None None hello\nPayloadQuery: \"32\" 4 \"Empty\" None None hello\nPayloadQuery: \"33\" 1 \"Empty\" None None hello\nPayloadQuery: \"33\" 2 \"Empty\" None None hello\nPayloadQuery: \"33\" 3 \"Empty\" None None hello\nPayloadQuery: \"33\" 4 \"Empty\" None None hello\nPayloadQuery: \"34\" 1 \"Empty\" None None hello\nPayloadQuery: \"34\" 2 \"Empty\" None None hello\nPayloadQuery: \"34\" 3 \"Empty\" None None hello\nPayloadQuery: \"34\" 4 \"Empty\" None None hello\nPayloadQuery: \"35\" 1 \"Empty\" None None hello\nPayloadQuery: \"35\" 2 \"Empty\" None None hello\nPayloadQuery: \"35\" 3 \"Empty\" None None hello\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 188\n\npayloadQuery Command (shortcut: pq)\nExamples\nIn the example below, robot 21 is carrying books and glasses. To view what robot 21 is carrying, enter the\nfollowing command:\npayloadQuery 21\nThe command returns:\nPayloadQuery: \"21\" 1 \"Books\" 05/07/2012 21:11:33 \"\"\nPayloadQuery: \"21\" 2 \"Glasses\" 05/07/2012 21:15:11 \"\"\nPayloadQuery: \"21\" 3 \"Empty\" None None \"\"\nPayloadQuery: \"21\" 4 \"Empty\" None None \"\"\nEndPayloadQuery\nThe following example displays all of the defined slots on all robots connected to the Enterprise Manager.\nThe command is entered without the robotName argument.\npayloadQuery\nPayloadQuery: \"21\" 1 \"Books\" 05/07/2012 21:11:33 \"\"\nPayloadQuery: \"21\" 2 \"Glasses\" 05/07/2012 21:14:51 \"\"\nPayloadQuery: \"21\" 3 \"Empty\" None None \"\"\nPayloadQuery: \"21\" 4 \"Empty\" None None \"\"\nPayloadQuery: \"22\" 1 \"Empty\" None None \"\"\nPayloadQuery: \"22\" 2 \"Empty\" None None \"\"\nPayloadQuery: \"22\" 3 \"stuff\" 09/10/2012 12:14:14 \"\"\nPayloadQuery: \"22\" 4 \"Empty\" None None \"\"\nPayloadQuery: \"23\" 1 \"morestuff\" 09/10/2012 12:17:23 \"\"\nPayloadQuery: \"23\" 2 \"Empty\" None None \"\"\nPayloadQuery: \"23\" 3 \"Bread\" 09/10/2012 12:23:39 \"\"\nPayloadQuery: \"23\" 4 \"Empty\" None None \"\"\nEndPayloadQuery\nThe following example displays all of the defined slots on all robots and echoes the string \"hello\":\npayloadquery default default hello\nPayloadQuery: \"31\" 1 \"slotjunk\" 05/07/2012 21:11:33 hello\nPayloadQuery: \"31\" 2 \"abc\" 05/07/2012 21:10:53 hello\nPayloadQuery: \"31\" 3 \"def\" 09/10/2012 12:14:14 hello\nPayloadQuery: \"31\" 4 \"ghi\" 09/10/2012 12:23:39 hello\nPayloadQuery: \"32\" 1 \"Empty\" None None hello\nPayloadQuery: \"32\" 2 \"Empty\" None None hello\nPayloadQuery: \"32\" 3 \"Empty\" None None hello\nPayloadQuery: \"32\" 4 \"Empty\" None None hello\nPayloadQuery: \"33\" 1 \"Empty\" None None hello\nPayloadQuery: \"33\" 2 \"Empty\" None None hello\nPayloadQuery: \"33\" 3 \"Empty\" None None hello\nPayloadQuery: \"33\" 4 \"Empty\" None None hello\nPayloadQuery: \"34\" 1 \"Empty\" None None hello\nPayloadQuery: \"34\" 2 \"Empty\" None None hello\nPayloadQuery: \"34\" 3 \"Empty\" None None hello\nPayloadQuery: \"34\" 4 \"Empty\" None None hello\nPayloadQuery: \"35\" 1 \"Empty\" None None hello\nPayloadQuery: \"35\" 2 \"Empty\" None None hello\nPayloadQuery: \"35\" 3 \"Empty\" None None hello\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 188",
    "Page 189": "payloadQuery Command (shortcut: pq)\nPayloadQuery: \"35\" 4 \"Empty\" None None hello\nPayloadQuery: \"36\" 1 \"Empty\" None None hello\nPayloadQuery: \"36\" 2 \"Empty\" None None hello\nPayloadQuery: \"36\" 3 \"Empty\" None None hello\nPayloadQuery: \"36\" 4 \"Empty\" None None hello\nEndPayloadQuery\nRelated Commands\ngetPayload\u00a0Command on page 132\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 189\n\npayloadQuery Command (shortcut: pq)\nPayloadQuery: \"35\" 4 \"Empty\" None None hello\nPayloadQuery: \"36\" 1 \"Empty\" None None hello\nPayloadQuery: \"36\" 2 \"Empty\" None None hello\nPayloadQuery: \"36\" 3 \"Empty\" None None hello\nPayloadQuery: \"36\" 4 \"Empty\" None None hello\nEndPayloadQuery\nRelated Commands\ngetPayload\u00a0Command on page 132\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 189",
    "Page 190": "payloadQueryLocal Command (shortcut: pql)\npayloadQueryLocal Command (shortcut: pql)\nQueries the payload for the robot and specified slot.\nSyntax\npayloadQueryLocal [slotNumber or \"default\"] [echoString]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nslotNumber\nEnter the slot number to display its information.\nechoString\nAn optional string that is appended to each line of the results.\nRequires a value in the previous parameter.\nResponses\nThe command returns the payload query in the following format:\nPayloadQueryLocal: <slotNumber> \"<description>\" <date> <time> \"[echoString]\"\nThe date and time are assigned by the system when the slot payload is set. For details, see payloadSet\nCommand (shortcut: ps) on page 194.\nDetails\nThis command can be used to view the payload information for:\nl all slots on the \"default\" robot\nl a specified slot on the \"default\" robot\nSlot numbering starts at 1 (there is no slot 0).\nAn optional string can be specified, which will be appended to each line of the results.\nExamples\nThe following command displays all slots on the local robot and echoes the string \"hello\":\npayloadquerylocal default hello\nPayloadQuery: 1 \"slotjunk\" 05/07/2012 21:11:33 hello\nPayloadQuery: 2 \"abc\" 05/07/2012 21:10:53 hello\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 190\n\npayloadQueryLocal Command (shortcut: pql)\npayloadQueryLocal Command (shortcut: pql)\nQueries the payload for the robot and specified slot.\nSyntax\npayloadQueryLocal\n [slotNumber or \"default\"] [echoString]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nslotNumber\nEnter the slot number to display its information.\nechoString\nAn optional string that is appended to each line of the results.\nRequires a value in the previous parameter.\nResponses\nThe command returns the payload query in the following format:\nPayloadQueryLocal: <slotNumber> \"<description>\" <date> <time> \"[echoString]\"\nThe date and time are assigned by the system when the slot payload is set. For details, see payloadSet\nCommand (shortcut: ps) on page 194.\nDetails\nThis command can be used to view the payload information for:\nl\n all slots on the \"default\" robot\nl\n a specified slot on the \"default\" robot\nSlot numbering starts at 1 (there is no slot 0).\nAn optional string can be specified, which will be appended to each line of the results.\nExamples\nThe following command displays all slots on the local robot and echoes the string \"hello\":\npayloadquerylocal default hello\nPayloadQuery: 1 \"slotjunk\" 05/07/2012 21:11:33 hello\nPayloadQuery: 2 \"abc\" 05/07/2012 21:10:53 hello\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 190",
    "Page 191": "payloadQueryLocal Command (shortcut: pql)\nPayloadQuery: 3 \"def\" 09/10/2012 12:14:14 hello\nPayloadQuery: 4 \"ghi\" 09/10/2012 12:23:39 hello\nEndPayloadQuery\nRelated Commands\ngetPayload\u00a0Command on page 132\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 191\n\npayloadQueryLocal Command (shortcut: pql)\nPayloadQuery: 3 \"def\" 09/10/2012 12:14:14 hello\nPayloadQuery: 4 \"ghi\" 09/10/2012 12:23:39 hello\nEndPayloadQuery\nRelated Commands\ngetPayload\u00a0Command on page 132\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 191",
    "Page 192": "payloadRemove Command (shortcut: pr)\npayloadRemove Command (shortcut: pr)\nEmpties the specified payload slot on the robot.\nSyntax\npayloadRemove <slot_number>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nslot_number\nEnter an integer greater than zero (slot numbering starts at 1).\nResponses\nThe command returns the following for a pending item:\npayloadremove attempting to remove slot <slot_number>\npayloadremove on <robot> of slot number <slot_number> successfully\nPayloadUpdate: \"<robot>\" <slot_number> \"Empty\" None None\nDetails\nThe payloadRemove command empties a payload slot on the robot. The slot number must be specified,\nand it starts at 1.\nExamples\nTo empty payload slot 4 on the robot, enter\npayloadRemove 4\nThe command returns:\npayloadremove attempting to remove slot 4\npayloadremove on 31 of slot number 4 successfully\nPayloadUpdate: \"31\" 4 \"Empty\" None None\nRelated Commands\ngetPayload\u00a0Command on page 132\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 192\n\npayloadRemove Command (shortcut: pr)\npayloadRemove Command (shortcut: pr)\nEmpties the specified payload slot on the robot.\nSyntax\npayloadRemove\n <slot_number>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nslot_number\nEnter an integer greater than zero (slot numbering starts at 1).\nResponses\nThe command returns the following for a pending item:\npayloadremove attempting to remove slot <slot_number>\npayloadremove on <robot> of slot number <slot_number> successfully\nPayloadUpdate: \"<robot>\" <slot_number> \"Empty\" None None\nDetails\nThe payloadRemove command empties a payload slot on the robot. The slot number must be specified,\nand it starts at 1.\nExamples\nTo empty payload slot 4 on the robot, enter\npayloadRemove 4\nThe command returns:\npayloadremove attempting to remove slot 4\npayloadremove on 31 of slot number 4 successfully\nPayloadUpdate: \"31\" 4 \"Empty\" None None\nRelated Commands\ngetPayload\u00a0Command on page 132\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 192",
    "Page 193": "payloadRemove Command (shortcut: pr)\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 193\n\npayloadRemove Command (shortcut: pr)\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 193",
    "Page 194": "payloadSet Command (shortcut: ps)\npayloadSet Command (shortcut: ps)\nDefines a payload slot on this robot.\nSyntax\npayloadSet <slot_number> <slot_string>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nslot_number\nEnter an integer greater than zero, to define a payload slot on this\nrobot.\nslot_string\nEnter a description of the contents of the payload.\nResponses\nThe command returns:\npayloadset attempting to set payload <slot_number> \"<slot_string>\"\npayloadset on \"<robot>\" of slot number <slot_number> with string \"<slot_string>\" suc-\ncessfully set\nPayloadUpdate: \"<robot>\" <slot_number> \"<slot_string>\"\nDetails\nThe payloadSet command defines a payload slot on the robot. These slots represent containers where the\nobjects (payload) are carried on top of the robot. For example, you can assign a name to slot 1 on robot\n\"xyz\" that represents the object the robot is to carry from one goal to the next. This allows you to keep\ntrack of what the robot is transporting.\nIf the robot does not have multiple payload slots, you can use the setPayload command to set the payload\nname for the entire robot. For details, see setPayload Command on page 272.\nExamples\nTo define payload slot 1 with the object \"Books\", enter:\npayloadSet 1 Books\nThe command returns:\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 194\n\npayloadSet Command (shortcut: ps)\npayloadSet Command (shortcut: ps)\nDefines a payload slot on this robot.\nSyntax\npayloadSet\n <slot_number> <slot_string>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nslot_number\nEnter an integer greater than zero, to define a payload slot on this\nrobot.\nslot_string\nEnter a description of the contents of the payload.\nResponses\nThe command returns:\npayloadset attempting to set payload <slot_number> \"<slot_string>\"\npayloadset on \"<robot>\" of slot number <slot_number> with string \"<slot_string>\" suc-\ncessfully set\nPayloadUpdate: \"<robot>\" <slot_number> \"<slot_string>\"\nDetails\nThe payloadSet command defines a payload slot on the robot. These slots represent containers where the\nobjects (payload) are carried on top of the robot. For example, you can assign a name to slot 1 on robot\n\"xyz\" that represents the object the robot is to carry from one goal to the next. This allows you to keep\ntrack of what the robot is transporting.\nIf the robot does not have multiple payload slots, you can use the setPayload command to set the payload\nname for the entire robot. For details, see setPayload Command on page 272.\nExamples\nTo define payload slot 1 with the object \"Books\", enter:\npayloadSet 1 Books\nThe command returns:\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 194",
    "Page 195": "payloadSet Command (shortcut: ps)\npayloadset attempting to set payload 1 \"Books\"\npayloadset on \"Adept_Telepresence_Robot\" of slot number 1 with string \"Books\" suc-\ncessfully set\nPayloadUpdate: \"Adept_Telepresence_Robot\" 1 \"Books\"\nRelated Commands\ngetPayload\u00a0Command on page 132\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 195\n\npayloadSet Command (shortcut: ps)\npayloadset attempting to set payload 1 \"Books\"\npayloadset on \"Adept_Telepresence_Robot\" of slot number 1 with string \"Books\" suc-\ncessfully set\nPayloadUpdate: \"Adept_Telepresence_Robot\" 1 \"Books\"\nRelated Commands\ngetPayload\u00a0Command on page 132\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 195",
    "Page 196": "payloadSlotCount Command (shortcut: psc)\npayloadSlotCount Command (shortcut: psc)\nDisplays the slot count on a specific robot or on all robots.\nSyntax\npayloadSlotCount [robotName or \"default\"] [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nrobotName\nEnter the name of the robot to display its slot count. To view the\nslot counts for all connected robots, enter the command with no\nparameter or enter \"default\".\nechoString\nAn optional string that is appended to each line of the\nresults.\u00a0Requires a value in the previous parameter.\nResponses\nThe command returns the slot count in the following format:\nPayloadSlotCount: \"<robotName>\" <slotCount> <date> <time> \"[echoString]\"\nThe date and time are assigned by the system.\nDetails\nThe payloadSlotCount command is used to display the slot count on a specific robot or on all robots. To limit\nthe query to a specific robot, enter the robot name; to view the slot count on all robots, omit the robot\nname.\nSlot numbering starts at 1 (there is no slot 0).\nAn optional string can be specified, which will be appended to each line of the results.\nExamples\nTo view the slot count for robot 21, enter the following command:\npayloadslotcount 21\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 196\n\npayloadSlotCount Command (shortcut: psc)\npayloadSlotCount Command (shortcut: psc)\nDisplays the slot count on a specific robot or on all robots.\nSyntax\npayloadSlotCount\n [robotName or \"default\"] [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nrobotName\nEnter the name of the robot to display its slot count. To view the\nslot counts for all connected robots, enter the command with no\nparameter or enter \"default\".\nechoString\nAn optional string that is appended to each line of the\nresults.\u00a0Requires a value in the previous parameter.\nResponses\nThe command returns the slot count in the following format:\nPayloadSlotCount: \"<robotName>\" <slotCount> <date> <time> \"[echoString]\"\nThe date and time are assigned by the system.\nDetails\nThe payloadSlotCount command is used to display the slot count on a specific robot or on all robots. To limit\nthe query to a specific robot, enter the robot name; to view the slot count on all robots, omit the robot\nname.\nSlot numbering starts at 1 (there is no slot 0).\nAn optional string can be specified, which will be appended to each line of the results.\nExamples\nTo view the slot count for robot 21, enter the following command:\npayloadslotcount 21\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 196",
    "Page 197": "payloadSlotCount Command (shortcut: psc)\nThe command returns:\nPayloadSlotCount: \"21\" 4 \"\"\nEndPayloadSlotCount\nThe following example displays the slot counts on all robots connected to the Enterprise Manager. The com-\nmand is entered without the robotName argument.\npayloadSlotCount\nPayloadSlotCount: \"21\" 4 04/27/2012 06:37:33 \u201c\u201d\nPayloadSlotCount: \"22\" 5 04/27/2012 08:37:33 \u201c\u201d\nPayloadSlotCount: \"23\" 4 04/27/2012 07:37:33 \u201c\u201d\nEndPayloadSlotCount\nRelated Commands\ngetPayload\u00a0Command on page 132\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 197\n\npayloadSlotCount Command (shortcut: psc)\nThe command returns:\nPayloadSlotCount: \"21\" 4 \"\"\nEndPayloadSlotCount\nThe following example displays the slot counts on all robots connected to the Enterprise Manager. The com-\nmand is entered without the robotName argument.\npayloadSlotCount\nPayloadSlotCount: \"21\" 4 04/27/2012 06:37:33 \u201c\u201d\nPayloadSlotCount: \"22\" 5 04/27/2012 08:37:33 \u201c\u201d\nPayloadSlotCount: \"23\" 4 04/27/2012 07:37:33 \u201c\u201d\nEndPayloadSlotCount\nRelated Commands\ngetPayload\u00a0Command on page 132\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 9:26:53 AM\nPage 197",
    "Page 198": "payloadSlotCountLocal Command (shortcut: pscl)\npayloadSlotCountLocal Command (shortcut: pscl)\nDisplays a slot count on this robot.\nSyntax\npayloadslotcountlocal\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe payloadSlotCountLocal command does not have any arguments.\nExamples\nThe following command displays the slot count for the local robot and echoes the string \"testing\":\npayloadslotcountlocal\nPayloadSlotCount: \"Adept_Telepresence_Robot\" 4\nEndPayloadSlotCount\nRelated Commands\ngetPayload\u00a0Command on page 132\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 198\n\npayloadSlotCountLocal Command (shortcut: pscl)\npayloadSlotCountLocal Command (shortcut: pscl)\nDisplays a slot count on this robot.\nSyntax\npayloadslotcountlocal\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe payloadSlotCountLocal command does not have any arguments.\nExamples\nThe following command displays the slot count for the local robot and echoes the string \"testing\":\npayloadslotcountlocal\nPayloadSlotCount: \"Adept_Telepresence_Robot\" 4\nEndPayloadSlotCount\nRelated Commands\ngetPayload\u00a0Command on page 132\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\nsetPayload Command on page 272\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 198",
    "Page 199": "play Command\nplay Command\nPlays a .wav sound file on the robot.\nSyntax\nplay <path_file>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThe sound file must be in .wav format.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\npath_file\nEnter the path and name of the sound file with the .wav extension.\nFiles in subfolders must be use a forward slash between folder\nnames, for example:\n/subfolder1/subfolder2/wavefile.wav\nResponses\nThe command returns:\nPlaying <path_file>\nDetails\nThe play command plays a .wav sound file on the mobile robot. It is equivalent to the playInstant task,\nwhich plays the specified wave file through the robot\u2019s audio output, if enabled.\nAlthough ARCL\u00a0does not provide a way to list the sound files on the robot, you can view the files using\nMobilePlanner File > Download/Upload menu selection, as shown in the following figure.\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 199\n\nplay Command\nplay Command\nPlays a .wav sound file on the robot.\nSyntax\nplay\n <path_file>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThe sound file must be in .wav format.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\npath_file\nEnter the path and name of the sound file with the .wav extension.\nFiles in subfolders must be use a forward slash between folder\nnames, for example:\n/subfolder1/subfolder2/wavefile.wav\nResponses\nThe command returns:\nPlaying <path_file>\nDetails\nThe play command plays a .wav sound file on the mobile robot. It is equivalent to the playInstant task,\nwhich plays the specified wave file through the robot\u2019s audio output, if enabled.\nAlthough ARCL\u00a0does not provide a way to list the sound files on the robot, you can view the files using\nMobilePlanner\n File > Download/Upload\n menu selection, as shown in the following figure.\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 199",
    "Page 200": "play Command\nTo have the robot speak a text string, use the say command. For details, see say Command on page 261.\nExamples\nThe following example plays the file \"WindowsLogonSound.wav\", which is shown in the root folder of the\nrobot in the previous figure.\nplay WindowsLogonSound.wav\nPlaying WindowsLogonSound.wav\nRelated Commands\nsay Command on page 261\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 200\n\nplay Command\nTo have the robot speak a text string, use the say command. For details, see say Command on page 261.\nExamples\nThe following example plays the file \"WindowsLogonSound.wav\", which is shown in the root folder of the\nrobot in the previous figure.\nplay WindowsLogonSound.wav\nPlaying WindowsLogonSound.wav\nRelated Commands\nsay Command on page 261\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 200",
    "Page 201": "popupSimple Command\npopupSimple Command\nDisplay a popup message in the MobileEyes software.\nSyntax\npopupSimple <\"title\"> <\"message\"> <\"buttonLabel\"> <timeout>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nAll parameters, except for timeout, must be enclosed in double quotes.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\n\"title\"\nEnter a string enclosed in double quotes for the title.\n\"message\"\nEnter a string enclosed in double quotes for the message.\n\"buttonLabel\"\nEnter a string enclosed in double quotes for the button label.\ntimeout\nInteger that specifies the time (in seconds) the popup will remain on\nthe screen.\nResponses\nThe command returns:\nCreating simple popup\nDetails\nThe popupSimple command is used to create a popup message for the MobileEyes software. When the com-\nmand is entered, the popup message is immediately displayed; it remains on screen for the timeout period\n(in seconds) or until the user clicks the button or close (x) icon, whichever occurs first.\nExamples\nThe following example displays a simple popup test message, which remains on the screen for 30 seconds.\nA sample of the popup is shown in the following figure.\npopupsimple \"test\" \"this is a test popup\" \"Close\" 30\nCreating simple popup\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 201\n\npopupSimple Command\npopupSimple Command\nDisplay a popup message in the MobileEyes software.\nSyntax\npopupSimple\n <\"title\"> <\"message\"> <\"buttonLabel\"> <timeout>\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nAll parameters, except for timeout, must be enclosed in double quotes.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\n\"title\"\nEnter a string enclosed in double quotes for the title.\n\"message\"\nEnter a string enclosed in double quotes for the message.\n\"buttonLabel\"\nEnter a string enclosed in double quotes for the button label.\ntimeout\nInteger that specifies the time (in seconds) the popup will remain on\nthe screen.\nResponses\nThe command returns:\nCreating simple popup\nDetails\nThe popupSimple command is used to create a popup message for the MobileEyes software. When the com-\nmand is entered, the popup message is immediately displayed; it remains on screen for the timeout period\n(in seconds) or until the user clicks the button or close (x) icon, whichever occurs first.\nExamples\nThe following example displays a simple popup test message, which remains on the screen for 30 seconds.\nA sample of the popup is shown in the following figure.\npopupsimple \"test\" \"this is a test popup\" \"Close\" 30\nCreating simple popup\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 201",
    "Page 202": "popupSimple Command\nExample Popup Message\nRelated Commands\nplay Command on page 199\nsay Command on page 261\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 202\n\npopupSimple Command\nExample Popup Message\nRelated Commands\nplay Command on page 199\nsay Command on page 261\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 202",
    "Page 203": "queryDockStatus Command\nqueryDockStatus Command\nGets the docking/charging status.\nSyntax\nqueryDockStatus\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nDockingState: <Docking,Docked,Undocked> ForcedState: <Forced,Unforced> ChargeState:\n<Not,Bulk,Overcharge,Float>\u00a0\u00a0\u00a0\nDetails\nThe queryDockStatus command returns the current docking/charging state of the robot.\nExamples\nTo view the robot docking/charge status, enter:\nquerydockstatus\nThe command returns:\nDockingState: Docking ForcedState: Unforced ChargeState: Not\nRelated Commands\nqueryMotors Command on page 207\nstatus Command on page 276\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 203\n\nqueryDockStatus Command\nqueryDockStatus Command\nGets the docking/charging status.\nSyntax\nqueryDockStatus\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nDockingState: <Docking,Docked,Undocked> ForcedState: <Forced,Unforced> ChargeState:\n<Not,Bulk,Overcharge,Float>\u00a0\u00a0\u00a0\nDetails\nThe queryDockStatus command returns the current docking/charging state of the robot.\nExamples\nTo view the robot docking/charge status, enter:\nquerydockstatus\nThe command returns:\nDockingState: Docking ForcedState: Unforced ChargeState: Not\nRelated Commands\nqueryMotors Command on page 207\nstatus Command on page 276\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 203",
    "Page 204": "queryFaults Command (shortcut: qf)\nqueryFaults Command (shortcut: qf)\nDisplays the faults associated with the specified robot.\nSyntax\nqueryFaults [robotName or \"default\"] [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nDisplays all faults on the specified robot. Displays faults on all robots if the robotName parameter is omit-\nted.\nParameter\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nrobotName\nEnter the name of the robot. To view all the robots connected to\nthe Enterprise Manager, omit this parameter or enter \"default\".\nechoString\nAn optional string that is appended to each line of the results.\nResponses\nThe command returns the following for a pending item:\nRobotFaultQuery: <robotName> <faultName> <faultShortDescription> <faultLongDescription>\n<bool:drivingFault> <bool:criticalFault><bool:applicationFault><bool:clearedOnGo><bool:\nclearedOnAcknowledgement> <echoString>\nEndQueryFaults\nDetails\nThe queryFaults command provides a listing of all faults for the specified robot, or all faults for all robots con-\nnected to the Enterprise Manager if no robot is specified.\nExample\nqueryfaults robot1\nRobotFaultQuery: \"robot1\" Fault_Critical_Application fault1 \"shortdesc\" \"longdesc\" false\ntrue true false false \u201c\u201d\nEndQueryFaults\nqueryfaults robot1 echoit\nRobotFaultQuery: \"robot1\" Fault_Critical_Application fault1 \"shortdesc\" \"longdesc\" false\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 204\n\nqueryFaults Command (shortcut: qf)\nqueryFaults Command (shortcut: qf)\nDisplays the faults associated with the specified robot.\nSyntax\nqueryFaults\n [robotName or \"default\"] [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nDisplays all faults on the specified robot. Displays faults on all robots if the robotName parameter is omit-\nted.\nParameter\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nrobotName\nEnter the name of the robot. To view all the robots connected to\nthe Enterprise Manager, omit this parameter or enter \"default\".\nechoString\nAn optional string that is appended to each line of the results.\nResponses\nThe command returns the following for a pending item:\nRobotFaultQuery: <robotName> <faultName> <faultShortDescription> <faultLongDescription>\n<bool:drivingFault> <bool:criticalFault><bool:applicationFault><bool:clearedOnGo><bool:\nclearedOnAcknowledgement> <echoString>\nEndQueryFaults\nDetails\nThe queryFaults command provides a listing of all faults for the specified robot, or all faults for all robots con-\nnected to the Enterprise Manager if no robot is specified.\nExample\nqueryfaults robot1\nRobotFaultQuery: \"robot1\" Fault_Critical_Application fault1 \"shortdesc\" \"longdesc\" false\ntrue true false false \u201c\u201d\nEndQueryFaults\nqueryfaults robot1 echoit\nRobotFaultQuery: \"robot1\" Fault_Critical_Application fault1 \"shortdesc\" \"longdesc\" false\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 204",
    "Page 205": "queryFaults Command (shortcut: qf)\ntrue true false false echoit\nEndQueryFaults\nqueryfaults\nRobotFaultQuery: \"robot2\" Fault_Driving_Application fault2 \"shortd\" \"longd\" true false\ntrue false false \u201c\u201d\nRobotFaultQuery: \"robot1\" Fault_Critical_Application fault1 \"shortdesc\" \"longdesc\" false\ntrue true false false \u201c\u201d\nEndQueryFaults\nqueryfaults\nRobotFaultQuery: \"guiabot_2010_09_20\" Fault_Driving_Application fault2 \"shortd\" \"longd\"\ntrue false true false false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault EncoderDegraded \"Encoder degraded\" \"The robot's\nencoders may be degraded\" false true false false false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault_Driving EncoderFailed \"Encoder failed\" \"The\nrobot's encoders have failed, turn off the robot and contact your robot provider for main-\ntenance\" true true false false false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault_Critical GyroFault \"Gyro fault\" \"The robot's gyro\nhas had a critical fault, you may power cycle the robot and continue using it, but you\nshould also contact your robot provider for maintenance\" true true false false false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault_Critical OverTemperatureAnalog \"Robot overheated\n(analog)\" \"The robot is too hot (measured by analog) and will shut down shortly\" false\ntrue false false false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault_Critical UnderVoltage \"Robot battery critically\nlow\" \"The robot battery is critically low and will shut down shortly\" false true false\nfalse false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault_Critical_Application fault1 \"shortdesc\" \"long-\ndesc\" false true true false false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault_Application fault3 \"short\" \"long\" false true true\nfalse false \u201c\u201d\nEndQueryFaults\nThe broadcast messages to EM ARCL when robots set/clear faults will have the following formats:\nRobotFault: \" showpatrolbot1\" Fault_Application fault3 \"short\" \"long\" false true true\nfalse false\nRobotFault: \" showpatrolbot1\" Fault_Driving_Application fault2 \"shortd\" \"longd\" true\nfalse true false false\nRobotFault: \" showpatrolbot1\" Fault_Critical OverTemperatureAnalog \"Robot overheated (ana-\nlog)\" \"The robot is too hot (measured by analog) and will shut down shortly\" false true\nfalse false false\nRobotFault: \" showpatrolbot1\" Fault_Critical UnderVoltage \"Robot battery critically low\"\n\"The robot battery is critically low and will shut down shortly\" false true false false\nfalse\nRobotFault: \" showpatrolbot1\" Fault EncoderDegraded \"Encoder degraded\" \"The robot's\nencoders may be degraded\" false true false false false\nRobotFault: \" showpatrolbot1\" Fault_Driving EncoderFailed \"Encoder failed\" \"The robot's\nencoders have failed, turn off the robot and contact your robot provider for maintenance\"\ntrue true false false false\nRobotFault: \" showpatrolbot1\" Fault_Critical GyroFault \"Gyro fault\" \"The robot's gyro has\nhad a critical fault, you may power cycle the robot and continue using it, but you should\nalso contact your robot provider for maintenance\" true true false false false\nRobotFault: \"Sim2\" Fault_Application_ClearedOnAcknowledgement f1 \"s\" \"l\" false false true\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 205\n\nqueryFaults Command (shortcut: qf)\ntrue true false false echoit\nEndQueryFaults\nqueryfaults\nRobotFaultQuery: \"robot2\" Fault_Driving_Application fault2 \"shortd\" \"longd\" true false\ntrue false false \u201c\u201d\nRobotFaultQuery: \"robot1\" Fault_Critical_Application fault1 \"shortdesc\" \"longdesc\" false\ntrue true false false \u201c\u201d\nEndQueryFaults\nqueryfaults\nRobotFaultQuery: \"guiabot_2010_09_20\" Fault_Driving_Application fault2 \"shortd\" \"longd\"\ntrue false true false false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault EncoderDegraded \"Encoder degraded\" \"The robot's\nencoders may be degraded\" false true false false false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault_Driving EncoderFailed \"Encoder failed\" \"The\nrobot's encoders have failed, turn off the robot and contact your robot provider for main-\ntenance\" true true false false false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault_Critical GyroFault \"Gyro fault\" \"The robot's gyro\nhas had a critical fault, you may power cycle the robot and continue using it, but you\nshould also contact your robot provider for maintenance\" true true false false false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault_Critical OverTemperatureAnalog \"Robot overheated\n(analog)\" \"The robot is too hot (measured by analog) and will shut down shortly\" false\ntrue false false false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault_Critical UnderVoltage \"Robot battery critically\nlow\" \"The robot battery is critically low and will shut down shortly\" false true false\nfalse false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault_Critical_Application fault1 \"shortdesc\" \"long-\ndesc\" false true true false false \u201c\u201d\nRobotFaultQuery: \"showpatrolbot1\" Fault_Application fault3 \"short\" \"long\" false true true\nfalse false \u201c\u201d\nEndQueryFaults\nThe broadcast messages to EM ARCL when robots set/clear faults will have the following formats:\nRobotFault: \" showpatrolbot1\" Fault_Application fault3 \"short\" \"long\" false true true\nfalse false\nRobotFault: \" showpatrolbot1\" Fault_Driving_Application fault2 \"shortd\" \"longd\" true\nfalse true false false\nRobotFault: \" showpatrolbot1\" Fault_Critical OverTemperatureAnalog \"Robot overheated (ana-\nlog)\" \"The robot is too hot (measured by analog) and will shut down shortly\" false true\nfalse false false\nRobotFault: \" showpatrolbot1\" Fault_Critical UnderVoltage \"Robot battery critically low\"\n\"The robot battery is critically low and will shut down shortly\" false true false false\nfalse\nRobotFault: \" showpatrolbot1\" Fault EncoderDegraded \"Encoder degraded\" \"The robot's\nencoders may be degraded\" false true false false false\nRobotFault: \" showpatrolbot1\" Fault_Driving EncoderFailed \"Encoder failed\" \"The robot's\nencoders have failed, turn off the robot and contact your robot provider for maintenance\"\ntrue true false false false\nRobotFault: \" showpatrolbot1\" Fault_Critical GyroFault \"Gyro fault\" \"The robot's gyro has\nhad a critical fault, you may power cycle the robot and continue using it, but you should\nalso contact your robot provider for maintenance\" true true false false false\nRobotFault: \"Sim2\" Fault_Application_ClearedOnAcknowledgement f1 \"s\" \"l\" false false true\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 205",
    "Page 206": "queryFaults Command (shortcut: qf)\nfalse true\nRobotFaultCleared: \"showpatrolbot1\" Fault EncoderDegraded \"Encoder degraded\" \"The\nrobot's encoders may be degraded\" false true false false false\nRobotFaultCleared: \"showpatrolbot1\" Fault_Driving EncoderFailed \"Encoder failed\" \"The\nrobot's encoders have failed, turn off the robot and contact your robot provider for\nmaintenance\" true true false false false\nRobotFaultCleared: \"showpatrolbot1\" Fault_Critical GyroFault \"Gyro fault\" \"The robot's\ngyro has had a critical fault, you may power cycle the robot and continue using it, but\nyou should also contact your robot provider for maintenance\" true true false false false\nRobotFaultCleared: \"showpatrolbot1\" Fault_Critical OverTemperatureAnalog \"Robot over-\nheated (analog)\" \"The robot is too hot (measured by analog) and will shut down shortly\"\nfalse true false false false\nRobotFaultCleared: \"showpatrolbot1\" Fault_Critical UnderVoltage \"Robot battery crit-\nically low\" \"The robot battery is critically low and will shut down shortly\" false true\nfalse false false\nRobotFaultCleared: \"showpatrolbot1\" Fault_Critical_Application fault1 \"shortdesc\" \"long-\ndesc\" false true true false false\nRobotFaultCleared: \"Sim2\" Fault_Application_ClearedOnAcknowledgement f1 \"s\" \"l\" false\nfalse true false true\nEndQueryFaults\nRelated Commands\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueModify Command (shortcut: qmod) on page 218\nqueueModify Command (shortcut: qmod) on page 218\nqueueMulti Command (shortcut: qm) on page 229\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 206\n\nqueryFaults Command (shortcut: qf)\nfalse true\nRobotFaultCleared: \"showpatrolbot1\" Fault EncoderDegraded \"Encoder degraded\" \"The\nrobot's encoders may be degraded\" false true false false false\nRobotFaultCleared: \"showpatrolbot1\" Fault_Driving EncoderFailed \"Encoder failed\" \"The\nrobot's encoders have failed, turn off the robot and contact your robot provider for\nmaintenance\" true true false false false\nRobotFaultCleared: \"showpatrolbot1\" Fault_Critical GyroFault \"Gyro fault\" \"The robot's\ngyro has had a critical fault, you may power cycle the robot and continue using it, but\nyou should also contact your robot provider for maintenance\" true true false false false\nRobotFaultCleared: \"showpatrolbot1\" Fault_Critical OverTemperatureAnalog \"Robot over-\nheated (analog)\" \"The robot is too hot (measured by analog) and will shut down shortly\"\nfalse true false false false\nRobotFaultCleared: \"showpatrolbot1\" Fault_Critical UnderVoltage \"Robot battery crit-\nically low\" \"The robot battery is critically low and will shut down shortly\" false true\nfalse false false\nRobotFaultCleared: \"showpatrolbot1\" Fault_Critical_Application fault1 \"shortdesc\" \"long-\ndesc\" false true true false false\nRobotFaultCleared: \"Sim2\" Fault_Application_ClearedOnAcknowledgement f1 \"s\" \"l\" false\nfalse true false true\nEndQueryFaults\nRelated Commands\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueModify Command (shortcut: qmod) on page 218\nqueueModify Command (shortcut: qmod) on page 218\nqueueMulti Command (shortcut: qm) on page 229\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 206",
    "Page 207": "queryMotors Command\nqueryMotors Command\nGets the state of the robot motors.\nSyntax\nqueryMotors\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nMotors <enabled or disabled>\nor\nEstop pressed\nor\nEstop relieved but motors still disabled\nDetails\nThe queryMotors command returns the current state of the robot motors. The response includes motors\nenable and e-stop status.\nExamples\nTo view the current state of the robot motors, enter:\nquerymotors\nThe command returns:\nMotors enabled\nWith an Estop event:\nEStop pressed\nEStop relieved but motors still disabled\nMotors enabled\nStopping\nStopped\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 207\n\nqueryMotors Command\nqueryMotors Command\nGets the state of the robot motors.\nSyntax\nqueryMotors\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nMotors <enabled or disabled>\nor\nEstop pressed\nor\nEstop relieved but motors still disabled\nDetails\nThe queryMotors command returns the current state of the robot motors. The response includes motors\nenable and e-stop status.\nExamples\nTo view the current state of the robot motors, enter:\nquerymotors\nThe command returns:\nMotors enabled\nWith an Estop event:\nEStop pressed\nEStop relieved but motors still disabled\nMotors enabled\nStopping\nStopped\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 207",
    "Page 208": "queryMotors Command\nHere's one with queries colorcoded (red == broadcasts, black are my queries and the responses to them):\nEStop pressed\nquerymotors\nEStop pressed\nEStop relieved but motors still disabled\nquerymotors\nEStop relieved but motors still disabled\nMotors enabled\nStopping\nStopped\nquerymotors\nMotors enabled\nThe motor disabled won't normally be seen (the old robots had buttons to do that, the new ones don't)...\nbut you can see it with the 4 0 above. It's:\nMotors disabled\nMotors enabled\nStopping\nStopped\nWith queries colorcoded (red == broadcasts, black are my queries and the responses to them):\nMotors disabled\nquerymotors\nMotors disabled\nMotors enabled\nStopping\nStopped\nquerymotors\nMotors enabled\nThe 'Stopping' and 'Stopped' shouldn't be mentioned because other things could happen there (if a robot\nwas docked, or if it had a pending job or something, it'd be different messages).\nRelated Commands\nqueryDockStatus Command on page 203\nstatus Command on page 276\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 208\n\nqueryMotors Command\nHere's one with queries colorcoded (red == broadcasts, black are my queries and the responses to them):\nEStop pressed\nquerymotors\nEStop pressed\nEStop relieved but motors still disabled\nquerymotors\nEStop relieved but motors still disabled\nMotors enabled\nStopping\nStopped\nquerymotors\nMotors enabled\nThe motor disabled won't normally be seen (the old robots had buttons to do that, the new ones don't)...\nbut you can see it with the 4 0 above. It's:\nMotors disabled\nMotors enabled\nStopping\nStopped\nWith queries colorcoded (red == broadcasts, black are my queries and the responses to them):\nMotors disabled\nquerymotors\nMotors disabled\nMotors enabled\nStopping\nStopped\nquerymotors\nMotors enabled\nThe 'Stopping' and 'Stopped' shouldn't be mentioned because other things could happen there (if a robot\nwas docked, or if it had a pending job or something, it'd be different messages).\nRelated Commands\nqueryDockStatus Command on page 203\nstatus Command on page 276\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 208",
    "Page 209": "queueCancel Command (shortcut: qc)\nqueueCancel Command (shortcut: qc)\nCancels a queued request for a robot by type or value.\nSyntax\nqueueCancel <type> <value> [echoString or \"default\"] [reason]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ntype\nEnter the type of job. Valid types are:\nl id = the pickup or dropoff identification\nl jobId = the job identification\nl robotName = the robot name\nl status = the item status.\nvalue\nEnter the value that corresponds with the type used:\nFor id, enter the pickup or dropoff identification, for example:\nPICKUP2\nFor jobId, enter the job identification, for example: JOB2\nFor robotName, enter the robot name, for example: robot_34\nFor status, enter one of the following values:\nl inprogress = cancels a job with an InProgress status.\nl pending = cancels a job with a Pending status.\nl interrupted = cancels a job with an Interrupted status.\nechoString\nAn optional string that is appended to each line of the results.\nreason\nAn optional string that can be used to provide a reason for the can-\ncellation.\nResponses\nThe command returns the following for a pending item:\nqueuecancel cancelling <cancelType> <cancelValue> <echoString> <reason> from queue\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 209\n\nqueueCancel Command (shortcut: qc)\nqueueCancel Command (shortcut: qc)\nCancels a queued request for a robot by type or value.\nSyntax\nqueueCancel\n <type> <value> [echoString or \"default\"] [reason]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ntype\nEnter the type of job. Valid types are:\nl\n id = the pickup or dropoff identification\nl\n jobId = the job identification\nl\n robotName = the robot name\nl\n status = the item status.\nvalue\nEnter the value that corresponds with the type used:\nFor id, enter the pickup or dropoff identification, for example:\nPICKUP2\nFor jobId, enter the job identification, for example: JOB2\nFor robotName, enter the robot name, for example: robot_34\nFor status, enter one of the following values:\nl\n inprogress = cancels a job with an InProgress status.\nl\n pending = cancels a job with a Pending status.\nl\n interrupted = cancels a job with an Interrupted status.\nechoString\nAn optional string that is appended to each line of the results.\nreason\nAn optional string that can be used to provide a reason for the can-\ncellation.\nResponses\nThe command returns the following for a pending item:\nqueuecancel cancelling <cancelType> <cancelValue> <echoString> <reason> from queue\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 209",
    "Page 210": "queueCancel Command (shortcut: qc)\nQueueUpdate: <id> <jobId> <priority> <status = Cancelled> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate> <com-\npletedTime> <echoString>\nThe command returns the following for an in-progress item:\nqueuecancel cancelling <cancelType> <cancelValue> <echoString> from queue\nQueueUpdate: <id> <jobId> <priority> <status = Cancelling> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate = None> <com-\npletedTime = None> <echoString>\nQueueUpdate: <id> <jobId> <priority> <status = Interrupted> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate = None> <com-\npletedTime = None> <failedCount>\nQueueUpdate: <id> <jobId> <priority> <status = Cancelled> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate> <com-\npletedTime> <failedCount>\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nDetails\nThe queueCancel command is used to cancel a queued robot request. The request can be canceled by type\n(such as the robot name or job identification) or by the request status.\nAn optional string can be specified, which will be appended to each line of the results.\nExamples\nIn the following example, a pending item in the queue is canceled.\nqueuepickup x\nqueuepickup goal \"x\" with priority 10, id PICKUP1 and jobId JOB1 successfully queued\nQueueUpdate: PICKUP1 JOB1 10 Pending None Goal \"x\" \"None\" 04/15/2015 6:32:47 None None 0\nqueuecancel jobid job1\nQueueUpdate cancelling \"jobid\" \"job1\" \"\" \"None\" from queue\nQueueUpdate: PICKUP1 JOB1 10 Cancelled None Goal \"x\" \"None\" 04/15/2015 6:32:47\n04/15/2015 6:32:53 \"\"\nIn the following example, a request that is in progress is canceled.\nQueueUpdate: PICKUP8 JOB8 10 InProgress None Goal \"w20\" MT-490 12/16/2014 13:19:07 None\nNone\nqueuecancel goal w20 abc\nQueueUpdate: PICKUP8 JOB8 10 Cancelling None Goal \"w20\" None 12/16/2014 13:19:07 None\nNone abc\nQueueUpdate: PICKUP8 JOB8 10 Interrupted None Goal \"w20\" None 12/16/2014 13:19:07 None\nNone\nQueueUpdate: PICKUP8 JOB8 10 Cancelled None Goal \"w20\" None 12/16/2014 13:19:07\n12/16/2014 13:19:13\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 210\n\nqueueCancel Command (shortcut: qc)\nQueueUpdate: <id> <jobId> <priority> <status = Cancelled> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate> <com-\npletedTime> <echoString>\nThe command returns the following for an in-progress item:\nqueuecancel cancelling <cancelType> <cancelValue> <echoString> from queue\nQueueUpdate: <id> <jobId> <priority> <status = Cancelling> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate = None> <com-\npletedTime = None> <echoString>\nQueueUpdate: <id> <jobId> <priority> <status = Interrupted> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate = None> <com-\npletedTime = None> <failedCount>\nQueueUpdate: <id> <jobId> <priority> <status = Cancelled> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate> <com-\npletedTime> <failedCount>\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nDetails\nThe queueCancel command is used to cancel a queued robot request. The request can be canceled by type\n(such as the robot name or job identification) or by the request status.\nAn optional string can be specified, which will be appended to each line of the results.\nExamples\nIn the following example, a pending item in the queue is canceled.\nqueuepickup x\nqueuepickup goal \"x\" with priority 10, id PICKUP1 and jobId JOB1 successfully queued\nQueueUpdate: PICKUP1 JOB1 10 Pending None Goal \"x\" \"None\" 04/15/2015 6:32:47 None None 0\nqueuecancel jobid job1\nQueueUpdate cancelling \"jobid\" \"job1\" \"\" \"None\" from queue\nQueueUpdate: PICKUP1 JOB1 10 Cancelled None Goal \"x\" \"None\" 04/15/2015 6:32:47\n04/15/2015 6:32:53 \"\"\nIn the following example, a request that is in progress is canceled.\nQueueUpdate: PICKUP8 JOB8 10 InProgress None Goal \"w20\" MT-490 12/16/2014 13:19:07 None\nNone\nqueuecancel goal w20 abc\nQueueUpdate: PICKUP8 JOB8 10 Cancelling None Goal \"w20\" None 12/16/2014 13:19:07 None\nNone abc\nQueueUpdate: PICKUP8 JOB8 10 Interrupted None Goal \"w20\" None 12/16/2014 13:19:07 None\nNone\nQueueUpdate: PICKUP8 JOB8 10 Cancelled None Goal \"w20\" None 12/16/2014 13:19:07\n12/16/2014 13:19:13\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 210",
    "Page 211": "queueCancel Command (shortcut: qc)\nIn the following example, a request that is in progress is canceled. The cancel request includes a reason for\nthe cancellation but no echo.\nQueueUpdate: PICKUP2 JOB2 10 InProgress After Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:04:59 None None 0\nqueuecancel id pickup2 default reason\nqueuecancel cancelling \"id\" \"pickup2\" \"\" \"reason\" from queue\nQueueUpdate: PICKUP2 JOB2 10 Cancelling reason Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:04:59 None None \"\"\nQueueUpdate: PICKUP2 JOB2 10 Interrupted None Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:04:59 None None 0\nQueueUpdate: PICKUP2 JOB2 10 Cancelled reason Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:04:59 01/21/2014 15:05:40 0\nIn the following example, a request that is in progress is canceled. The cancel request includes no reason\nfor the cancellation and no echo.\nQueueUpdate: PICKUP3 JOB3 10 InProgress After Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:07:58 None None 0\nqueuecancel jobid job3\nQueueUpdate cancelling \"jobid\" \"job3\" \"\" \"None\" from queue\nQueueCancel: PICKUP3 JOB3 10 Cancelling None Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:07:58 None None \"\"\nQueueUpdate: PICKUP3 JOB3 10 Interrupted None Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:07:58 None None 0\nQueueUpdate: PICKUP3 JOB3 10 Cancelled None Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:07:58 01/21/2014 15:08:32 0\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 211\n\nqueueCancel Command (shortcut: qc)\nIn the following example, a request that is in progress is canceled. The cancel request includes a reason for\nthe cancellation but no echo.\nQueueUpdate: PICKUP2 JOB2 10 InProgress After Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:04:59 None None 0\nqueuecancel id pickup2 default reason\nqueuecancel cancelling \"id\" \"pickup2\" \"\" \"reason\" from queue\nQueueUpdate: PICKUP2 JOB2 10 Cancelling reason Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:04:59 None None \"\"\nQueueUpdate: PICKUP2 JOB2 10 Interrupted None Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:04:59 None None 0\nQueueUpdate: PICKUP2 JOB2 10 Cancelled reason Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:04:59 01/21/2014 15:05:40 0\nIn the following example, a request that is in progress is canceled. The cancel request includes no reason\nfor the cancellation and no echo.\nQueueUpdate: PICKUP3 JOB3 10 InProgress After Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:07:58 None None 0\nqueuecancel jobid job3\nQueueUpdate cancelling \"jobid\" \"job3\" \"\" \"None\" from queue\nQueueCancel: PICKUP3 JOB3 10 Cancelling None Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:07:58 None None \"\"\nQueueUpdate: PICKUP3 JOB3 10 Interrupted None Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:07:58 None None 0\nQueueUpdate: PICKUP3 JOB3 10 Cancelled None Goal \"w20\" \"guiabot_2010_09_20\" 01/21/2014\n15:07:58 01/21/2014 15:08:32 0\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 211",
    "Page 212": "queueCancelLocal Command (shortcut:\u00a0qcl)\nqueueCancelLocal Command (shortcut:\u00a0qcl)\nCancels a queued request for a robot by type or value.\nSyntax\nqueueCancelLocal <type> <value> [echoString] [reason]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nBecause the queueCancelLocal command is only available on the robot, it assumes it applies only to the\nitems queued for that robot. This is a powerful difference (and feature) of the \"local\" version of the com-\nmand. So, for example, a \"queueCancelLocal status inprogress\" command would allow you to cancel,\nbased on inprogress status, all jobs queued for that particular robot.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ntype\nEnter the type of job. Valid types are:\nl id = the pickup or dropoff identification\nl jobId = the job identification\nl robotName = the robot name\nl status = the item status.\nvalue\nEnter the value that corresponds with the type used:\nFor id, enter the pickup or dropoff identification, for example:\nPICKUP2\nFor jobId, enter the job identification, for example: JOB2\nFor status, enter one of the following values:\nl inprogress = queries a job with an InProgress status.\nl pending = queries a job with a Pending status.\nl interrupted = queries a job with an Interrupted status.\nNOTE:\u00a0The value is ignored if type is <robotname>.\nechoString\nAn optional string that is appended to each line of the results.\nreason\nAn optional string that can be used to provide a reason for the can-\ncellation.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 212\n\nqueueCancelLocal Command (shortcut:\u00a0qcl)\nqueueCancelLocal Command (shortcut:\u00a0qcl)\nCancels a queued request for a robot by type or value.\nSyntax\nqueueCancelLocal\n <type> <value> [echoString] [reason]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nBecause the queueCancelLocal command is only available on the robot, it assumes it applies only to the\nitems queued for that robot. This is a powerful difference (and feature) of the \"local\" version of the com-\nmand. So, for example, a \"queueCancelLocal status inprogress\" command would allow you to cancel,\nbased on inprogress status, all jobs queued for that particular robot.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ntype\nEnter the type of job. Valid types are:\nl\n id = the pickup or dropoff identification\nl\n jobId = the job identification\nl\n robotName = the robot name\nl\n status = the item status.\nvalue\nEnter the value that corresponds with the type used:\nFor id, enter the pickup or dropoff identification, for example:\nPICKUP2\nFor jobId, enter the job identification, for example: JOB2\nFor status, enter one of the following values:\nl\n inprogress = queries a job with an InProgress status.\nl\n pending = queries a job with a Pending status.\nl\n interrupted = queries a job with an Interrupted status.\nNOTE\n:\u00a0The value is ignored if type is <robotname>.\nechoString\nAn optional string that is appended to each line of the results.\nreason\nAn optional string that can be used to provide a reason for the can-\ncellation.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 212",
    "Page 213": "queueCancelLocal Command (shortcut:\u00a0qcl)\nResponses\nThe command returns the following for a pending item:\nqueuecancel cancelling <cancelType> <cancelValue> <echoString> <reason> from queue\nQueueUpdate: <id> <jobId> <priority> <status = Cancelled> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate> <com-\npletedTime> <echoString>\nThe command returns the following for an in-progress item:\nqueuecancel cancelling <cancelType> <cancelValue> <echoString> from queue\nQueueUpdate: <id> <jobId> <priority> <status = Cancelling> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate = None> <com-\npletedTime = None> <echoString>\nQueueUpdate: <id> <jobId> <priority> <status = Interrupted> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate = None> <com-\npletedTime = None> <failedCount>\nQueueUpdate: <id> <jobId> <priority> <status = Cancelled> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate> <com-\npletedTime> <failedCount>\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nDetails\nBecause the queueCancelLocal command is only available on the robot, it assumes it applies only to the\nitems queued for that robot. This is a powerful difference (and feature) of the \"local\" version of the com-\nmand. So, for example, a \"queueCancelLocal status inprogress\" command would allow you to cancel, based\non inprogress status, all jobs queued for that particular robot.\nAn optional string can be specified, which will be appended to each line of the results.\nExample\nThe following example uses cancellocal with robotname (Note: robotname value field is ignored).\nqueuecancellocal robotname\nqueuecancel attempting to cancel \"robotname\" \"Bullwinkle-[.53]\" \"\" \"None\"\nqueuecancel cancelling \"robotname\" \"Bullwinkle-[.53]\" \"\" \"None\" from queue\nQueueCancel: DROPOFF18 JOB18 20 Cancelling None Goal \"w20\" \"Bullwinkle-[.53]\" 01/21/2014\n15:15:30 None None \"\"\nQueueUpdate: DROPOFF18 JOB18 20 Interrupted None Goal \"w20\" \"Bullwinkle-[.53]\" 01/21/2014\n15:15:30 None None 0\nQueueUpdate: DROPOFF18 JOB18 20 Cancelled None Goal \"w20\" \"Bullwinkle-[.53]\" 01/21/2014\n15:15:30 01/21/2014 15:16:07 0\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 213\n\nqueueCancelLocal Command (shortcut:\u00a0qcl)\nResponses\nThe command returns the following for a pending item:\nqueuecancel cancelling <cancelType> <cancelValue> <echoString> <reason> from queue\nQueueUpdate: <id> <jobId> <priority> <status = Cancelled> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate> <com-\npletedTime> <echoString>\nThe command returns the following for an in-progress item:\nqueuecancel cancelling <cancelType> <cancelValue> <echoString> from queue\nQueueUpdate: <id> <jobId> <priority> <status = Cancelling> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate = None> <com-\npletedTime = None> <echoString>\nQueueUpdate: <id> <jobId> <priority> <status = Interrupted> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate = None> <com-\npletedTime = None> <failedCount>\nQueueUpdate: <id> <jobId> <priority> <status = Cancelled> <subStatus = reason_or_None>\nGoal <\"goalName\"> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate> <com-\npletedTime> <failedCount>\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nDetails\nBecause the queueCancelLocal command is only available on the robot, it assumes it applies only to the\nitems queued for that robot. This is a powerful difference (and feature) of the \"local\" version of the com-\nmand. So, for example, a \"queueCancelLocal status inprogress\" command would allow you to cancel, based\non inprogress status, all jobs queued for that particular robot.\nAn optional string can be specified, which will be appended to each line of the results.\nExample\nThe following example uses cancellocal with robotname (Note: robotname value field is ignored).\nqueuecancellocal robotname\nqueuecancel attempting to cancel \"robotname\" \"Bullwinkle-[.53]\" \"\" \"None\"\nqueuecancel cancelling \"robotname\" \"Bullwinkle-[.53]\" \"\" \"None\" from queue\nQueueCancel: DROPOFF18 JOB18 20 Cancelling None Goal \"w20\" \"Bullwinkle-[.53]\" 01/21/2014\n15:15:30 None None \"\"\nQueueUpdate: DROPOFF18 JOB18 20 Interrupted None Goal \"w20\" \"Bullwinkle-[.53]\" 01/21/2014\n15:15:30 None None 0\nQueueUpdate: DROPOFF18 JOB18 20 Cancelled None Goal \"w20\" \"Bullwinkle-[.53]\" 01/21/2014\n15:15:30 01/21/2014 15:16:07 0\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 213",
    "Page 214": "queueCancelLocal Command (shortcut:\u00a0qcl)\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 214\n\nqueueCancelLocal Command (shortcut:\u00a0qcl)\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 214",
    "Page 215": "queueDropoff Command (shortcut: qd)\nqueueDropoff Command (shortcut: qd)\nQueues the robot to the dropoff goal.\nSyntax\nqueueDropoff <goalName> [priority] [jobId]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nARAM Settings\nIn order to use this feature, you have to explicitly enable it in the MobilePlanner software, by setting the\nEnterpriseQueuing argument in the Enterprise Features section of the Configuration > Enterprise tab.\nParameters\nThe queueDropoff arguments are described in the table below.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ngoalName\nEnter the name of the goal where you want the mobile robot to\nmake a delivery.\npriority\nEnter an optional integer value that represents the priority of the\ndropoff request. The higher the number, the sooner Enterprise Man-\nager is going to service the item. The default priority is 10, which\ncan be changed in MobilePlanner.\njobId\nEnter an optional identifier for the specified job. You can use a com-\nbination of string characters and integers. The jobId is helpful in\ntracking the job. If nothing is entered, ARCL generates a random\njobId.\nResponses\nThe command returns:\nqueuedropoff attempting to queue goal <goalName> <priority> <jobId>\nqueuedropoff goal <goalName> with priority <priority> id <id> and job_id <jobId> suc-\ncessfully queued\nQueueUpdate: <id> <jobId> <priority> <status> <substatus> Goal <goalName>\n<robotName>\n<queuedDate> <queuedTime> <completedDate> <completedTime> <failedCount>\u00a0\u00a0\u00a0\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 215\n\nqueueDropoff Command (shortcut: qd)\nqueueDropoff Command (shortcut: qd)\nQueues the robot to the dropoff goal.\nSyntax\nqueueDropoff\n <goalName> [priority] [jobId]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nARAM Settings\nIn order to use this feature, you have to explicitly enable it in the MobilePlanner software, by setting the\nEnterpriseQueuing argument in the Enterprise Features section of the\n Configuration > Enterprise\n tab.\nParameters\nThe queueDropoff arguments are described in the table below.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ngoalName\nEnter the name of the goal where you want the mobile robot to\nmake a delivery.\npriority\nEnter an optional integer value that represents the priority of the\ndropoff request. The higher the number, the sooner Enterprise Man-\nager is going to service the item. The default priority is 10, which\ncan be changed in MobilePlanner.\njobId\nEnter an optional identifier for the specified job. You can use a com-\nbination of string characters and integers. The jobId is helpful in\ntracking the job. If nothing is entered, ARCL generates a random\njobId.\nResponses\nThe command returns:\nqueuedropoff attempting to queue goal <goalName> <priority> <jobId>\nqueuedropoff goal <goalName> with priority <priority> id <id> and job_id <jobId> suc-\ncessfully queued\nQueueUpdate: <id> <jobId> <priority> <status> <substatus> Goal <goalName>\n<robotName>\n<queuedDate> <queuedTime> <completedDate> <completedTime> <failedCount>\u00a0\u00a0\u00a0\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 215",
    "Page 216": "queueDropoff Command (shortcut: qd)\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nDetails\nThe queueDropoff command tells the mobile robot to go to a specified goal, typically to make a delivery.\nExamples\nThe following example shows a queuedropoff at goal x with priority 22, job_id y4rt.\nqueuedropoff x 22 y4rt\nqueuedropoff attempting to queue goal \"x\" with priority 22\nqueuedropoff goal \"x\" with priority 22, id DROPOFF18 and job_id y4rt successfully queued\nQueueUpdate: DROPOFF18 y4rt 22 Pending None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None\nNone 0\nGoing to X\nQueueUpdate: DROPOFF18 y4rt 22 InProgress UnAllocated Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress Allocated Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress BeforeDropoff Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress BeforeEvery Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress Before Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53\nNone None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress Driving Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53\nNone None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress After Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53\nNone None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress AfterEvery Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress AfterPickup Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None None 0\nArrived at X\nQueueUpdate: DROPOFF18 y4rt 22 Completed None Goal \"x\" \u201cMT-490\u201d 01/19/2011\n07:07:53\n01/19/2011\n07:08:07 0\nRelated Commands\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 216\n\nqueueDropoff Command (shortcut: qd)\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nDetails\nThe queueDropoff command tells the mobile robot to go to a specified goal, typically to make a delivery.\nExamples\nThe following example shows a queuedropoff at goal x with priority 22, job_id y4rt.\nqueuedropoff x 22 y4rt\nqueuedropoff attempting to queue goal \"x\" with priority 22\nqueuedropoff goal \"x\" with priority 22, id DROPOFF18 and job_id y4rt successfully queued\nQueueUpdate: DROPOFF18 y4rt 22 Pending None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None\nNone 0\nGoing to X\nQueueUpdate: DROPOFF18 y4rt 22 InProgress UnAllocated Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress Allocated Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress BeforeDropoff Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress BeforeEvery Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress Before Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53\nNone None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress Driving Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53\nNone None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress After Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53\nNone None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress AfterEvery Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None None 0\nQueueUpdate: DROPOFF18 y4rt 22 InProgress AfterPickup Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:07:53 None None 0\nArrived at X\nQueueUpdate: DROPOFF18 y4rt 22 Completed None Goal \"x\" \u201cMT-490\u201d 01/19/2011\n07:07:53\n01/19/2011\n07:08:07 0\nRelated Commands\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 216",
    "Page 217": "queueDropoff Command (shortcut: qd)\nqueueShow Command (shortcut: qs) on page 247\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 217\n\nqueueDropoff Command (shortcut: qd)\nqueueShow Command (shortcut: qs) on page 247\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 217",
    "Page 218": "queueModify Command (shortcut: qmod)\nqueueModify Command (shortcut: qmod)\nAllows modification of goal and priority for job segments in these job types:\nl PickupDropoff\nl Pickups\nl Dropoffs\nl Swaps\nl QueueMulti\nAllows modification of segments in these states:\nl Pending job segments\nl InProgress jobs up to and including \u201cInProgressDriving\u201d, but not after\nChanging the priority for the first segment in a job may change the order in which it gets assigned.\nChanging the priority of other segments in the job will never change the order in which the job is assigned.\nThe queue time for a job will never be changed as a result of a queueModify command,\nChanging the shared goal in a swap will break the link between the two jobs. Changing the other goals in\nthe swap will not break the link.\nModified jobs will be candidates for swaps. The linking would occur immediately following the modify\nSyntax\nqueueModify <id> <type> <value>\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nARAM Settings\nIn order to use this feature, you have to explicitly enable it in the MobilePlanner software, by setting the\nEnterpriseQueuing argument in the Enterprise Features section of the Configuration > Enterprise tab.\nParameters\nThe queueModify arguments are described in the table below.\nFor details on the data types, see Data Types on page 48.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 218\n\nqueueModify Command (shortcut: qmod)\nqueueModify Command (shortcut: qmod)\nAllows modification of goal and priority for job segments in these job types:\nl\n PickupDropoff\nl\n Pickups\nl\n Dropoffs\nl\n Swaps\nl\n QueueMulti\nAllows modification of segments in these states:\nl\n Pending job segments\nl\n InProgress jobs up to and including \u201cInProgressDriving\u201d, but not after\nChanging the priority for the first segment in a job may change the order in which it gets assigned.\nChanging the priority of other segments in the job will never change the order in which the job is assigned.\nThe queue time for a job will never be changed as a result of a queueModify command,\nChanging the shared goal in a swap will break the link between the two jobs. Changing the other goals in\nthe swap will not break the link.\nModified jobs will be candidates for swaps. The linking would occur immediately following the modify\nSyntax\nqueueModify\n <id> <type> <value>\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nARAM Settings\nIn order to use this feature, you have to explicitly enable it in the MobilePlanner software, by setting the\nEnterpriseQueuing argument in the Enterprise Features section of the\n Configuration > Enterprise\n tab.\nParameters\nThe queueModify arguments are described in the table below.\nFor details on the data types, see Data Types on page 48.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 218",
    "Page 219": "queueModify Command (shortcut: qmod)\nParameter\nDefinition\n<id>\nEnter the string id for the job segment you wish to modify (either\nPICKUPxx or DROPOFFxx)\n<type>\nEnter the type of modification. Valid types are:\nl goal = the goal identification\nl priority = the priority level\n<value>\nEnter the value that corresponds with the type used:\nFor goal, enter the goal identification, for example: goal_1\nFor priority, enter the priority level, for example: 10\nResponses\nReturns (for goal modify of a pending item)\nqueuemodify modifying id <id> goal <\u201dmodifiedGoal\u201d>\nQueueUpdate: <id> <jobId> <priority> BeforeModify None Goal <goal> \"None\" <queuedDate>\n<queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> AfterModify None Goal <modifiedGoal> \"None\"\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> Pending None Goal <modifiedGoal> \"None\" <queuedDate>\n<queuedTime> None None 0\nReturns (for priority modify of a pending item)\nqueuemodify modifying id <id> priority <modifiedpriority>\nQueueUpdate: <id> <jobId> <priority> BeforeModify None Goal <goal> \"None\" <queuedDate>\n<queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> AfterModify None Goal <goal> \"None\"\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> Pending None Goal <modifiedGoal> \"None\"\n<queuedDate> <queuedTime> None None 0\nReturns (for goal modify of an in-progress item)\nqueuemodify modifying id <id> goal <modifiedGoal>\nQueueUpdate: <id> <jobId> <priority> BeforeModify Driving Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> InterruptedByModify None Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> AfterModify None Goal <modifiedGoal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> Pending None Goal <modifiedGoal> \"None\" <queuedDate>\n<queuedTime> None None 0\nReturns (for priority modify of an in-progress item)\nqueuemodify modifying id <id> priority <modifiedPriority>\nQueueUpdate: <id> <jobId> <priority> BeforeModify Driving Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> InterruptedByModify None Goal <goal> <robot>\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 219\n\nqueueModify Command (shortcut: qmod)\nParameter\nDefinition\n<id>\nEnter the string id for the job segment you wish to modify (either\nPICKUPxx or DROPOFFxx)\n<type>\nEnter the type of modification. Valid types are:\nl\n goal = the goal identification\nl\n priority = the priority level\n<value>\nEnter the value that corresponds with the type used:\nFor goal, enter the goal identification, for example: goal_1\nFor priority, enter the priority level, for example: 10\nResponses\nReturns (for goal modify of a pending item)\nqueuemodify modifying id <id> goal <\u201dmodifiedGoal\u201d>\nQueueUpdate: <id> <jobId> <priority> BeforeModify None Goal <goal> \"None\" <queuedDate>\n<queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> AfterModify None Goal <modifiedGoal> \"None\"\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> Pending None Goal <modifiedGoal> \"None\" <queuedDate>\n<queuedTime> None None 0\nReturns (for priority modify of a pending item)\nqueuemodify modifying id <id> priority <modifiedpriority>\nQueueUpdate: <id> <jobId> <priority> BeforeModify None Goal <goal> \"None\" <queuedDate>\n<queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> AfterModify None Goal <goal> \"None\"\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> Pending None Goal <modifiedGoal> \"None\"\n<queuedDate> <queuedTime> None None 0\nReturns (for goal modify of an in-progress item)\nqueuemodify modifying id <id> goal <modifiedGoal>\nQueueUpdate: <id> <jobId> <priority> BeforeModify Driving Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> InterruptedByModify None Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> AfterModify None Goal <modifiedGoal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> Pending None Goal <modifiedGoal> \"None\" <queuedDate>\n<queuedTime> None None 0\nReturns (for priority modify of an in-progress item)\nqueuemodify modifying id <id> priority <modifiedPriority>\nQueueUpdate: <id> <jobId> <priority> BeforeModify Driving Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> InterruptedByModify None Goal <goal> <robot>\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 219",
    "Page 220": "queueModify Command (shortcut: qmod)\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> AfterModify None Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> Pending None Goal <goal> \"None\"\n<queuedDate> <queuedTime> None None 0\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nDetails\nThe queueModify command allows modification of goal or priority values for job segments in these job\ntypes:\nl Pickup-dropoff\nl Pickups\nl QueueMulti\nIt allows modification of segments in these states:\nl Pending job segments\nl InProgress jobs up to and including \u201cInProgress Driving\u201d, but not after\nChanging the priority for the first segment in a job may change the order in which it gets assigned.\nChanging the priority of other segments in the job will never change the order in which the job is assigned.\nThe queue time for a job will never be changed as a result of a queueModify command.\nChanging the shared goal in a swap will break the link between the two jobs. Changing the other goals in\nthe swap will not break the link.\nModified jobs will be candidates for swaps. The linking would occur immediately following the modify.\nExamples\nExample #1 \u2013 goal modify of a pending item:\nqueuePickup t\nqueuePickup goal \"t\" with priority 10 id PICKUP5 and jobId JOB5 successfully queued\nQueueUpdate: PICKUP5 JOB5 10 Pending None Goal \"t\" \"None\" 03/25/2015 07:36:58 None None\n0\nqueuemodify pickup5 goal w20\nqueuemodify modifying id pickup5 goal \"w20\"\nQueueUpdate: PICKUP5 JOB5 10 BeforeModify None Goal \"t\" \"None\" 03/25/2015 07:36:58 None\nNone 0\nQueueUpdate: PICKUP5 JOB5 10 AfterModify None Goal \"w20\" \"None\" 03/25/2015 07:36:58 None\nNone 0\nQueueUpdate: PICKUP5 JOB5 10 Pending None Goal \"w20\" \"None\" 03/25/2015 07:36:58 None\nNone 0\nqueueDropoff y\nqueueDropoff attempting to queue goal \"y\" using default priority\nqueueDropoff goal \"y\" with priority 20 id DROPOFF6 and jobId JOB6 successfully queued\nQueueUpdate: DROPOFF6 JOB6 20 Pending None Goal \"y\" \"robotOne\" 03/25/2015 07:38:09 None\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 220\n\nqueueModify Command (shortcut: qmod)\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> AfterModify None Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> Pending None Goal <goal> \"None\"\n<queuedDate> <queuedTime> None None 0\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nDetails\nThe queueModify command allows modification of goal or priority values for job segments in these job\ntypes:\nl\n Pickup-dropoff\nl\n Pickups\nl\n QueueMulti\nIt allows modification of segments in these states:\nl\n Pending job segments\nl\n InProgress jobs up to and including \u201cInProgress Driving\u201d, but not after\nChanging the priority for the first segment in a job may change the order in which it gets assigned.\nChanging the priority of other segments in the job will never change the order in which the job is assigned.\nThe queue time for a job will never be changed as a result of a queueModify command.\nChanging the shared goal in a swap will break the link between the two jobs. Changing the other goals in\nthe swap will not break the link.\nModified jobs will be candidates for swaps. The linking would occur immediately following the modify.\nExamples\nExample #1 \u2013 goal modify of a pending item:\nqueuePickup t\nqueuePickup goal \"t\" with priority 10 id PICKUP5 and jobId JOB5 successfully queued\nQueueUpdate: PICKUP5 JOB5 10 Pending None Goal \"t\" \"None\" 03/25/2015 07:36:58 None None\n0\nqueuemodify pickup5 goal w20\nqueuemodify modifying id pickup5 goal \"w20\"\nQueueUpdate: PICKUP5 JOB5 10 BeforeModify None Goal \"t\" \"None\" 03/25/2015 07:36:58 None\nNone 0\nQueueUpdate: PICKUP5 JOB5 10 AfterModify None Goal \"w20\" \"None\" 03/25/2015 07:36:58 None\nNone 0\nQueueUpdate: PICKUP5 JOB5 10 Pending None Goal \"w20\" \"None\" 03/25/2015 07:36:58 None\nNone 0\nqueueDropoff y\nqueueDropoff attempting to queue goal \"y\" using default priority\nqueueDropoff goal \"y\" with priority 20 id DROPOFF6 and jobId JOB6 successfully queued\nQueueUpdate: DROPOFF6 JOB6 20 Pending None Goal \"y\" \"robotOne\" 03/25/2015 07:38:09 None\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 220",
    "Page 221": "queueModify Command (shortcut: qmod)\nNone 0\nqueuemodifylocal dropoff6 goal x\nqueuemodifylocal modifying id dropoff6 goal \"x\"\nQueueUpdate: DROPOFF6 JOB6 20 BeforeModify None Goal \"y\" \"robotOne\" 03/25/2015 07:38:09\nNone None 0\nQueueUpdate: DROPOFF6 JOB6 20 AfterModify None Goal \"x\" \"robotOne\" 03/25/2015 07:38:09\nNone None 0\nQueueUpdate: DROPOFF6 JOB6 20 Pending None Goal \"x\" \"robotOne\" 03/25/2015 07:38:09 None\nNone 0\nExample #2 \u2013 priority modify of a pending item:\nqueueDropoff w20\nqueueDropoff attempting to queue goal \"w20\" using default priority\nqueueDropoff goal \"w20\" with priority 20 id DROPOFF7 and jobId JOB7 successfully queued\nQueueUpdate: DROPOFF7 JOB7 20 Pending None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01 None\nNone 0\nqueuemodifylocal dropoff7 priority 22\nqueuemodifylocal modifying id dropoff7 priority 22\nQueueUpdate: DROPOFF7 JOB7 20 BeforeModify None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01\nNone None 0\nQueueUpdate: DROPOFF7 JOB7 22 AfterModify None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01\nNone None 0\nQueueUpdate: DROPOFF7 JOB7 22 Pending None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01 None\nNone 0\nqueuePickup v\nqueuePickup goal \"v\" with priority 10 id PICKUP8 and jobId JOB8 successfully queued\nQueueUpdate: PICKUP8 JOB8 10 Pending None Goal \"v\" \"None\" 03/25/2015 07:40:24 None None 0\nqueuemodify pickup8 priority 6\nqueuemodify modifying id pickup8 priority 6\nQueueUpdate: PICKUP8 JOB8 10 BeforeModify None Goal \"v\" \"None\" 03/25/2015 07:40:24 None\nNone 0\nQueueUpdate: PICKUP8 JOB8 6 AfterModify None Goal \"v\" \"None\" 03/25/2015 07:40:24 None\nNone 0\nQueueUpdate: PICKUP8 JOB8 6 Pending None Goal \"v\" \"None\" 03/25/2015 07:40:24 None None 0\nExample #3 \u2013 goal modify of an inProgress item:\nqueuePickup x\nqueuePickup goal \"x\" with priority 10 id PICKUP9 and jobId JOB9 successfully queued\nQueueUpdate: PICKUP9 JOB9 10 Pending None Goal \"x\" \"None\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress UnAllocated Goal \"x\" \"robotTwo\" 03/25/2015\n07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Allocated Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21\nNone None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Driving Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21\nNone None 0\nqueuemodify pickup9 goal y\nqueuemodify modifying id pickup9 goal \"y\"\nQueueUpdate: PICKUP9 JOB9 10 BeforeModify Driving Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21\nNone None 0\nQueueUpdate: PICKUP9 JOB9 10 InterruptedByModify None Goal \"x\" \"robotTwo\" 03/25/2015\n07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 AfterModify None Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 221\n\nqueueModify Command (shortcut: qmod)\nNone 0\nqueuemodifylocal dropoff6 goal x\nqueuemodifylocal modifying id dropoff6 goal \"x\"\nQueueUpdate: DROPOFF6 JOB6 20 BeforeModify None Goal \"y\" \"robotOne\" 03/25/2015 07:38:09\nNone None 0\nQueueUpdate: DROPOFF6 JOB6 20 AfterModify None Goal \"x\" \"robotOne\" 03/25/2015 07:38:09\nNone None 0\nQueueUpdate: DROPOFF6 JOB6 20 Pending None Goal \"x\" \"robotOne\" 03/25/2015 07:38:09 None\nNone 0\nExample #2 \u2013 priority modify of a pending item:\nqueueDropoff w20\nqueueDropoff attempting to queue goal \"w20\" using default priority\nqueueDropoff goal \"w20\" with priority 20 id DROPOFF7 and jobId JOB7 successfully queued\nQueueUpdate: DROPOFF7 JOB7 20 Pending None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01 None\nNone 0\nqueuemodifylocal dropoff7 priority 22\nqueuemodifylocal modifying id dropoff7 priority 22\nQueueUpdate: DROPOFF7 JOB7 20 BeforeModify None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01\nNone None 0\nQueueUpdate: DROPOFF7 JOB7 22 AfterModify None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01\nNone None 0\nQueueUpdate: DROPOFF7 JOB7 22 Pending None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01 None\nNone 0\nqueuePickup v\nqueuePickup goal \"v\" with priority 10 id PICKUP8 and jobId JOB8 successfully queued\nQueueUpdate: PICKUP8 JOB8 10 Pending None Goal \"v\" \"None\" 03/25/2015 07:40:24 None None 0\nqueuemodify pickup8 priority 6\nqueuemodify modifying id pickup8 priority 6\nQueueUpdate: PICKUP8 JOB8 10 BeforeModify None Goal \"v\" \"None\" 03/25/2015 07:40:24 None\nNone 0\nQueueUpdate: PICKUP8 JOB8 6 AfterModify None Goal \"v\" \"None\" 03/25/2015 07:40:24 None\nNone 0\nQueueUpdate: PICKUP8 JOB8 6 Pending None Goal \"v\" \"None\" 03/25/2015 07:40:24 None None 0\nExample #3 \u2013 goal modify of an inProgress item:\nqueuePickup x\nqueuePickup goal \"x\" with priority 10 id PICKUP9 and jobId JOB9 successfully queued\nQueueUpdate: PICKUP9 JOB9 10 Pending None Goal \"x\" \"None\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress UnAllocated Goal \"x\" \"robotTwo\" 03/25/2015\n07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Allocated Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21\nNone None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Driving Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21\nNone None 0\nqueuemodify pickup9 goal y\nqueuemodify modifying id pickup9 goal \"y\"\nQueueUpdate: PICKUP9 JOB9 10 BeforeModify Driving Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21\nNone None 0\nQueueUpdate: PICKUP9 JOB9 10 InterruptedByModify None Goal \"x\" \"robotTwo\" 03/25/2015\n07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 AfterModify None Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21\nAdept ARCL Reference Guide, Updated: 9:26:54 AM\nPage 221",
    "Page 222": "queueModify Command (shortcut: qmod)\nNone None 0\nQueueUpdate: PICKUP9 JOB9 10 Pending None Goal \"y\" \"None\" 03/25/2015 07:47:21 None None\n0\nQueueUpdate: PICKUP9 JOB9 10 InProgress UnAllocated Goal \"y\" \"robotTwo\" 03/25/2015\n07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Allocated Goal \"y\" \"robotTwo\" 03/25/2015\n07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Driving Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21\nNone None 0\nQueueUpdate: PICKUP9 JOB9 10 Completed None Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21\n03/25/2015 07:48:00 0\nExample #4 \u2013 priority modify of an inProgress item:\nqueuePickup t\nqueuePickup goal \"t\" with priority 10 id PICKUP10 and jobId JOB10 successfully queued\nQueueUpdate: PICKUP10 JOB10 10 Pending None Goal \"t\" \"None\" 03/25/2015 07:49:34 None\nNone 0\nQueueUpdate: PICKUP10 JOB10 10 InProgress UnAllocated Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InProgress Allocated Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InProgress Driving Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nqueuemodify pickup10 priority 13\nqueuemodify modifying id pickup10 priority 13\nQueueUpdate: PICKUP10 JOB10 10 BeforeModify Driving Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InterruptedByModify None Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 AfterModify None Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34\nNone None 0\nQueueUpdate: PICKUP10 JOB10 13 Pending None Goal \"t\" \"None\" 03/25/2015 07:49:34 None\nNone 0\nQueueUpdate: PICKUP10 JOB10 13 InProgress UnAllocated Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 InProgress Allocated Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 InProgress Driving Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 Completed None Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34\n03/25/2015 07:49:46 0\nRelated Commands\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueMulti Command (shortcut: qm) on page 229\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 222\n\nqueueModify Command (shortcut: qmod)\nNone None 0\nQueueUpdate: PICKUP9 JOB9 10 Pending None Goal \"y\" \"None\" 03/25/2015 07:47:21 None None\n0\nQueueUpdate: PICKUP9 JOB9 10 InProgress UnAllocated Goal \"y\" \"robotTwo\" 03/25/2015\n07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Allocated Goal \"y\" \"robotTwo\" 03/25/2015\n07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Driving Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21\nNone None 0\nQueueUpdate: PICKUP9 JOB9 10 Completed None Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21\n03/25/2015 07:48:00 0\nExample #4 \u2013 priority modify of an inProgress item:\nqueuePickup t\nqueuePickup goal \"t\" with priority 10 id PICKUP10 and jobId JOB10 successfully queued\nQueueUpdate: PICKUP10 JOB10 10 Pending None Goal \"t\" \"None\" 03/25/2015 07:49:34 None\nNone 0\nQueueUpdate: PICKUP10 JOB10 10 InProgress UnAllocated Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InProgress Allocated Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InProgress Driving Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nqueuemodify pickup10 priority 13\nqueuemodify modifying id pickup10 priority 13\nQueueUpdate: PICKUP10 JOB10 10 BeforeModify Driving Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InterruptedByModify None Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 AfterModify None Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34\nNone None 0\nQueueUpdate: PICKUP10 JOB10 13 Pending None Goal \"t\" \"None\" 03/25/2015 07:49:34 None\nNone 0\nQueueUpdate: PICKUP10 JOB10 13 InProgress UnAllocated Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 InProgress Allocated Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 InProgress Driving Goal \"t\" \"robotTwo\" 03/25/2015\n07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 Completed None Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34\n03/25/2015 07:49:46 0\nRelated Commands\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueMulti Command (shortcut: qm) on page 229\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 222",
    "Page 223": "queueModify Command (shortcut: qmod)\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueryFaults Command (shortcut: qf) on page 204\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 223\n\nqueueModify Command (shortcut: qmod)\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueryFaults Command (shortcut: qf) on page 204\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 223",
    "Page 224": "queueModifyLocal Command (shortcut: qmodl)\nqueueModifyLocal Command (shortcut: qmodl)\nAllows modification of goal and priority for job segments in these job types:\nl Dropoffs\nl Swaps\nAllows modification of segments in these states:\nl Pending job segments\nl InProgress jobs up to and including \u201cInProgressDriving\u201d, but not after\nSyntax\nqueueModifyLocal <id> <type> <value>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nBecause the queueModifyLocal command is only available on the robot, it assumes it applies only to the\nitems queued for that robot. This is a powerful difference (and feature) of the \"local\" version of the com-\nmand.\nARAM Settings\nIn order to use this feature, you have to explicitly enable it in the MobilePlanner software, by setting the\nEnterpriseQueuing argument in the Enterprise Features section of the Configuration > Enterprise tab.\nParameters\nThe queueModifyLocal arguments are described in the table below.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\n<id>\nEnter the string id for the job segment you wish to modify (either\nPICKUPxx or DROPOFFxx)\n<type>\nEnter the type of modification. Valid types are:\nl goal = the goal identification\nl priority = the priority level\n<value>\nEnter the value that corresponds with the type used:\nFor goal, enter the goal identification, for example: goal_1\nFor priority, enter the priority level, for example: 10\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 224\n\nqueueModifyLocal Command (shortcut: qmodl)\nqueueModifyLocal Command (shortcut: qmodl)\nAllows modification of goal and priority for job segments in these job types:\nl\n Dropoffs\nl\n Swaps\nAllows modification of segments in these states:\nl\n Pending job segments\nl\n InProgress jobs up to and including \u201cInProgressDriving\u201d, but not after\nSyntax\nqueueModifyLocal\n <id> <type> <value>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nBecause the queueModifyLocal command is only available on the robot, it assumes it applies only to the\nitems queued for that robot. This is a powerful difference (and feature) of the \"local\" version of the com-\nmand.\nARAM Settings\nIn order to use this feature, you have to explicitly enable it in the MobilePlanner software, by setting the\nEnterpriseQueuing argument in the Enterprise Features section of the\n Configuration > Enterprise\n tab.\nParameters\nThe queueModifyLocal arguments are described in the table below.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\n<id>\nEnter the string id for the job segment you wish to modify (either\nPICKUPxx or DROPOFFxx)\n<type>\nEnter the type of modification. Valid types are:\nl\n goal = the goal identification\nl\n priority = the priority level\n<value>\nEnter the value that corresponds with the type used:\nFor goal, enter the goal identification, for example: goal_1\nFor priority, enter the priority level, for example: 10\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 224",
    "Page 225": "queueModifyLocal Command (shortcut: qmodl)\nResponses\nReturns (for goal modify of a pending item)\nqueuemodify modifying id <id> goal <\u201dmodifiedGoal\u201d>\nQueueUpdate: <id> <jobId> <priority> BeforeModify None Goal <goal> \"None\" <queuedDate>\n<queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> AfterModify None Goal <modifiedGoal> \"None\"\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> Pending None Goal <modifiedGoal> \"None\" <queuedDate>\n<queuedTime> None None 0\nReturns (for priority modify of a pending item)\nqueuemodify modifying id <id> priority <modifiedpriority>\nQueueUpdate: <id> <jobId> <priority> BeforeModify None Goal <goal> \"None\" <queuedDate>\n<queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> AfterModify None Goal <goal> \"None\"\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> Pending None Goal <modifiedGoal> \"None\"\n<queuedDate> <queuedTime> None None 0\nReturns (for goal modify of an in-progress item)\nqueuemodify modifying id <id> goal <modifiedGoal>\nQueueUpdate: <id> <jobId> <priority> BeforeModify Driving Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> InterruptedByModify None Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> AfterModify None Goal <modifiedGoal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> Pending None Goal <modifiedGoal> \"None\" <queuedDate>\n<queuedTime> None None 0\nReturns (for priority modify of an in-progress item)\nqueuemodify modifying id <id> priority <modifiedPriority>\nQueueUpdate: <id> <jobId> <priority> BeforeModify Driving Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> InterruptedByModify None Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> AfterModify None Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> Pending None Goal <goal> \"None\" <queuedDate>\n<queuedTime> None None 0\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nDetails\nThe queueModifyLocal command allows modification of goal or priority values for job segments in these job\ntypes:\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 225\n\nqueueModifyLocal Command (shortcut: qmodl)\nResponses\nReturns (for goal modify of a pending item)\nqueuemodify modifying id <id> goal <\u201dmodifiedGoal\u201d>\nQueueUpdate: <id> <jobId> <priority> BeforeModify None Goal <goal> \"None\" <queuedDate>\n<queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> AfterModify None Goal <modifiedGoal> \"None\"\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> Pending None Goal <modifiedGoal> \"None\" <queuedDate>\n<queuedTime> None None 0\nReturns (for priority modify of a pending item)\nqueuemodify modifying id <id> priority <modifiedpriority>\nQueueUpdate: <id> <jobId> <priority> BeforeModify None Goal <goal> \"None\" <queuedDate>\n<queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> AfterModify None Goal <goal> \"None\"\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> Pending None Goal <modifiedGoal> \"None\"\n<queuedDate> <queuedTime> None None 0\nReturns (for goal modify of an in-progress item)\nqueuemodify modifying id <id> goal <modifiedGoal>\nQueueUpdate: <id> <jobId> <priority> BeforeModify Driving Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> InterruptedByModify None Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> AfterModify None Goal <modifiedGoal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> Pending None Goal <modifiedGoal> \"None\" <queuedDate>\n<queuedTime> None None 0\nReturns (for priority modify of an in-progress item)\nqueuemodify modifying id <id> priority <modifiedPriority>\nQueueUpdate: <id> <jobId> <priority> BeforeModify Driving Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <priority> InterruptedByModify None Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> AfterModify None Goal <goal> <robot>\n<queuedDate> <queuedTime> None None 0\nQueueUpdate: <id> <jobId> <modifiedPriority> Pending None Goal <goal> \"None\" <queuedDate>\n<queuedTime> None None 0\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nDetails\nThe queueModifyLocal command allows modification of goal or priority values for job segments in these job\ntypes:\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 225",
    "Page 226": "queueModifyLocal Command (shortcut: qmodl)\nl Dropoffs\nl Swaps\nIt allows modification of segments in these states:\nl Pending job segments\nl InProgress jobs up to and including \u201cInProgress Driving\u201d, but not after\nChanging the priority for the first segment in a job may change the order in which it gets assigned.\nChanging the priority of other segments in the job will never change the order in which the job is assigned.\nThe queue time for a job will never be changed as a result of a queueModify command.\nChanging the shared goal in a swap will break the link between the two jobs. Changing the other goals in\nthe swap will not break the link.\nModified jobs will be candidates for swaps. The linking would occur immediately following the modify.\nExamples\nExample #1 \u2013 goal modify of a pending item:\nqueuePickup t\nqueuePickup goal \"t\" with priority 10 id PICKUP5 and jobId JOB5 successfully queued\nQueueUpdate: PICKUP5 JOB5 10 Pending None Goal \"t\" \"None\" 03/25/2015 07:36:58 None None 0\nqueuemodify pickup5 goal w20\nqueuemodify modifying id pickup5 goal \"w20\"\nQueueUpdate: PICKUP5 JOB5 10 BeforeModify None Goal \"t\" \"None\" 03/25/2015 07:36:58 None None 0\nQueueUpdate: PICKUP5 JOB5 10 AfterModify None Goal \"w20\" \"None\" 03/25/2015 07:36:58 None None 0\nQueueUpdate: PICKUP5 JOB5 10 Pending None Goal \"w20\" \"None\" 03/25/2015 07:36:58 None None 0\nqueueDropoff y\nqueueDropoff attempting to queue goal \"y\" using default priority\nqueueDropoff goal \"y\" with priority 20 id DROPOFF6 and jobId JOB6 successfully queued\nQueueUpdate: DROPOFF6 JOB6 20 Pending None Goal \"y\" \"robotOne\" 03/25/2015 07:38:09 None None 0\nqueuemodifylocal dropoff6 goal x\nqueuemodifylocal modifying id dropoff6 goal \"x\"\nQueueUpdate: DROPOFF6 JOB6 20 BeforeModify None Goal \"y\" \"robotOne\" 03/25/2015 07:38:09 None None 0\nQueueUpdate: DROPOFF6 JOB6 20 AfterModify None Goal \"x\" \"robotOne\" 03/25/2015 07:38:09 None None 0\nQueueUpdate: DROPOFF6 JOB6 20 Pending None Goal \"x\" \"robotOne\" 03/25/2015 07:38:09 None None 0\nExample #2 \u2013 priority modify of a pending item:\nqueueDropoff w20\nqueueDropoff attempting to queue goal \"w20\" using default priority\nqueueDropoff goal \"w20\" with priority 20 id DROPOFF7 and jobId JOB7 successfully queued\nQueueUpdate: DROPOFF7 JOB7 20 Pending None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01 None None 0\nqueuemodifylocal dropoff7 priority 22\nqueuemodifylocal modifying id dropoff7 priority 22\nQueueUpdate: DROPOFF7 JOB7 20 BeforeModify None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01 None None 0\nQueueUpdate: DROPOFF7 JOB7 22 AfterModify None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01 None None 0\nQueueUpdate: DROPOFF7 JOB7 22 Pending None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01 None None 0\nqueuePickup v\nqueuePickup goal \"v\" with priority 10 id PICKUP8 and jobId JOB8 successfully queued\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 226\n\nqueueModifyLocal Command (shortcut: qmodl)\nl\n Dropoffs\nl\n Swaps\nIt allows modification of segments in these states:\nl\n Pending job segments\nl\n InProgress jobs up to and including \u201cInProgress Driving\u201d, but not after\nChanging the priority for the first segment in a job may change the order in which it gets assigned.\nChanging the priority of other segments in the job will never change the order in which the job is assigned.\nThe queue time for a job will never be changed as a result of a queueModify command.\nChanging the shared goal in a swap will break the link between the two jobs. Changing the other goals in\nthe swap will not break the link.\nModified jobs will be candidates for swaps. The linking would occur immediately following the modify.\nExamples\nExample #1 \u2013 goal modify of a pending item:\nqueuePickup t\nqueuePickup goal \"t\" with priority 10 id PICKUP5 and jobId JOB5 successfully queued\nQueueUpdate: PICKUP5 JOB5 10 Pending None Goal \"t\" \"None\" 03/25/2015 07:36:58 None None 0\nqueuemodify pickup5 goal w20\nqueuemodify modifying id pickup5 goal \"w20\"\nQueueUpdate: PICKUP5 JOB5 10 BeforeModify None Goal \"t\" \"None\" 03/25/2015 07:36:58 None None 0\nQueueUpdate: PICKUP5 JOB5 10 AfterModify None Goal \"w20\" \"None\" 03/25/2015 07:36:58 None None 0\nQueueUpdate: PICKUP5 JOB5 10 Pending None Goal \"w20\" \"None\" 03/25/2015 07:36:58 None None 0\nqueueDropoff y\nqueueDropoff attempting to queue goal \"y\" using default priority\nqueueDropoff goal \"y\" with priority 20 id DROPOFF6 and jobId JOB6 successfully queued\nQueueUpdate: DROPOFF6 JOB6 20 Pending None Goal \"y\" \"robotOne\" 03/25/2015 07:38:09 None None 0\nqueuemodifylocal dropoff6 goal x\nqueuemodifylocal modifying id dropoff6 goal \"x\"\nQueueUpdate: DROPOFF6 JOB6 20 BeforeModify None Goal \"y\" \"robotOne\" 03/25/2015 07:38:09 None None 0\nQueueUpdate: DROPOFF6 JOB6 20 AfterModify None Goal \"x\" \"robotOne\" 03/25/2015 07:38:09 None None 0\nQueueUpdate: DROPOFF6 JOB6 20 Pending None Goal \"x\" \"robotOne\" 03/25/2015 07:38:09 None None 0\nExample #2 \u2013 priority modify of a pending item:\nqueueDropoff w20\nqueueDropoff attempting to queue goal \"w20\" using default priority\nqueueDropoff goal \"w20\" with priority 20 id DROPOFF7 and jobId JOB7 successfully queued\nQueueUpdate: DROPOFF7 JOB7 20 Pending None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01 None None 0\nqueuemodifylocal dropoff7 priority 22\nqueuemodifylocal modifying id dropoff7 priority 22\nQueueUpdate: DROPOFF7 JOB7 20 BeforeModify None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01 None None 0\nQueueUpdate: DROPOFF7 JOB7 22 AfterModify None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01 None None 0\nQueueUpdate: DROPOFF7 JOB7 22 Pending None Goal \"w20\" \"robotOne\" 03/25/2015 07:39:01 None None 0\nqueuePickup v\nqueuePickup goal \"v\" with priority 10 id PICKUP8 and jobId JOB8 successfully queued\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 226",
    "Page 227": "queueModifyLocal Command (shortcut: qmodl)\nQueueUpdate: PICKUP8 JOB8 10 Pending None Goal \"v\" \"None\" 03/25/2015 07:40:24 None None 0\nqueuemodify pickup8 priority 6\nqueuemodify modifying id pickup8 priority 6\nQueueUpdate: PICKUP8 JOB8 10 BeforeModify None Goal \"v\" \"None\" 03/25/2015 07:40:24 None None 0\nQueueUpdate: PICKUP8 JOB8 6 AfterModify None Goal \"v\" \"None\" 03/25/2015 07:40:24 None None 0\nQueueUpdate: PICKUP8 JOB8 6 Pending None Goal \"v\" \"None\" 03/25/2015 07:40:24 None None 0\nExample #3 \u2013 goal modify of an inProgress item:\nqueuePickup x\nqueuePickup goal \"x\" with priority 10 id PICKUP9 and jobId JOB9 successfully queued\nQueueUpdate: PICKUP9 JOB9 10 Pending None Goal \"x\" \"None\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress UnAllocated Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Allocated Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Driving Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nqueuemodify pickup9 goal y\nqueuemodify modifying id pickup9 goal \"y\"\nQueueUpdate: PICKUP9 JOB9 10 BeforeModify Driving Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InterruptedByModify None Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 AfterModify None Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 Pending None Goal \"y\" \"None\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress UnAllocated Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Allocated Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Driving Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 Completed None Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21 03/25/2015 07:48:00 0\nExample #4 \u2013 priority modify of an inProgress item:\nqueuePickup t\nqueuePickup goal \"t\" with priority 10 id PICKUP10 and jobId JOB10 successfully queued\nQueueUpdate: PICKUP10 JOB10 10 Pending None Goal \"t\" \"None\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InProgress UnAllocated Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InProgress Allocated Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InProgress Driving Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nqueuemodify pickup10 priority 13\nqueuemodify modifying id pickup10 priority 13\nQueueUpdate: PICKUP10 JOB10 10 BeforeModify Driving Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InterruptedByModify None Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 AfterModify None Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 Pending None Goal \"t\" \"None\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 InProgress UnAllocated Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 InProgress Allocated Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 InProgress Driving Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 Completed None Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 03/25/2015 07:49:46 0\nRelated Commands\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 227\n\nqueueModifyLocal Command (shortcut: qmodl)\nQueueUpdate: PICKUP8 JOB8 10 Pending None Goal \"v\" \"None\" 03/25/2015 07:40:24 None None 0\nqueuemodify pickup8 priority 6\nqueuemodify modifying id pickup8 priority 6\nQueueUpdate: PICKUP8 JOB8 10 BeforeModify None Goal \"v\" \"None\" 03/25/2015 07:40:24 None None 0\nQueueUpdate: PICKUP8 JOB8 6 AfterModify None Goal \"v\" \"None\" 03/25/2015 07:40:24 None None 0\nQueueUpdate: PICKUP8 JOB8 6 Pending None Goal \"v\" \"None\" 03/25/2015 07:40:24 None None 0\nExample #3 \u2013 goal modify of an inProgress item:\nqueuePickup x\nqueuePickup goal \"x\" with priority 10 id PICKUP9 and jobId JOB9 successfully queued\nQueueUpdate: PICKUP9 JOB9 10 Pending None Goal \"x\" \"None\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress UnAllocated Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Allocated Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Driving Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nqueuemodify pickup9 goal y\nqueuemodify modifying id pickup9 goal \"y\"\nQueueUpdate: PICKUP9 JOB9 10 BeforeModify Driving Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InterruptedByModify None Goal \"x\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 AfterModify None Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 Pending None Goal \"y\" \"None\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress UnAllocated Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Allocated Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 InProgress Driving Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21 None None 0\nQueueUpdate: PICKUP9 JOB9 10 Completed None Goal \"y\" \"robotTwo\" 03/25/2015 07:47:21 03/25/2015 07:48:00 0\nExample #4 \u2013 priority modify of an inProgress item:\nqueuePickup t\nqueuePickup goal \"t\" with priority 10 id PICKUP10 and jobId JOB10 successfully queued\nQueueUpdate: PICKUP10 JOB10 10 Pending None Goal \"t\" \"None\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InProgress UnAllocated Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InProgress Allocated Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InProgress Driving Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nqueuemodify pickup10 priority 13\nqueuemodify modifying id pickup10 priority 13\nQueueUpdate: PICKUP10 JOB10 10 BeforeModify Driving Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 10 InterruptedByModify None Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 AfterModify None Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 Pending None Goal \"t\" \"None\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 InProgress UnAllocated Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 InProgress Allocated Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 InProgress Driving Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 None None 0\nQueueUpdate: PICKUP10 JOB10 13 Completed None Goal \"t\" \"robotTwo\" 03/25/2015 07:49:34 03/25/2015 07:49:46 0\nRelated Commands\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 227",
    "Page 228": "queueModifyLocal Command (shortcut: qmodl)\nqueueMulti Command (shortcut: qm) on page 229\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueryFaults Command (shortcut: qf) on page 204\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 228\n\nqueueModifyLocal Command (shortcut: qmodl)\nqueueMulti Command (shortcut: qm) on page 229\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueryFaults Command (shortcut: qf) on page 204\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 228",
    "Page 229": "queueMulti Command (shortcut: qm)\nqueueMulti Command (shortcut: qm)\nQueues the robot for multiple pickups and dropoffs at multiple goals.\nSyntax\nqueueMulti <number of goals> <number of fields per goal> <goal1> <goal1 args> <goal2> <goal2\nargs> \u2026 <goalN> <goalN args> [jobid]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nARAM Settings\nIn order to use this feature, you have to explicitly enable it in the MobilePlanner software, by setting the\nEnterpriseQueuing argument in the Enterprise Features section of the Configuration > Enterprise tab.\nParameters\nThe queueMulti arguments are described in the table below.\nFor details on the data types, see Data Types on page 48.\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 229\n\nqueueMulti Command (shortcut: qm)\nqueueMulti Command (shortcut: qm)\nQueues the robot for multiple pickups and dropoffs at multiple goals.\nSyntax\nqueueMulti\n <number of goals> <number of fields per goal> <goal1> <goal1 args> <goal2> <goal2\nargs> \u2026 <goalN> <goalN args> [jobid]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nARAM Settings\nIn order to use this feature, you have to explicitly enable it in the MobilePlanner software, by setting the\nEnterpriseQueuing argument in the Enterprise Features section of the\n Configuration > Enterprise\n tab.\nParameters\nThe queueMulti arguments are described in the table below.\nFor details on the data types, see Data Types on page 48.\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 229",
    "Page 230": "queueMulti Command (shortcut: qm)\nParameter\nDefinition\nnumber of goals\nEnter the number of goals where you want the mobile robot to go.\nUp to 50 goals are supported.\nnumber of fields per goal\nEnter the number of fields to be used for all goals. Two fields are sup-\nported, in this order:\u00a0<pickup|dropoff> <priority>.\ngoal1\nEnter the name of the first goal.\ngoal1 args\nEnter the arguments associated with the first goal in the form:\n<pickup|dropoff> <priority or \u201cdefault\u201d>\nThe first goal MUST be a pickup. All subsequent goals can be either\npickups or dropoffs.\nThe priority is an integer value that represents the priority of the\njob segment. The higher the number, the sooner the Enterprise\nManager is going to service the item. The default priority is 10,\nwhich can be changed in MobilePlanner. Only the priority of the first\nsegment in the queueMulti command will have an impact on how\nsoon the job is assigned to a robot.\ngoalN\nEnter the name of the Nth goal.\ngoalN args\nEnter the arguments associated with the Nth goal.\njobId\nEnter an optional identifier for the specified job. You can use a com-\nbination of string characters and integers. The jobId is helpful in\ntracking the job. If nothing is entered, ARCL generates a random\njobId.\nResponses\nThe command returns:\nQueueMulti: goal \"x\" with priority 10 id PICKUP1 and jobid JOB1 successfully queued\nQueueMulti: goal <\"goal1\"> with priority <goal1_priority> id <PICKUPid_or_DROPOFFid>\njobid <jobId> successfully queued\nQueueMulti: goal <\"goal2\"> with priority <goal2_priority> id <PICKUPid_or_DROPOFFid>\njobid <jobId> successfully queued and linked to <goal1_PICKUPid_or_DROPOFFid>\n:\n:\nQueueMulti: goal <\"goaln\"> with priority <goaln_priority> id <PICKUPid_or_DROPOFFid>\njobid <jobId> successfully queued and linked to <goal(n-1)_PICKUPid_or_DROPOFFid>\nEndQueueMulti\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 230\n\nqueueMulti Command (shortcut: qm)\nParameter\nDefinition\nnumber of goals\nEnter the number of goals where you want the mobile robot to go.\nUp to 50 goals are supported.\nnumber of fields per goal\nEnter the number of fields to be used for all goals. Two fields are sup-\nported, in this order:\u00a0<pickup|dropoff> <priority>.\ngoal1\nEnter the name of the first goal.\ngoal1 args\nEnter the arguments associated with the first goal in the form:\n<pickup|dropoff> <priority or \u201cdefault\u201d>\nThe first goal MUST be a pickup. All subsequent goals can be either\npickups or dropoffs.\nThe priority is an integer value that represents the priority of the\njob segment. The higher the number, the sooner the Enterprise\nManager is going to service the item. The default priority is 10,\nwhich can be changed in MobilePlanner. Only the priority of the first\nsegment in the queueMulti command will have an impact on how\nsoon the job is assigned to a robot.\ngoalN\nEnter the name of the Nth goal.\ngoalN args\nEnter the arguments associated with the Nth goal.\njobId\nEnter an optional identifier for the specified job. You can use a com-\nbination of string characters and integers. The jobId is helpful in\ntracking the job. If nothing is entered, ARCL generates a random\njobId.\nResponses\nThe command returns:\nQueueMulti: goal \"x\" with priority 10 id PICKUP1 and jobid JOB1 successfully queued\nQueueMulti: goal <\"goal1\"> with priority <goal1_priority> id <PICKUPid_or_DROPOFFid>\njobid <jobId> successfully queued\nQueueMulti: goal <\"goal2\"> with priority <goal2_priority> id <PICKUPid_or_DROPOFFid>\njobid <jobId> successfully queued and linked to <goal1_PICKUPid_or_DROPOFFid>\n:\n:\nQueueMulti: goal <\"goaln\"> with priority <goaln_priority> id <PICKUPid_or_DROPOFFid>\njobid <jobId> successfully queued and linked to <goal(n-1)_PICKUPid_or_DROPOFFid>\nEndQueueMulti\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 230",
    "Page 231": "queueMulti Command (shortcut: qm)\nDetails\nThe queueMulti command tells the mobile robot to go to multiple goals, to make pickups and dropoffs.\nExamples\nThe following example shows a queuedropoff at goal 1.\nExample #1 \u2013 Using Default job id\nqueuemulti 4 2 x pickup 10 y pickup 19 z dropoff 20 t dropoff 20\nQueueMulti: goal \"x\" with priority 10 id PICKUP1 and jobid JOB1 successfully queued\nQueueMulti: goal \"y\" with priority 19 id PICKUP2 and jobid JOB1 successfully queued and\nlinked to PICKUP1\nQueueMulti: goal \"z\" with priority 20 id DROPOFF3 and jobid JOB1 successfully queued and\nlinked to PICKUP2\nQueueMulti: goal \"t\" with priority 20 id DROPOFF4 and jobid JOB1 successfully queued and\nlinked to DROPOFF3\nEndQueueMulti\nQueueUpdate: PICKUP1 JOB1 10 Pending None Goal \"x\" \"None\" 08/15/2013 06:02:59 None None 0\nQueueUpdate: PICKUP2 JOB1 19 Pending ID_PICKUP1 Goal \"y\" \"None\" 08/15/2013 06:02:59 None\nNone 0\nQueueUpdate: DROPOFF3 JOB1 20 Pending ID_PICKUP2 Goal \"z\" \"None\" 08/15/2013 06:02:59 None\nNone 0\nQueueUpdate: DROPOFF4 JOB1 20 Pending ID_DROPOFF3 Goal \"t\" \"None\" 08/15/2013 06:02:59\nNone None 0\nQueueUpdate: PICKUP1 JOB1 10 InProgress UnAllocated Goal \"x\" \"Bullwinkle (.53)\"\n08/15/2013 06:02:59 None None 0\nQueueUpdate: PICKUP1 JOB1 10 InProgress Allocated Goal \"x\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: PICKUP1 JOB1 10 InProgress Driving Goal \"x\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: PICKUP1 JOB1 10 Completed None Goal \"x\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 08/15/2013 06:03:20 0\nQueueUpdate: PICKUP2 JOB1 19 InProgress UnAllocated Goal \"y\" \"Bullwinkle (.53)\"\n08/15/2013 06:02:59 None None 0\nQueueUpdate: PICKUP2 JOB1 19 InProgress Allocated Goal \"y\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: PICKUP2 JOB1 19 InProgress Driving Goal \"y\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: PICKUP2 JOB1 19 Completed None Goal \"y\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 08/15/2013 06:03:33 0\nQueueUpdate: DROPOFF3 JOB1 20 InProgress UnAllocated Goal \"z\" \"Bullwinkle (.53)\"\n08/15/2013 06:02:59 None None 0\nQueueUpdate: DROPOFF3 JOB1 20 InProgress Allocated Goal \"z\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: DROPOFF3 JOB1 20 InProgress Before Goal \"z\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: DROPOFF3 JOB1 20 InProgress Driving Goal \"z\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: DROPOFF3 JOB1 20 InProgress After Goal \"z\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: DROPOFF3 JOB1 20 Completed None Goal \"z\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 08/15/2013 06:03:47 0\nQueueUpdate: DROPOFF4 JOB1 20 InProgress UnAllocated Goal \"t\" \"Bullwinkle (.53)\"\n08/15/2013 06:02:59 None None 0\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 231\n\nqueueMulti Command (shortcut: qm)\nDetails\nThe queueMulti command tells the mobile robot to go to multiple goals, to make pickups and dropoffs.\nExamples\nThe following example shows a queuedropoff at goal 1.\nExample #1 \u2013 Using Default job id\nqueuemulti 4 2 x pickup 10 y pickup 19 z dropoff 20 t dropoff 20\nQueueMulti: goal \"x\" with priority 10 id PICKUP1 and jobid JOB1 successfully queued\nQueueMulti: goal \"y\" with priority 19 id PICKUP2 and jobid JOB1 successfully queued and\nlinked to PICKUP1\nQueueMulti: goal \"z\" with priority 20 id DROPOFF3 and jobid JOB1 successfully queued and\nlinked to PICKUP2\nQueueMulti: goal \"t\" with priority 20 id DROPOFF4 and jobid JOB1 successfully queued and\nlinked to DROPOFF3\nEndQueueMulti\nQueueUpdate: PICKUP1 JOB1 10 Pending None Goal \"x\" \"None\" 08/15/2013 06:02:59 None None 0\nQueueUpdate: PICKUP2 JOB1 19 Pending ID_PICKUP1 Goal \"y\" \"None\" 08/15/2013 06:02:59 None\nNone 0\nQueueUpdate: DROPOFF3 JOB1 20 Pending ID_PICKUP2 Goal \"z\" \"None\" 08/15/2013 06:02:59 None\nNone 0\nQueueUpdate: DROPOFF4 JOB1 20 Pending ID_DROPOFF3 Goal \"t\" \"None\" 08/15/2013 06:02:59\nNone None 0\nQueueUpdate: PICKUP1 JOB1 10 InProgress UnAllocated Goal \"x\" \"Bullwinkle (.53)\"\n08/15/2013 06:02:59 None None 0\nQueueUpdate: PICKUP1 JOB1 10 InProgress Allocated Goal \"x\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: PICKUP1 JOB1 10 InProgress Driving Goal \"x\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: PICKUP1 JOB1 10 Completed None Goal \"x\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 08/15/2013 06:03:20 0\nQueueUpdate: PICKUP2 JOB1 19 InProgress UnAllocated Goal \"y\" \"Bullwinkle (.53)\"\n08/15/2013 06:02:59 None None 0\nQueueUpdate: PICKUP2 JOB1 19 InProgress Allocated Goal \"y\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: PICKUP2 JOB1 19 InProgress Driving Goal \"y\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: PICKUP2 JOB1 19 Completed None Goal \"y\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 08/15/2013 06:03:33 0\nQueueUpdate: DROPOFF3 JOB1 20 InProgress UnAllocated Goal \"z\" \"Bullwinkle (.53)\"\n08/15/2013 06:02:59 None None 0\nQueueUpdate: DROPOFF3 JOB1 20 InProgress Allocated Goal \"z\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: DROPOFF3 JOB1 20 InProgress Before Goal \"z\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: DROPOFF3 JOB1 20 InProgress Driving Goal \"z\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: DROPOFF3 JOB1 20 InProgress After Goal \"z\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: DROPOFF3 JOB1 20 Completed None Goal \"z\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 08/15/2013 06:03:47 0\nQueueUpdate: DROPOFF4 JOB1 20 InProgress UnAllocated Goal \"t\" \"Bullwinkle (.53)\"\n08/15/2013 06:02:59 None None 0\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 231",
    "Page 232": "queueMulti Command (shortcut: qm)\nQueueUpdate: DROPOFF4 JOB1 20 InProgress Allocated Goal \"t\" \"Bullwinkle (.53)\"\n08/15/2013 06:02:59 None None 0\nQueueUpdate: DROPOFF4 JOB1 20 InProgress Driving Goal \"t\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: DROPOFF4 JOB1 20 Completed None Goal \"t\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 08/15/2013 06:04:03 0\nRelated Commands\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 232\n\nqueueMulti Command (shortcut: qm)\nQueueUpdate: DROPOFF4 JOB1 20 InProgress Allocated Goal \"t\" \"Bullwinkle (.53)\"\n08/15/2013 06:02:59 None None 0\nQueueUpdate: DROPOFF4 JOB1 20 InProgress Driving Goal \"t\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 None None 0\nQueueUpdate: DROPOFF4 JOB1 20 Completed None Goal \"t\" \"Bullwinkle (.53)\" 08/15/2013\n06:02:59 08/15/2013 06:04:03 0\nRelated Commands\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 232",
    "Page 233": "queuePickup Command (shortcut: qp)\nqueuePickup Command (shortcut: qp)\nCalls any available robot for a pick up request.\nSyntax\nqueuePickup <goalName> [priority or \"default\"] [jobId]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nARAM Settings\nIn order to use this feature, you have to explicitly enable it in the MobilePlanner software, by setting the\nEnterpriseQueuing argument in the Enterprise Features section of the Configuration > Enterprise tab.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ngoalName\nEnter the name of the goal where you want the mobile robot to go\nfor the pickup.\npriority\nAn optional integer value that represents the priority of the pickup\nrequest. The higher the number, the sooner Enterprise Manager is\ngoing to service the item. The default priority is 10, which can be\nchanged in MobilePlanner.\njobId\nAn optional identifier for the specified job. You can use a com-\nbination of string characters and integers. The jobId is helpful in\ntracking the job. If nothing is entered, ARCL generates a random\njobId.\nResponses\nThe command returns the following information:\nqueuepickup goal \"goalName\" with priority [priority] id (id) and jobId [jobid] suc-\ncessfully queued\nAssuming the command was successful, the status of the robot is displayed:\nQueueUpdate: <id> <jobId> <priority> <status = Pending> <substatus = None> Goal\n<\u201dgoalName\u201d> <assigned robotName = None>\n<queuedDate>\n<queuedTime> <completedDate =\nNone> <completedTime = None> <failedCount>\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 233\n\nqueuePickup Command (shortcut: qp)\nqueuePickup Command (shortcut: qp)\nCalls any available robot for a pick up request.\nSyntax\nqueuePickup\n <goalName> [priority or \"default\"] [jobId]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nARAM Settings\nIn order to use this feature, you have to explicitly enable it in the MobilePlanner software, by setting the\nEnterpriseQueuing argument in the Enterprise Features section of the\n Configuration > Enterprise\n tab.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ngoalName\nEnter the name of the goal where you want the mobile robot to go\nfor the pickup.\npriority\nAn optional integer value that represents the priority of the pickup\nrequest. The higher the number, the sooner Enterprise Manager is\ngoing to service the item. The default priority is 10, which can be\nchanged in MobilePlanner.\njobId\nAn optional identifier for the specified job. You can use a com-\nbination of string characters and integers. The jobId is helpful in\ntracking the job. If nothing is entered, ARCL generates a random\njobId.\nResponses\nThe command returns the following information:\nqueuepickup goal \"goalName\" with priority [priority] id (id) and jobId [jobid] suc-\ncessfully queued\nAssuming the command was successful, the status of the robot is displayed:\nQueueUpdate: <id> <jobId> <priority> <status = Pending> <substatus = None> Goal\n<\u201dgoalName\u201d> <assigned robotName = None>\n<queuedDate>\n<queuedTime> <completedDate =\nNone> <completedTime = None> <failedCount>\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 233",
    "Page 234": "queuePickup Command (shortcut: qp)\nQueueUpdate: <id> <jobId> <priority> <status = InProgress> <substatus = None> Goal\n<\u201dgoalName\u201d> <\u201drobotName\u201d>\n<queuedDate>\n<queuedTime> <completedDate = None> <com-\npletedTime = None> <failedCount>\nQueueUpdate: <id> <jobId> <priority> <status = Completed> <substatus = None> Goal\n<\u201dgoalName\u201d> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate> <completedTime>\n<failedCount>\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nDetails\nThe queuePickup command calls any available robot for a pick up request. When the job is at the top of the\nqueue, the mobile robot drives to the specified goal.\nIf multiple robots are available for the pickup request, the Enterprise Manager determines which robot\nanswers the request based on such factors as which robot is closest to the goal, how long it has been idle,\nand its charge state. You can also enter a priority value: the higher the number, the higher the priority.\nExamples\nThe following example shows a queuePickup at goal z with priority 11 and job_id xyz.\nqueuepickup z 11 xyz\nqueuepickup goal \"z\" with priority 11, id PICKUP13 and job_id xyz successfully queued\nQueueUpdate: PICKUP13 xyz 11 Pending None Goal \"z\" none 12/19/2011 06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress UnAllocated\nGoal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011 06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress Allocated\nGoal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011 06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress BeforePickup Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress BeforeEvery Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress Before Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress Driving Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress After Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress AfterEvery Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress AfterPickup\nGoal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011 06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 Completed None Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 12/19/2011\n06:54:34 0\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 234\n\nqueuePickup Command (shortcut: qp)\nQueueUpdate: <id> <jobId> <priority> <status = InProgress> <substatus = None> Goal\n<\u201dgoalName\u201d> <\u201drobotName\u201d>\n<queuedDate>\n<queuedTime> <completedDate = None> <com-\npletedTime = None> <failedCount>\nQueueUpdate: <id> <jobId> <priority> <status = Completed> <substatus = None> Goal\n<\u201dgoalName\u201d> <\u201drobotName\u201d>\n<queuedDate> <queuedTime> <completedDate> <completedTime>\n<failedCount>\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nDetails\nThe queuePickup command calls any available robot for a pick up request. When the job is at the top of the\nqueue, the mobile robot drives to the specified goal.\nIf multiple robots are available for the pickup request, the Enterprise Manager determines which robot\nanswers the request based on such factors as which robot is closest to the goal, how long it has been idle,\nand its charge state. You can also enter a priority value: the higher the number, the higher the priority.\nExamples\nThe following example shows a queuePickup at goal z with priority 11 and job_id xyz.\nqueuepickup z 11 xyz\nqueuepickup goal \"z\" with priority 11, id PICKUP13 and job_id xyz successfully queued\nQueueUpdate: PICKUP13 xyz 11 Pending None Goal \"z\" none 12/19/2011 06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress UnAllocated\nGoal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011 06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress Allocated\nGoal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011 06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress BeforePickup Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress BeforeEvery Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress Before Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress Driving Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress After Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress AfterEvery Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 InProgress AfterPickup\nGoal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011 06:54:18 None None 0\nQueueUpdate: PICKUP13 xyz 11 Completed None Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 12/19/2011\n06:54:34 0\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 234",
    "Page 235": "queuePickup Command (shortcut: qp)\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 235\n\nqueuePickup Command (shortcut: qp)\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 235",
    "Page 236": "queuePickupDropoff Command (shortcut: qpd)\nqueuePickupDropoff Command (shortcut: qpd)\nQueues a pick-up and drop-off request for any available robot.\nSyntax\nqueuePickupDropoff <goal1Name> <goal2Name> [priority1 or \"default\"] [priority2 or \"default\"]\n[jobId]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ngoal1Name\nEnter the name of the goal where you want the mobile robot to go\nfor the pickup.\ngoal2Name\nEnter the name of the goal where you want the mobile robot to go\nfor the dropoff.\npriority1\nAn optional integer value that represents the priority of the pickup\nrequest. The higher the number, the sooner Enterprise Manager is\ngoing to service the item. The default priority is 10, which can be\nchanged in MobilePlanner.\npriority2\nAn optional integer value that represents the priority of the dropoff\nrequest. The higher the number, the sooner Enterprise Manager is\ngoing to service the item. The default priority is 20, which can be\nchanged in MobilePlanner.\njobId\nAn optional identifier for the specified job. You can use a com-\nbination of string characters and integers. The jobId is helpful in\ntracking the job. If nothing is entered, ARCL generates a random\njobId.\nResponses\nThe command returns the following information:\nqueuepickupdropoff goals <\"goal1\"> and <\"goal2\"> with priorities <priority1> and <pri-\nority2> ids <PICKUPid> and <DROPOFFid> jobId <jobId> successfully queued and linked to\njobId <jobid>\nThe PICKUPid and DROPOFFid are assigned by the system.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 236\n\nqueuePickupDropoff Command (shortcut: qpd)\nqueuePickupDropoff Command (shortcut: qpd)\nQueues a pick-up and drop-off request for any available robot.\nSyntax\nqueuePickupDropoff\n <goal1Name> <goal2Name> [priority1 or \"default\"] [priority2 or \"default\"]\n[jobId]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ngoal1Name\nEnter the name of the goal where you want the mobile robot to go\nfor the pickup.\ngoal2Name\nEnter the name of the goal where you want the mobile robot to go\nfor the dropoff.\npriority1\nAn optional integer value that represents the priority of the pickup\nrequest. The higher the number, the sooner Enterprise Manager is\ngoing to service the item. The default priority is 10, which can be\nchanged in MobilePlanner.\npriority2\nAn optional integer value that represents the priority of the dropoff\nrequest. The higher the number, the sooner Enterprise Manager is\ngoing to service the item. The default priority is 20, which can be\nchanged in MobilePlanner.\njobId\nAn optional identifier for the specified job. You can use a com-\nbination of string characters and integers. The jobId is helpful in\ntracking the job. If nothing is entered, ARCL generates a random\njobId.\nResponses\nThe command returns the following information:\nqueuepickupdropoff goals <\"goal1\"> and <\"goal2\"> with priorities <priority1> and <pri-\nority2> ids <PICKUPid> and <DROPOFFid> jobId <jobId> successfully queued and linked to\njobId <jobid>\nThe PICKUPid and DROPOFFid are assigned by the system.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 236",
    "Page 237": "queuePickupDropoff Command (shortcut: qpd)\nAssuming the command was successful, the status is displayed as follows:\nQueueUpdate: <id> <jobId> <priority> <status=Pending> <substatus=None> Goal <\u201dgoal1\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time=None>\n<failed count>\nQueueUpdate: <id> <jobId> <priority> <status=Pending> <substatus=ID_<id>> Goal <\u201dgoal2\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time=None>\n<failed count>\nQueueUpdate: <id> <jobId> <priority> <status=InProgress> <substatus=UnAllocated> Goal\n<\u201dgoal1\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=InProgress> <substatus=Allocated> Goal\n<\u201dgoal1\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=InProgress> <substatus=Driving> Goal\n<\u201dgoal1\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=Completed> <substatus=None> Goal <\u201dgoal1\u201d>\n<robotName>\n<queued date> <queued time> <completed date> <completed time> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=InProgress> <substatus=UnAllocated> Goal\n<\u201dgoal2\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=InProgress> <substatus=Allocated> Goal\n<\u201dgoal2\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=InProgress> <substatus=Driving> Goal\n<\u201dgoal2\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=Completed> <substatus=None> Goal <\u201dgoal2\u201d>\n<robotName>\n<queued date> <queued time> <completed date> <completed time> <failed count>\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nDetails\nThe queuePickupDropoff command calls any available robot for a pick-up request and then tells it to go to a\nspecific goal for a dropoff. You must specify the goal names. You can optionally specify the priorities for each\ngoal and the job identifier. However, note that there is no robot specification parameter in this command\u2014\nit automatically chooses the most appropriate robot in the fleet, as determined by the selection criteria and\ntask requirements.\nExamples\nThe following example shows the queuepickupdropoff command with priority1 and priority2 values and a\njob identifier.\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 237\n\nqueuePickupDropoff Command (shortcut: qpd)\nAssuming the command was successful, the status is displayed as follows:\nQueueUpdate: <id> <jobId> <priority> <status=Pending> <substatus=None> Goal <\u201dgoal1\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time=None>\n<failed count>\nQueueUpdate: <id> <jobId> <priority> <status=Pending> <substatus=ID_<id>> Goal <\u201dgoal2\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time=None>\n<failed count>\nQueueUpdate: <id> <jobId> <priority> <status=InProgress> <substatus=UnAllocated> Goal\n<\u201dgoal1\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=InProgress> <substatus=Allocated> Goal\n<\u201dgoal1\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=InProgress> <substatus=Driving> Goal\n<\u201dgoal1\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=Completed> <substatus=None> Goal <\u201dgoal1\u201d>\n<robotName>\n<queued date> <queued time> <completed date> <completed time> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=InProgress> <substatus=UnAllocated> Goal\n<\u201dgoal2\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=InProgress> <substatus=Allocated> Goal\n<\u201dgoal2\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=InProgress> <substatus=Driving> Goal\n<\u201dgoal2\u201d>\n<robotName>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <jobId> <priority> <status=Completed> <substatus=None> Goal <\u201dgoal2\u201d>\n<robotName>\n<queued date> <queued time> <completed date> <completed time> <failed count>\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nDetails\nThe queuePickupDropoff command calls any available robot for a pick-up request and then tells it to go to a\nspecific goal for a dropoff. You must specify the goal names. You can optionally specify the priorities for each\ngoal and the job identifier. However, note that there is no robot specification parameter in this command\u2014\nit automatically chooses the most appropriate robot in the fleet, as determined by the selection criteria and\ntask requirements.\nExamples\nThe following example shows the queuepickupdropoff command with priority1 and priority2 values and a\njob identifier.\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 237",
    "Page 238": "queuePickupDropoff Command (shortcut: qpd)\nqueuepickupdropoff\n<PICKUPgoal_name> <DROPOFFgoal_name> [PICKUPpriority] [DROPOFFpri-\nority] [job_id]\nReturns:\nqueuepickupdropoff goals <\"PICKUPgoal\"> and <\"DROPOFFgoal\"> with priorities <PICKUPpri-\nority> and <DROPOFFpriority> ids <PICKUPid> and <DROPOFFid> job_id <jobid> successfully\nqueued\nQueueUpdate: <id> <job_id> <priority> <status=Pending> <substatus=None> Goal <\u201dgoal_\nname\u201d>\n<robot_name>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <job_id> <priority> <status=InProgress> <substatus=None> Goal <\u201dgoal_\nname\u201d>\n<robot_name>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <job_id> <priority> <status=Completed> <substatus=None> Goal <\u201dgoal_\nname\u201d>\n<robot_name>\n<queued date> <queued time> <completed date> <completed time>\n<failed count>\nQueueUpdate: <id> <job_id> <priority> <status=InProgress> <substatus=None> Goal <\u201dgoal_\nname\u201d>\n<robot_name>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <job_id> <priority> <status=Completed> <substatus=None> Goal <\u201dgoal_\nname\u201d>\n<robot_name>\n<queued date> <queued time> <completed date> <completed time>\n<failed count>\nThe following example shows the queuepickupdropoff command being used to swap the payload on the\nrobot:\nqueuepickupdropoff x y\nqueuepickupdropoff goals \"x\" and \"y\" with priorities 10 and 20 ids PICKUP12 and\nDROPOFF13 job_id JOB12 successfully queued\nQueueUpdate: PICKUP12 JOB12 10 Pending None Goal \"x\" \"None\" 08/16/2012 14:32:54 None\nNone 0\nQueueUpdate: DROPOFF13 JOB12 20 Pending None Goal \"y\" \"None\" 08/16/2012 14:32:54 None\nNone 0\nQueueUpdate: PICKUP12 JOB12 10 InProgress UnAllocated Goal \"x\" \"Lynx1\" 08/16/2012\n14:32:54 None None 0\nqueuepickupdropoff y t\nqueuepickupdropoff goals \"y\" and \"t\" with priorities 10 and 20 ids PICKUP14 and\nDROPOFF15 job_id JOB14 successfully queued and linked to job_id JOB12\nQueueUpdate: PICKUP14 JOB14 10 Pending None Goal \"y\" \"Lynx1\" 08/16/2012 14:33:01 None\nNone 0\nQueueUpdate: DROPOFF15 JOB14 20 Pending None Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01 None\nNone 0\nQueueUpdate: PICKUP12 JOB12 10 InProgress Allocated Goal \"x\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: PICKUP12 JOB12 10 InProgress Driving Goal \"x\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: PICKUP12 JOB12 10 Completed None Goal \"x\" \"Lynx1\" 08/16/2012 14:32:54\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 238\n\nqueuePickupDropoff Command (shortcut: qpd)\nqueuepickupdropoff\n<PICKUPgoal_name> <DROPOFFgoal_name> [PICKUPpriority] [DROPOFFpri-\nority] [job_id]\nReturns:\nqueuepickupdropoff goals <\"PICKUPgoal\"> and <\"DROPOFFgoal\"> with priorities <PICKUPpri-\nority> and <DROPOFFpriority> ids <PICKUPid> and <DROPOFFid> job_id <jobid> successfully\nqueued\nQueueUpdate: <id> <job_id> <priority> <status=Pending> <substatus=None> Goal <\u201dgoal_\nname\u201d>\n<robot_name>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <job_id> <priority> <status=InProgress> <substatus=None> Goal <\u201dgoal_\nname\u201d>\n<robot_name>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <job_id> <priority> <status=Completed> <substatus=None> Goal <\u201dgoal_\nname\u201d>\n<robot_name>\n<queued date> <queued time> <completed date> <completed time>\n<failed count>\nQueueUpdate: <id> <job_id> <priority> <status=InProgress> <substatus=None> Goal <\u201dgoal_\nname\u201d>\n<robot_name>\n<queued date> <queued time> <completed date=None> <completed time-\ne=None> <failed count>\nQueueUpdate: <id> <job_id> <priority> <status=Completed> <substatus=None> Goal <\u201dgoal_\nname\u201d>\n<robot_name>\n<queued date> <queued time> <completed date> <completed time>\n<failed count>\nThe following example shows the queuepickupdropoff command being used to swap the payload on the\nrobot:\nqueuepickupdropoff x y\nqueuepickupdropoff goals \"x\" and \"y\" with priorities 10 and 20 ids PICKUP12 and\nDROPOFF13 job_id JOB12 successfully queued\nQueueUpdate: PICKUP12 JOB12 10 Pending None Goal \"x\" \"None\" 08/16/2012 14:32:54 None\nNone 0\nQueueUpdate: DROPOFF13 JOB12 20 Pending None Goal \"y\" \"None\" 08/16/2012 14:32:54 None\nNone 0\nQueueUpdate: PICKUP12 JOB12 10 InProgress UnAllocated Goal \"x\" \"Lynx1\" 08/16/2012\n14:32:54 None None 0\nqueuepickupdropoff y t\nqueuepickupdropoff goals \"y\" and \"t\" with priorities 10 and 20 ids PICKUP14 and\nDROPOFF15 job_id JOB14 successfully queued and linked to job_id JOB12\nQueueUpdate: PICKUP14 JOB14 10 Pending None Goal \"y\" \"Lynx1\" 08/16/2012 14:33:01 None\nNone 0\nQueueUpdate: DROPOFF15 JOB14 20 Pending None Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01 None\nNone 0\nQueueUpdate: PICKUP12 JOB12 10 InProgress Allocated Goal \"x\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: PICKUP12 JOB12 10 InProgress Driving Goal \"x\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: PICKUP12 JOB12 10 Completed None Goal \"x\" \"Lynx1\" 08/16/2012 14:32:54\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 238",
    "Page 239": "queuePickupDropoff Command (shortcut: qpd)\n08/16/2012 14:33:15 0\nQueueUpdate: DROPOFF13 JOB12 20 InProgress UnAllocated Goal \"y\" \"Lynx1\" 08/16/2012\n14:32:54 None None 0\nQueueUpdate: DROPOFF13 JOB12 20 InProgress Allocated Goal \"y\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: DROPOFF13 JOB12 20 InProgress Driving Goal \"y\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: DROPOFF13 JOB12 20 Completed None Goal \"y\" \"Lynx1\" 08/16/2012 14:32:54\n08/16/2012 14:33:27 0\nQueueUpdate: PICKUP14 JOB14 10 Completed None Goal \"y\" \"Lynx1\" 08/16/2012 14:33:01\n08/16/2012 14:33:27 0\nQueueUpdate: DROPOFF15 JOB14 20 InProgress UnAllocated Goal \"t\" \"Lynx1\" 08/16/2012\n14:33:01 None None 0\nQueueUpdate: DROPOFF15 JOB14 20 InProgress Allocated Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\nNone None 0\nQueueUpdate: DROPOFF15 JOB14 20 InProgress Driving Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\nNone None 0\nQueueUpdate: DROPOFF15 JOB14 20 Completed None Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\n08/16/2012 14:33:35 0\nqueuepickupdropoff x y\nqueuepickupdropoff goals \"x\" and \"y\" with priorities 10 and 20 ids PICKUP12 and DROPOFF13\njob_id JOB12 successfully queued\nQueueUpdate: PICKUP12 JOB12 10 Pending None Goal \"x\" \"None\" 08/16/2012 14:32:54 None None\n0\nQueueUpdate: DROPOFF13 JOB12 20 Pending ID_PICKUP12 Goal \"y\" \"None\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: PICKUP12 JOB12 10 InProgress UnAllocated Goal \"x\" \"Lynx1\" 08/16/2012\n14:32:54 None None 0\nqueuepickupdropoff y t\nqueuepickupdropoff goals \"y\" and \"t\" with priorities 10 and 20 ids PICKUP14 and DROPOFF15\njob_id JOB14 successfully queued and linked to job_id JOB12\nQueueUpdate: PICKUP14 JOB14 10 Pending ID_DROPOFF13 Goal \"y\" \"Lynx1\" 08/16/2012 14:33:01\nNone None 0\nQueueUpdate: DROPOFF15 JOB14 20 Pending ID_PICKUP14 Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\nNone None 0\nQueueUpdate: PICKUP12 JOB12 10 InProgress Allocated Goal \"x\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: PICKUP12 JOB12 10 InProgress Driving Goal \"x\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: PICKUP12 JOB12 10 Completed None Goal \"x\" \"Lynx1\" 08/16/2012 14:32:54\n08/16/2012 14:33:15 0\nQueueUpdate: DROPOFF13 JOB12 20 InProgress UnAllocated Goal \"y\" \"Lynx1\" 08/16/2012\n14:32:54 None None 0\nQueueUpdate: DROPOFF13 JOB12 20 InProgress Allocated Goal \"y\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: DROPOFF13 JOB12 20 InProgress Driving Goal \"y\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: DROPOFF13 JOB12 20 Completed None Goal \"y\" \"Lynx1\" 08/16/2012 14:32:54\n08/16/2012 14:33:27 0\nQueueUpdate: PICKUP14 JOB14 10 Completed None Goal \"y\" \"Lynx1\" 08/16/2012 14:33:01\n08/16/2012 14:33:27 0\nQueueUpdate: DROPOFF15 JOB14 20 InProgress UnAllocated Goal \"t\" \"Lynx1\" 08/16/2012\n14:33:01 None None 0\nQueueUpdate: DROPOFF15 JOB14 20 InProgress Allocated Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 239\n\nqueuePickupDropoff Command (shortcut: qpd)\n08/16/2012 14:33:15 0\nQueueUpdate: DROPOFF13 JOB12 20 InProgress UnAllocated Goal \"y\" \"Lynx1\" 08/16/2012\n14:32:54 None None 0\nQueueUpdate: DROPOFF13 JOB12 20 InProgress Allocated Goal \"y\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: DROPOFF13 JOB12 20 InProgress Driving Goal \"y\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: DROPOFF13 JOB12 20 Completed None Goal \"y\" \"Lynx1\" 08/16/2012 14:32:54\n08/16/2012 14:33:27 0\nQueueUpdate: PICKUP14 JOB14 10 Completed None Goal \"y\" \"Lynx1\" 08/16/2012 14:33:01\n08/16/2012 14:33:27 0\nQueueUpdate: DROPOFF15 JOB14 20 InProgress UnAllocated Goal \"t\" \"Lynx1\" 08/16/2012\n14:33:01 None None 0\nQueueUpdate: DROPOFF15 JOB14 20 InProgress Allocated Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\nNone None 0\nQueueUpdate: DROPOFF15 JOB14 20 InProgress Driving Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\nNone None 0\nQueueUpdate: DROPOFF15 JOB14 20 Completed None Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\n08/16/2012 14:33:35 0\nqueuepickupdropoff x y\nqueuepickupdropoff goals \"x\" and \"y\" with priorities 10 and 20 ids PICKUP12 and DROPOFF13\njob_id JOB12 successfully queued\nQueueUpdate: PICKUP12 JOB12 10 Pending None Goal \"x\" \"None\" 08/16/2012 14:32:54 None None\n0\nQueueUpdate: DROPOFF13 JOB12 20 Pending ID_PICKUP12 Goal \"y\" \"None\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: PICKUP12 JOB12 10 InProgress UnAllocated Goal \"x\" \"Lynx1\" 08/16/2012\n14:32:54 None None 0\nqueuepickupdropoff y t\nqueuepickupdropoff goals \"y\" and \"t\" with priorities 10 and 20 ids PICKUP14 and DROPOFF15\njob_id JOB14 successfully queued and linked to job_id JOB12\nQueueUpdate: PICKUP14 JOB14 10 Pending ID_DROPOFF13 Goal \"y\" \"Lynx1\" 08/16/2012 14:33:01\nNone None 0\nQueueUpdate: DROPOFF15 JOB14 20 Pending ID_PICKUP14 Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\nNone None 0\nQueueUpdate: PICKUP12 JOB12 10 InProgress Allocated Goal \"x\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: PICKUP12 JOB12 10 InProgress Driving Goal \"x\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: PICKUP12 JOB12 10 Completed None Goal \"x\" \"Lynx1\" 08/16/2012 14:32:54\n08/16/2012 14:33:15 0\nQueueUpdate: DROPOFF13 JOB12 20 InProgress UnAllocated Goal \"y\" \"Lynx1\" 08/16/2012\n14:32:54 None None 0\nQueueUpdate: DROPOFF13 JOB12 20 InProgress Allocated Goal \"y\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: DROPOFF13 JOB12 20 InProgress Driving Goal \"y\" \"Lynx1\" 08/16/2012 14:32:54\nNone None 0\nQueueUpdate: DROPOFF13 JOB12 20 Completed None Goal \"y\" \"Lynx1\" 08/16/2012 14:32:54\n08/16/2012 14:33:27 0\nQueueUpdate: PICKUP14 JOB14 10 Completed None Goal \"y\" \"Lynx1\" 08/16/2012 14:33:01\n08/16/2012 14:33:27 0\nQueueUpdate: DROPOFF15 JOB14 20 InProgress UnAllocated Goal \"t\" \"Lynx1\" 08/16/2012\n14:33:01 None None 0\nQueueUpdate: DROPOFF15 JOB14 20 InProgress Allocated Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 239",
    "Page 240": "queuePickupDropoff Command (shortcut: qpd)\nNone None 0\nQueueUpdate: DROPOFF15 JOB14 20 InProgress Driving Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\nNone None 0\nQueueUpdate: DROPOFF15 JOB14 20 Completed None Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\n08/16/2012 14:33:35 0\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 240\n\nqueuePickupDropoff Command (shortcut: qpd)\nNone None 0\nQueueUpdate: DROPOFF15 JOB14 20 InProgress Driving Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\nNone None 0\nQueueUpdate: DROPOFF15 JOB14 20 Completed None Goal \"t\" \"Lynx1\" 08/16/2012 14:33:01\n08/16/2012 14:33:35 0\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 240",
    "Page 241": "queueQuery Command (shortcut: qq)\nqueueQuery Command (shortcut: qq)\nShows the job status of the queue by type or value.\nItems will be displayed by priority. If, for example, dropoff priority is 20 and pickup priority is 10, then\ndropoff items will be displayed first, followed by pickup items.\nSyntax\nqueueQuery <type> <value> [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ntype\nEnter the type of job. Valid types are:\nl id = the pickup or dropoff identification\nl jobId = the job identification\nl robotName = the robot name\nl status = the item status.\nvalue\nEnter the value that corresponds with the type used:\nFor id, enter the pickup or dropoff identification, for example:\nPICKUP2\nFor jobid, enter the job identification, for example: JOB2\nFor robotname, enter the robot name, for example: robot_34\nFor status, enter one of the following values:\nl inprogress = queries a job with an InProgress status.\nl pending = queries a job with a Pending status.\nl interrupted = queries a job with an Interrupted status.\nl completed = queries a job with a Completed status.\nl cancelled = queries a job with a Cancelled status.\nl failed = queries a job with a Failed status.\nechoString\nAn optional string that is appended to each line of the results.\nResponses\nThe command returns the following for a pending item:\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 241\n\nqueueQuery Command (shortcut: qq)\nqueueQuery Command (shortcut: qq)\nShows the job status of the queue by type or value.\nItems will be displayed by priority. If, for example, dropoff priority is 20 and pickup priority is 10, then\ndropoff items will be displayed first, followed by pickup items.\nSyntax\nqueueQuery\n <type> <value> [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ntype\nEnter the type of job. Valid types are:\nl\n id = the pickup or dropoff identification\nl\n jobId = the job identification\nl\n robotName = the robot name\nl\n status = the item status.\nvalue\nEnter the value that corresponds with the type used:\nFor id, enter the pickup or dropoff identification, for example:\nPICKUP2\nFor jobid, enter the job identification, for example: JOB2\nFor robotname, enter the robot name, for example: robot_34\nFor status, enter one of the following values:\nl\n inprogress = queries a job with an InProgress status.\nl\n pending = queries a job with a Pending status.\nl\n interrupted = queries a job with an Interrupted status.\nl\n completed = queries a job with a Completed status.\nl\n cancelled = queries a job with a Cancelled status.\nl\n failed = queries a job with a Failed status.\nechoString\nAn optional string that is appended to each line of the results.\nResponses\nThe command returns the following for a pending item:\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 241",
    "Page 242": "queueQuery Command (shortcut: qq)\nQueueQuery: <id> <jobId> <priority> <status> <substatus> Goal <\"goalName\"> <robotName>\n<queued date> <queued time> <completed date> <completed time> <echostring> <failed\ncount>\u00a0\nEndQueueQuery\u00a0\u00a0\nThe returned items will be displayed by priority, as shown in the Examples. If, for example, dropoff priority\nis 20 and pickup priority is 10, the dropoff items will be displayed before the pickup items.\nDetails\nThe queueQuery command is used to view the status of the job queue. The queue can be queried by type\n(such as the robot name or job identification) or by the job status.\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nAn optional string can be specified, which will be appended to each line of the results.\nFor details on the status conditions, see Status Conditions on page 51.\nExamples\nThe following example shows the status of the completed jobs in the queue.\nqueuequery status completed xyz\nQueueQuery: DROPOFF18 y4rt 22 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011 07:07:53\n12/19/2011\n07:08:07 xyz 0\nQueueQuery: DROPOFF16 abc 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:06:00\n12/19/2011\n07:06:16 xyz 0\nQueueQuery: DROPOFF17 JOB17 20 Completed None Goal \"z\" \u201cMT-490\u201d 12/19/2011\n07:06:21\n12/19/2011\n07:06:35 xyz 0\nQueueQuery: DROPOFF19 yyy 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:08:49\n12/19/2011\n07:08:49 xyz 0\nQueueQuery: DROPOFF20 yyy 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:09:08\n12/19/2011\n07:09:09 xyz 1\nQueueQuery: DROPOFF21 JOB21 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:09:33\n12/19/2011\n07:09:34 xyz 0\nQueueQuery: PICKUP12 xyz 11 Completed None Goal \"t\" \u201cMT-490\u201d 12/19/2011\n06:53:51\n12/19/2011\n06:54:02 xyz 5\nQueueQuery: PICKUP13 xyz 11 Completed None Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 12/19/2011\n06:54:34 xyz 0\nEndQueueQuery\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 242\n\nqueueQuery Command (shortcut: qq)\nQueueQuery: <id> <jobId> <priority> <status> <substatus> Goal <\"goalName\"> <robotName>\n<queued date> <queued time> <completed date> <completed time> <echostring> <failed\ncount>\u00a0\nEndQueueQuery\u00a0\u00a0\nThe returned items will be displayed by priority, as shown in the Examples. If, for example, dropoff priority\nis 20 and pickup priority is 10, the dropoff items will be displayed before the pickup items.\nDetails\nThe queueQuery command is used to view the status of the job queue. The queue can be queried by type\n(such as the robot name or job identification) or by the job status.\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nAn optional string can be specified, which will be appended to each line of the results.\nFor details on the status conditions, see Status Conditions on page 51.\nExamples\nThe following example shows the status of the completed jobs in the queue.\nqueuequery status completed xyz\nQueueQuery: DROPOFF18 y4rt 22 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011 07:07:53\n12/19/2011\n07:08:07 xyz 0\nQueueQuery: DROPOFF16 abc 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:06:00\n12/19/2011\n07:06:16 xyz 0\nQueueQuery: DROPOFF17 JOB17 20 Completed None Goal \"z\" \u201cMT-490\u201d 12/19/2011\n07:06:21\n12/19/2011\n07:06:35 xyz 0\nQueueQuery: DROPOFF19 yyy 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:08:49\n12/19/2011\n07:08:49 xyz 0\nQueueQuery: DROPOFF20 yyy 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:09:08\n12/19/2011\n07:09:09 xyz 1\nQueueQuery: DROPOFF21 JOB21 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:09:33\n12/19/2011\n07:09:34 xyz 0\nQueueQuery: PICKUP12 xyz 11 Completed None Goal \"t\" \u201cMT-490\u201d 12/19/2011\n06:53:51\n12/19/2011\n06:54:02 xyz 5\nQueueQuery: PICKUP13 xyz 11 Completed None Goal \"z\" \u201cAdept_Telepresence_Robot\u201d\n12/19/2011\n06:54:18 12/19/2011\n06:54:34 xyz 0\nEndQueueQuery\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 242",
    "Page 243": "queueQuery Command (shortcut: qq)\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 243\n\nqueueQuery Command (shortcut: qq)\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 243",
    "Page 244": "queueQueryLocal Command (shortcut: qql)\nqueueQueryLocal Command (shortcut: qql)\nShows the job status of the robot queue by type or value.\nItems will be displayed by priority. If, for example, dropoff priority is 20 and pickup priority is 10, then\ndropoff items will be displayed first, followed by pickup items.\nSyntax\nqueueQueryLocal <type> <value> [echoString]\nBecause the queueQueryLocal command is only available on the robot, it assumes it applies only to the\nitems queued for that robot. This is a powerful difference (and feature) of the \"local\" version of the com-\nmand. So, for example, a \"queueQuerylLocal status inprogress\" command would allow you to query, based\non inprogress status, all jobs queued for that particular robot.\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ntype\nEnter the type of job. Valid types are:\nl id = the pickup or dropoff identification\nl jobId = the job identification\nl robotName = the robot name\nl status = the item status.\nvalue\nEnter the value that corresponds with the type used:\nFor id, enter the pickup or dropoff identification, for example:\nPICKUP2\nFor jobid, enter the job identification, for example: JOB2\nFor robotname, enter the robot name, for example: robot_34\nFor status, enter one of the following values:\nl inprogress = queries a job with an InProgress status.\nl pending = queries a job with a Pending status.\nl interrupted = queries a job with an Interrupted status.\nl completed = queries a job with a Completed status.\nl cancelled = queries a job with a Cancelled status.\nl failed = queries a job with a Failed status.\nechoString\nAn optional string that is appended to each line of the results.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 244\n\nqueueQueryLocal Command (shortcut: qql)\nqueueQueryLocal Command (shortcut: qql)\nShows the job status of the robot queue by type or value.\nItems will be displayed by priority. If, for example, dropoff priority is 20 and pickup priority is 10, then\ndropoff items will be displayed first, followed by pickup items.\nSyntax\nqueueQueryLocal\n <type> <value> [echoString]\nBecause the queueQueryLocal command is only available on the robot, it assumes it applies only to the\nitems queued for that robot. This is a powerful difference (and feature) of the \"local\" version of the com-\nmand. So, for example, a \"queueQuerylLocal status inprogress\" command would allow you to query, based\non inprogress status, all jobs queued for that particular robot.\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\ntype\nEnter the type of job. Valid types are:\nl\n id = the pickup or dropoff identification\nl\n jobId = the job identification\nl\n robotName = the robot name\nl\n status = the item status.\nvalue\nEnter the value that corresponds with the type used:\nFor id, enter the pickup or dropoff identification, for example:\nPICKUP2\nFor jobid, enter the job identification, for example: JOB2\nFor robotname, enter the robot name, for example: robot_34\nFor status, enter one of the following values:\nl\n inprogress = queries a job with an InProgress status.\nl\n pending = queries a job with a Pending status.\nl\n interrupted = queries a job with an Interrupted status.\nl\n completed = queries a job with a Completed status.\nl\n cancelled = queries a job with a Cancelled status.\nl\n failed = queries a job with a Failed status.\nechoString\nAn optional string that is appended to each line of the results.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 244",
    "Page 245": "queueQueryLocal Command (shortcut: qql)\nResponses\nThe command returns the following for a pending item:\nQueueQuery: <id> <jobId> <priority> <status> <substatus> Goal <\"goalName\"> <robotName>\n<queued date> <queued time> <completed date> <completed time> <echostring> <failed count>\u00a0\nEndQueueQuery\u00a0\u00a0\nThe returned items will be displayed by priority, as shown in the Examples. If, for example, dropoff priority\nis 20 and pickup priority is 10, the dropoff items will be displayed before the pickup items.\nDetails\nThe queueQuery command is used to view the status of the job queue. The queue can be queried by type\n(such as the robot name or job identification) or by the job status.\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nAn optional string can be specified, which will be appended to each line of the results.\nFor details on the status conditions, see Status Conditions on page 51.\nExamples\nThe following example shows the status of the completed jobs in the queue.\nqueuequery status completed xyz\nQueueQuery: DROPOFF18 y4rt 22 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011 07:07:53\n12/19/2011\n07:08:07 xyz 0\nQueueQuery: DROPOFF16 abc 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:06:00\n12/19/2011\n07:06:16 xyz 0\nQueueQuery: DROPOFF17 JOB17 20 Completed None Goal \"z\" \u201cMT-490\u201d 12/19/2011\n07:06:21\n12/19/2011\n07:06:35 xyz 0\nQueueQuery: DROPOFF19 yyy 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:08:49\n12/19/2011\n07:08:49 xyz 0\nQueueQuery: DROPOFF20 yyy 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:09:08\n12/19/2011\n07:09:09 xyz 1\nQueueQuery: DROPOFF21 JOB21 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:09:33\n12/19/2011\n07:09:34 xyz 0\nQueueQuery: PICKUP12 xyz 11 Completed None Goal \"t\" \u201cMT-490\u201d 12/19/2011\n06:53:51\n12/19/2011\n06:54:02 xyz 5\nQueueQuery: PICKUP13 xyz 11 Completed None Goal \"z\" \u201cAdept_Telepresence_Robot\u201d 12/19/2011\n06:54:18 12/19/2011\n06:54:34 xyz 0\nEndQueueQuery\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 245\n\nqueueQueryLocal Command (shortcut: qql)\nResponses\nThe command returns the following for a pending item:\nQueueQuery: <id> <jobId> <priority> <status> <substatus> Goal <\"goalName\"> <robotName>\n<queued date> <queued time> <completed date> <completed time> <echostring> <failed count>\u00a0\nEndQueueQuery\u00a0\u00a0\nThe returned items will be displayed by priority, as shown in the Examples. If, for example, dropoff priority\nis 20 and pickup priority is 10, the dropoff items will be displayed before the pickup items.\nDetails\nThe queueQuery command is used to view the status of the job queue. The queue can be queried by type\n(such as the robot name or job identification) or by the job status.\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nAn optional string can be specified, which will be appended to each line of the results.\nFor details on the status conditions, see Status Conditions on page 51.\nExamples\nThe following example shows the status of the completed jobs in the queue.\nqueuequery status completed xyz\nQueueQuery: DROPOFF18 y4rt 22 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011 07:07:53\n12/19/2011\n07:08:07 xyz 0\nQueueQuery: DROPOFF16 abc 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:06:00\n12/19/2011\n07:06:16 xyz 0\nQueueQuery: DROPOFF17 JOB17 20 Completed None Goal \"z\" \u201cMT-490\u201d 12/19/2011\n07:06:21\n12/19/2011\n07:06:35 xyz 0\nQueueQuery: DROPOFF19 yyy 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:08:49\n12/19/2011\n07:08:49 xyz 0\nQueueQuery: DROPOFF20 yyy 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:09:08\n12/19/2011\n07:09:09 xyz 1\nQueueQuery: DROPOFF21 JOB21 20 Completed None Goal \"x\" \u201cMT-490\u201d 12/19/2011\n07:09:33\n12/19/2011\n07:09:34 xyz 0\nQueueQuery: PICKUP12 xyz 11 Completed None Goal \"t\" \u201cMT-490\u201d 12/19/2011\n06:53:51\n12/19/2011\n06:54:02 xyz 5\nQueueQuery: PICKUP13 xyz 11 Completed None Goal \"z\" \u201cAdept_Telepresence_Robot\u201d 12/19/2011\n06:54:18 12/19/2011\n06:54:34 xyz 0\nEndQueueQuery\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 245",
    "Page 246": "queueQueryLocal Command (shortcut: qql)\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 246\n\nqueueQueryLocal Command (shortcut: qql)\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 246",
    "Page 247": "queueShow Command (shortcut: qs)\nqueueShow Command (shortcut: qs)\nShows the status of the last 11 jobs in the queue, including any jobs assigned to the robots and the status\nof each job. Oldest jobs are displayed first.\nSyntax\nqueueShow [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nShows all jobs and all robots. To look at a specific job, use queueQuery. To look at a specific robot, use\nqueueShowRobot.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nechoString\nAn optional string that is appended to each line of the results.\nResponses\nThe command returns the following information:\nQueueRobot: <robotName> <robotStatus> <robotSubstatus> <echoString>\nQueueShow: <id> <jobId> <priority> <status> <substatus> Goal <\"goalName\"> <\u201drobotName\u201d>\n<queued date> <queued time> <completed date> <completed time> <echoString> <failed count>\nEndQueueShow\nDetails\nThe queueShow command provides a listing of all robots connected to the Enterprise Manager, and all jobs\nin the queue including those that are pending, interrupted, or are currently assigned to the robots. You do\nnot specify a robot with this command. Instead, it lists the information for all robots. If you wish to look at a\nspecific robot, use the queueShowRobot command. For details, see the queueShowRobot Command\n(shortcut:\u00a0qsr) on page 251. If you wish to look at a specific job, use the queueQuery command. For details,\nsee the queueQuery Command (shortcut: qq) on page 241.\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nAn optional string can be specified, which will be appended to each line of the results.\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 247\n\nqueueShow Command (shortcut: qs)\nqueueShow Command (shortcut: qs)\nShows the status of the last 11 jobs in the queue, including any jobs assigned to the robots and the status\nof each job. Oldest jobs are displayed first.\nSyntax\nqueueShow\n [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nShows all jobs and all robots. To look at a specific job, use queueQuery. To look at a specific robot, use\nqueueShowRobot.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nechoString\nAn optional string that is appended to each line of the results.\nResponses\nThe command returns the following information:\nQueueRobot: <robotName> <robotStatus> <robotSubstatus> <echoString>\nQueueShow: <id> <jobId> <priority> <status> <substatus> Goal <\"goalName\"> <\u201drobotName\u201d>\n<queued date> <queued time> <completed date> <completed time> <echoString> <failed count>\nEndQueueShow\nDetails\nThe queueShow command provides a listing of all robots connected to the Enterprise Manager, and all jobs\nin the queue including those that are pending, interrupted, or are currently assigned to the robots. You do\nnot specify a robot with this command. Instead, it lists the information for all robots. If you wish to look at a\nspecific robot, use the queueShowRobot command. For details, see the queueShowRobot Command\n(shortcut:\u00a0qsr) on page 251. If you wish to look at a specific job, use the queueQuery command. For details,\nsee the queueQuery Command (shortcut: qq) on page 241.\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nAn optional string can be specified, which will be appended to each line of the results.\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 247",
    "Page 248": "queueShow Command (shortcut: qs)\nExamples\nqueueshow\nQueueRobot: \"21\" InProgress Driving \"\"\nQueueRobot: \"22\" Available Available \"\"\nQueueRobot: \"23\" Available Available \"\"\nQueueRobot: \"24\" Available Available \"\"\nQueueRobot: \"25\" Available Available \"\"\nQueueRobot: \"26\" Available Available \"\"\nQueueShow: PICKUP3 JOB3 10 Completed None Goal \"1\" \"21\" 11/14/2012 11:49:23 11/14/2012\n11:49:23 \"\" 0\nQueueShow: PICKUP4 JOB4 10 InProgress Driving Goal \"7\" \"21\" 11/14/2012 11:49:34 None\nNone \"\" 0\nEndQueueShow\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 248\n\nqueueShow Command (shortcut: qs)\nExamples\nqueueshow\nQueueRobot: \"21\" InProgress Driving \"\"\nQueueRobot: \"22\" Available Available \"\"\nQueueRobot: \"23\" Available Available \"\"\nQueueRobot: \"24\" Available Available \"\"\nQueueRobot: \"25\" Available Available \"\"\nQueueRobot: \"26\" Available Available \"\"\nQueueShow: PICKUP3 JOB3 10 Completed None Goal \"1\" \"21\" 11/14/2012 11:49:23 11/14/2012\n11:49:23 \"\" 0\nQueueShow: PICKUP4 JOB4 10 InProgress Driving Goal \"7\" \"21\" 11/14/2012 11:49:34 None\nNone \"\" 0\nEndQueueShow\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShowCompleted Command (shortcut: qsc) on page 249\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 248",
    "Page 249": "queueShowCompleted Command (shortcut: qsc)\nqueueShowCompleted Command (shortcut: qsc)\nShows the jobs in the queue with a status of Completed, oldest first.\nSyntax\nqueueshowcompleted [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nShows only jobs with a status of Completed. To look at a specific job, use queueQuery. To look at a specific\nrobot, use queueShowRobot.\nThe configuration parameter maxNumberOfCompletedItems, which has a default of 100, limits the num-\nber of completed jobs that will be kept in the queue.\nThe configuration parameter DeleteCompletedItemsMinutes, which has a default of 60, determines how\nlong completed jobs will be kept in the queue. Jobs older than this will be deleted from the queue, and can-\nnot be viewed.\nEither of these two parameters can limit the number of jobs in the queue that are available for viewing with\nthe queueShowCompleted command.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nechoString\nAn optional string that is appended to each line of the results.\nReturns\nThe command returns the following information:\nQueueShow: <id> <jobId> <priority> <status> <substatus> Goal <\"goalName\"> <\u201drobotName\u201d>\n<queued date> <queued time> <completed date> <completed time> <echoString> <failed count>\nEndQueueShowCompleted\nDetails\nThe queueShowCompleted command provides a listing of the jobs in the queue that are Completed, oldest\nfirst. You do not specify a robot with this command. Instead, it lists the information for all robots. If you\nwish to look at a specific robot, use the queueShowRobot command. For details, see the queueShowRobot\nCommand (shortcut:\u00a0qsr) on page 251. If you wish to look at a specific job, use the queueQuery command.\nFor details, see the queueQuery Command (shortcut: qq) on page 241.\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 249\n\nqueueShowCompleted Command (shortcut: qsc)\nqueueShowCompleted Command (shortcut: qsc)\nShows the jobs in the queue with a status of Completed, oldest first.\nSyntax\nqueueshowcompleted\n [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nShows only jobs with a status of Completed. To look at a specific job, use queueQuery. To look at a specific\nrobot, use queueShowRobot.\nThe configuration parameter maxNumberOfCompletedItems, which has a default of 100, limits the num-\nber of completed jobs that will be kept in the queue.\nThe configuration parameter DeleteCompletedItemsMinutes, which has a default of 60, determines how\nlong completed jobs will be kept in the queue. Jobs older than this will be deleted from the queue, and can-\nnot be viewed.\nEither of these two parameters can limit the number of jobs in the queue that are available for viewing with\nthe queueShowCompleted command.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nechoString\nAn optional string that is appended to each line of the results.\nReturns\nThe command returns the following information:\nQueueShow: <id> <jobId> <priority> <status> <substatus> Goal <\"goalName\"> <\u201drobotName\u201d>\n<queued date> <queued time> <completed date> <completed time> <echoString> <failed count>\nEndQueueShowCompleted\nDetails\nThe queueShowCompleted command provides a listing of the jobs in the queue that are Completed, oldest\nfirst. You do not specify a robot with this command. Instead, it lists the information for all robots. If you\nwish to look at a specific robot, use the queueShowRobot command. For details, see the queueShowRobot\nCommand (shortcut:\u00a0qsr) on page 251. If you wish to look at a specific job, use the queueQuery command.\nFor details, see the queueQuery Command (shortcut: qq) on page 241.\nAdept ARCL Reference Guide, Updated: 9:26:55 AM\nPage 249",
    "Page 250": "queueShowCompleted Command (shortcut: qsc)\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nAn optional string can be specified, which will be appended to each line of the results.\nExamples\nqueueshowcompleted\nQueueShow: PICKUP19 JOB19 10 Completed None Goal \"t\" \"Bullwinkle (.53)\" 05/06/2013\n05:55:33 05/06/2013 05:56:02 \"\" 0\nQueueShow: PICKUP21 JOB21 10 Completed None Goal \"t\" \"guiabot_2010_09_20\" 05/06/2013\n06:00:21 05/06/2013 06:00:42 \"\" 0\nQueueShow: PICKUP22 JOB22 10 Completed None Goal \"t\" \"Bullwinkle (.53)\" 05/06/2013\n06:00:32 05/06/2013 06:01:05 \"\" 0\nQueueShow: PICKUP23 JOB23 10 Completed None Goal \"t\" \"guiabot_2010_09_20\" 05/06/2013\n06:01:03 05/06/2013 06:01:23 \"\" 0\nEndQueueShowCompleted\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 250\n\nqueueShowCompleted Command (shortcut: qsc)\nThe reported jobId was either provided as part of the request, or was autogenerated by the Enterprise Man-\nager software.\nAll failed counts are based on the jobId.\nFor details on the status conditions, see Status Conditions on page 51.\nAn optional string can be specified, which will be appended to each line of the results.\nExamples\nqueueshowcompleted\nQueueShow: PICKUP19 JOB19 10 Completed None Goal \"t\" \"Bullwinkle (.53)\" 05/06/2013\n05:55:33 05/06/2013 05:56:02 \"\" 0\nQueueShow: PICKUP21 JOB21 10 Completed None Goal \"t\" \"guiabot_2010_09_20\" 05/06/2013\n06:00:21 05/06/2013 06:00:42 \"\" 0\nQueueShow: PICKUP22 JOB22 10 Completed None Goal \"t\" \"Bullwinkle (.53)\" 05/06/2013\n06:00:32 05/06/2013 06:01:05 \"\" 0\nQueueShow: PICKUP23 JOB23 10 Completed None Goal \"t\" \"guiabot_2010_09_20\" 05/06/2013\n06:01:03 05/06/2013 06:01:23 \"\" 0\nEndQueueShowCompleted\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nqueueShowRobot Command (shortcut:\u00a0qsr) on page 251\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 250",
    "Page 251": "queueShowRobot Command (shortcut:\u00a0qsr)\nqueueShowRobot Command (shortcut:\u00a0qsr)\nShows the status and substatus of all robots (or, optionally, a specific robot) connected to the Enterprise\nManager.\nSyntax\nqueueShowRobot [robotName or \"default\"] [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nThis command does not return any job information; to view the queue and job information, use the\nqueueShow command from ARCL on the Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nrobotName\nEnter the name of the robot. To view all the robots connected to the\nEnterprise Manager, omit this parameter or enter \"default\".\nechoString\nAn optional string that is appended to each line of the results.\nRequires a value in the previous parameter.\nResponses\nThe command returns the following:\nQueueRobot: \"robotName\" robotStatus robotSubstatus echoString\nEndQueueShowRobot\nFor details on the status conditions, see Status Conditions on page 51.\nDetails\nThe queueShowRobot command displays the status of the robots currently connected to the Enterprise\nManager. Optionally, this command allows you to query a specific robot name, versus the queueShow com-\nmand, which returns the queue status for all robots along with queue information.\nThis command does not return the job status for jobs currently in progress. To view that information, use\nthe queueShow command. For details, see queueShow Command (shortcut: qs) on page 247.\nAn optional string can be specified, which will be appended to each line of the results.\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 251\n\nqueueShowRobot Command (shortcut:\u00a0qsr)\nqueueShowRobot Command (shortcut:\u00a0qsr)\nShows the status and substatus of all robots (or, optionally, a specific robot) connected to the Enterprise\nManager.\nSyntax\nqueueShowRobot\n [robotName or \"default\"] [echoString]\nUsage Considerations\nThis ARCL\u00a0command is available only on the Enterprise Manager.\nThis command does not return any job information; to view the queue and job information, use the\nqueueShow command from ARCL on the Enterprise Manager.\nParameters\nThe command parameters are described in the following table.\nFor details on the data types, see Data Types on page 48.\nParameter\nDefinition\nrobotName\nEnter the name of the robot. To view all the robots connected to the\nEnterprise Manager, omit this parameter or enter \"default\".\nechoString\nAn optional string that is appended to each line of the results.\nRequires a value in the previous parameter.\nResponses\nThe command returns the following:\nQueueRobot: \"robotName\" robotStatus robotSubstatus echoString\nEndQueueShowRobot\nFor details on the status conditions, see Status Conditions on page 51.\nDetails\nThe queueShowRobot command displays the status of the robots currently connected to the Enterprise\nManager. Optionally, this command allows you to query a specific robot name, versus the queueShow com-\nmand, which returns the queue status for all robots along with queue information.\nThis command does not return the job status for jobs currently in progress. To view that information, use\nthe queueShow command. For details, see queueShow Command (shortcut: qs) on page 247.\nAn optional string can be specified, which will be appended to each line of the results.\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 251",
    "Page 252": "queueShowRobot Command (shortcut:\u00a0qsr)\nExamples\nThe following example shows the status and substatus of robot 31:\nqueueshowrobot 31\nQueueRobot: \"31\" Available Available \"\"\nThe following example shows the status and substatus of all robots and includes an optional message\n\"echoit\":\nQueueshowrobot default echoit\nQueueRobot: \u201cRobot1\u201d UnAvailable EStopPressed echoit\nQueueRobot: \u201cRobot2\u201d UnAvailable Interrupted echoit\nQueueRobot: \u201cRobot3\u201d UnAvailable InterruptedButNotYetIdle echoit\nQueueRobot: \u201cRobot4\u201d Available Available echoit\nQueueRobot: \u201cRobot5\u201d InProgress Driving\nechoit\nQueueRobot: \u201cRobot6\u201d UnAvailable NotUsingEnterpriseManager echoit\nQueueRobot: \u201cRobot7\u201d UnAvailable UnknownBatteryType echoit\nQueueRobot: \u201cRobot8\u201d UnAvailable ForcedDocked echoit\nQueueRobot: \u201cRobot9\u201d UnAvailable NotLocalized echoit\nQueueRobot: \"patrolbot\" UnAvailable Fault_Driving_Application_faultName echoit\nEndQueueShowRobot\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 252\n\nqueueShowRobot Command (shortcut:\u00a0qsr)\nExamples\nThe following example shows the status and substatus of robot 31:\nqueueshowrobot 31\nQueueRobot: \"31\" Available Available \"\"\nThe following example shows the status and substatus of all robots and includes an optional message\n\"echoit\":\nQueueshowrobot default echoit\nQueueRobot: \u201cRobot1\u201d UnAvailable EStopPressed echoit\nQueueRobot: \u201cRobot2\u201d UnAvailable Interrupted echoit\nQueueRobot: \u201cRobot3\u201d UnAvailable InterruptedButNotYetIdle echoit\nQueueRobot: \u201cRobot4\u201d Available Available echoit\nQueueRobot: \u201cRobot5\u201d InProgress Driving\nechoit\nQueueRobot: \u201cRobot6\u201d UnAvailable NotUsingEnterpriseManager echoit\nQueueRobot: \u201cRobot7\u201d UnAvailable UnknownBatteryType echoit\nQueueRobot: \u201cRobot8\u201d UnAvailable ForcedDocked echoit\nQueueRobot: \u201cRobot9\u201d UnAvailable NotLocalized echoit\nQueueRobot: \"patrolbot\" UnAvailable Fault_Driving_Application_faultName echoit\nEndQueueShowRobot\nRelated Commands\nqueryFaults Command (shortcut: qf) on page 204\nqueueCancel Command (shortcut: qc) on page 209\nqueueCancel Command (shortcut: qc) on page 209\nqueueDropoff Command (shortcut: qd) on page 215\nqueueMulti Command (shortcut: qm) on page 229\nqueuePickup Command (shortcut: qp) on page 233\nqueuePickupDropoff Command (shortcut: qpd) on page 236\nqueueQuery Command (shortcut: qq) on page 241\nqueueQuery Command (shortcut: qq) on page 241\nqueueShow Command (shortcut: qs) on page 247\nqueueShowCompleted Command (shortcut: qsc) on page 249\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 252",
    "Page 253": "queueShowRobotLocal Command (shortcut: qsrl)\nqueueShowRobotLocal Command (shortcut: qsrl)\nThe queueShowRobotLocal command displays the status of the robot.\nSyntax\nqueueshowrobotlocal [echo_string]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe queueShowRobotLocal arguments are described in the table below.\nParameter\nDefinition\n[echo_string]\nEnter an optional string value that will be displayed at the end of the\ncommand.\nDetails\nARCL displays the following:\nQueueRobot: robot_name robot_status robot_substatus echostring\nExamples\nThe following example shows the queueShowRobotLocal command used to display the status and sub-\nstatus of the robot. It includes an optional message \"echoit\".\nqueueshowrobotlocal echoit\nQueueRobot: \u201cRobot1\u201d UnAvailable EStopPressed echoit\nEndQueueShowRobot\nRelated Commands\nqueueCancel Command\nqueueDropoff command\nqueuePickup command\nqueuePickupDropoff command\nqueueQuery Command\nqueueShow command\nqueueShowRobot Command\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 253\n\nqueueShowRobotLocal Command (shortcut: qsrl)\nqueueShowRobotLocal Command (shortcut: qsrl)\nThe queueShowRobotLocal command displays the status of the robot.\nSyntax\nqueueshowrobotlocal\n [echo_string]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe queueShowRobotLocal arguments are described in the table below.\nParameter\nDefinition\n[echo_string]\nEnter an optional string value that will be displayed at the end of the\ncommand.\nDetails\nARCL displays the following:\nQueueRobot: robot_name robot_status robot_substatus echostring\nExamples\nThe following example shows the queueShowRobotLocal command used to display the status and sub-\nstatus of the robot. It includes an optional message \"echoit\".\nqueueshowrobotlocal echoit\nQueueRobot: \u201cRobot1\u201d UnAvailable EStopPressed echoit\nEndQueueShowRobot\nRelated Commands\nqueueCancel Command\nqueueDropoff command\nqueuePickup command\nqueuePickupDropoff command\nqueueQuery Command\nqueueShow command\nqueueShowRobot Command\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 253",
    "Page 254": "quit Command\nquit Command\nCloses the connection to the server.\nSyntax\nrangeDeviceList\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nClosing connection\nDetails\nThe quit command closes the ARCL client-server connection. It only closes the connection; it does not\nshut down the server. To do that, use the shutDownServer command. For details, see shutDownServer\nCommand.\nExamples\nquit\nThe command returns:\nClosing connection\nRelated Commands\nshutdown Command on page 275\nshutDownServer Command\nstop Command on page 278\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 254\n\nquit Command\nquit Command\nCloses the connection to the server.\nSyntax\nrangeDeviceList\nUsage Considerations\nThis ARCL\u00a0command is available on the robot and Enterprise Manager.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nClosing connection\nDetails\nThe quit command closes the ARCL client-server connection. It only closes the connection; it does not\nshut down the server. To do that, use the shutDownServer command. For details, see shutDownServer\nCommand.\nExamples\nquit\nThe command returns:\nClosing connection\nRelated Commands\nshutdown Command on page 275\nshutDownServer Command\nstop Command on page 278\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 254",
    "Page 255": "rangeDeviceGetCumulative Command\nrangeDeviceGetCumulative Command\nGets the cumulative readings of a range device.\nSyntax\nrangeDeviceGetCumulative <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThis parameter is case-sensitive.\nThe robot may not sense anything if operated in an open area, and then it would not provide cumulative\nreadings.\nARAM Settings\nFor custom sensors: This command requires the addition of the \"-customSensor <name>\" argument to\nthe Custom Arguments section of the Configuration > Debug tab in the MobilePlanner software. For\ndetails, see the Adept Motivity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the device. This para-\nmeter is case-sensitive.\nResponses\nThe command returns:\nRangeDeviceGetCumulative: <name> <series of X and Y points>\nDetails\nThe rangeDeviceGetCumulative command returns persistent readings from the named ranging sensor.\nThis parameter is case-sensitive.\nThe X-Y coordinates are map points (in mm) for center of a polyDot or tip of a polyArrow, which display-\naligns toward the center of the robot.\nNote that not all sensors provide cumulative readings. For example, custom sensors do not provide cumu-\nlative readings. Lasers are the main sensors that provide cumulative readings that are useful. You can use\nthe rangeDeviceList command to identify the sensors that provide cumulative readings. If there is no\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 255\n\nrangeDeviceGetCumulative Command\nrangeDeviceGetCumulative Command\nGets the cumulative readings of a range device.\nSyntax\nrangeDeviceGetCumulative\n <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThis parameter is case-sensitive.\nThe robot may not sense anything if operated in an open area, and then it would not provide cumulative\nreadings.\nARAM Settings\nFor custom sensors: This command requires the addition of the \"-customSensor <name>\" argument to\nthe Custom Arguments section of the\n Configuration > Debug\n tab in the MobilePlanner software. For\ndetails, see the\n Adept Motivity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the device. This para-\nmeter is case-sensitive.\nResponses\nThe command returns:\nRangeDeviceGetCumulative: <name> <series of X and Y points>\nDetails\nThe rangeDeviceGetCumulative command returns persistent readings from the named ranging sensor.\nThis parameter is case-sensitive.\nThe X-Y coordinates are map points (in mm) for center of a polyDot or tip of a polyArrow, which display-\naligns toward the center of the robot.\nNote that not all sensors provide cumulative readings. For example, custom sensors do not provide cumu-\nlative readings. Lasers are the main sensors that provide cumulative readings that are useful. You can use\nthe rangeDeviceList command to identify the sensors that provide cumulative readings. If there is no\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 255",
    "Page 256": "rangeDeviceGetCumulative Command\n<rangeDeviceName>CumulativeDrawingData listed for a sensor, then that sensor doesn't provide cumu-\nlative readings.\nThe robot may not sense anything if operated in an open area, and then it would not provide cumulative\nreadings.\nExamples\nThe following command returns the cumulative readings for the device \"sim_lms2xx_1\":\nrangedevicegetcumulative sim_lms2xx_1\nThe command returns:\nRangeDeviceGetCumulative: sim_lms2xx_1\n-15600 10684\n-15016 10609\n-14464 10603\n-14712 10921\n-14177 10706\n-11343 10444\n-14834 10722\n-12696 10659\n-12485 10621\n-12056 10621\n-11838 10643\n-11630 10706\n-10364 10667\n-14471 10944\n-10820 11366\n-11315 10683\n-13950 10689\n-13739 10693\n-13525 10692\n-13309 10697\n-12256 10622\n-12898 10701\n-13103 10700\n-15254 10706\n-15048 10937\n-15041 11165\n-15162 11555\nRelated Commands\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 256\n\nrangeDeviceGetCumulative Command\n<rangeDeviceName>CumulativeDrawingData listed for a sensor, then that sensor doesn't provide cumu-\nlative readings.\nThe robot may not sense anything if operated in an open area, and then it would not provide cumulative\nreadings.\nExamples\nThe following command returns the cumulative readings for the device \"sim_lms2xx_1\":\nrangedevicegetcumulative sim_lms2xx_1\nThe command returns:\nRangeDeviceGetCumulative: sim_lms2xx_1\n-15600 10684\n-15016 10609\n-14464 10603\n-14712 10921\n-14177 10706\n-11343 10444\n-14834 10722\n-12696 10659\n-12485 10621\n-12056 10621\n-11838 10643\n-11630 10706\n-10364 10667\n-14471 10944\n-10820 11366\n-11315 10683\n-13950 10689\n-13739 10693\n-13525 10692\n-13309 10697\n-12256 10622\n-12898 10701\n-13103 10700\n-15254 10706\n-15048 10937\n-15041 11165\n-15162 11555\nRelated Commands\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 256",
    "Page 257": "rangeDeviceGetCurrent Command\nrangeDeviceGetCurrent Command\nGets the current readings of a range device.\nSyntax\nrangeDeviceGetCurrent <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThis parameter is case-sensitive.\nARAM Settings\nFor custom sensors: This command requires the addition of the \"-customSensor <name>\" argument to\nthe Custom Arguments section of the Configuration > Debug tab in the MobilePlanner software. For\ndetails, see the Adept Motivity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the device. This para-\nmeter is case-sensitive.\nResponses\nThe command returns:\nRangeDeviceGetCurrent: <name> <series of X and Y points>\nDetails\nThe rangeDeviceGetCurrent command returns only active (current) detection readings from the named\nranging sensor. This parameter is case-sensitive.\nTo get the cumulative readings from a range device, use the rangeDeviceGetCumulative command. For\ndetails, see rangeDeviceGetCumulative Command on page 255.\nThe X-Y coordinates are map points (in mm) for the center of a polyDot or tip of the polyArrow, which dis-\nplay-aligns toward the center of the robot.\nExamples\nThe following command returns the current reading for the device \"ARCL_CustomSensor\":\nrangedevicegetcurrent ARCL_CustomSensor\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 257\n\nrangeDeviceGetCurrent Command\nrangeDeviceGetCurrent Command\nGets the current readings of a range device.\nSyntax\nrangeDeviceGetCurrent\n <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThis parameter is case-sensitive.\nARAM Settings\nFor custom sensors: This command requires the addition of the \"-customSensor <name>\" argument to\nthe Custom Arguments section of the\n Configuration > Debug\n tab in the MobilePlanner software. For\ndetails, see the\n Adept Motivity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that represents the name for the device. This para-\nmeter is case-sensitive.\nResponses\nThe command returns:\nRangeDeviceGetCurrent: <name> <series of X and Y points>\nDetails\nThe rangeDeviceGetCurrent command returns only active (current) detection readings from the named\nranging sensor. This parameter is case-sensitive.\nTo get the cumulative readings from a range device, use the rangeDeviceGetCumulative command. For\ndetails, see rangeDeviceGetCumulative Command on page 255.\nThe X-Y coordinates are map points (in mm) for the center of a polyDot or tip of the polyArrow, which dis-\nplay-aligns toward the center of the robot.\nExamples\nThe following command returns the current reading for the device \"ARCL_CustomSensor\":\nrangedevicegetcurrent ARCL_CustomSensor\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 257",
    "Page 258": "rangeDeviceGetCurrent Command\nThe command returns:\nRangeDeviceGetCurrent: ARCL_CustomSensor\n-2004 6921\nRelated Commands\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 258\n\nrangeDeviceGetCurrent Command\nThe command returns:\nRangeDeviceGetCurrent: ARCL_CustomSensor\n-2004 6921\nRelated Commands\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 258",
    "Page 259": "rangeDeviceList Command\nrangeDeviceList Command\nReturns the list of range (sensor) devices.\nSyntax\nrangeDeviceList\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nARAM Settings\nFor custom sensors: This command requires the addition of the \"-customSensor <name>\" argument to\nthe Custom Arguments section of the Configuration > Debug tab in the MobilePlanner software. For\ndetails, see the Adept Motivity Software User's Guide.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nRangeDevice: <name> <type>\nRangeDevice: <name> <icon> <RGB primary> <RGB secondary> <size mm> <layer> <defaultOn or\ndefaultOff>\nRangeDeviceCumulativeDrawingData:\u201d <name> <icon> <RGB primary> <RGB secondary> <size mm>\n<layer> <defaultOn or defaultOff>\n...\nEndOfRangeDeviceList\nDetails\nThe rangeDeviceList command returns a list of the range (sensor) devices available in the current map. It\nalso provides details about each device on the list. For details on the information returned, see the\nResponses section.\nExamples\nrangeDeviceList\nThe command returns:\nRangeDevice: switchableForbidden LOCATION_DEPENDENT\nRangeDeviceCurrentDrawingData: switchableForbidden polyDots 0xf9bd30 0x000000 35 73\nDefaultOff\nRangeDeviceCumulativeDrawingData: switchableForbidden polyDots 0x8b6305 0x0 50 60\nDefaultOff\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 259\n\nrangeDeviceList Command\nrangeDeviceList Command\nReturns the list of range (sensor) devices.\nSyntax\nrangeDeviceList\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nARAM Settings\nFor custom sensors: This command requires the addition of the \"-customSensor <name>\" argument to\nthe Custom Arguments section of the\n Configuration > Debug\n tab in the MobilePlanner software. For\ndetails, see the\n Adept Motivity Software User's Guide.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nRangeDevice: <name> <type>\nRangeDevice: <name> <icon> <RGB primary> <RGB secondary> <size mm> <layer> <defaultOn or\ndefaultOff>\nRangeDeviceCumulativeDrawingData:\u201d <name> <icon> <RGB primary> <RGB secondary> <size mm>\n<layer> <defaultOn or defaultOff>\n...\nEndOfRangeDeviceList\nDetails\nThe rangeDeviceList command returns a list of the range (sensor) devices available in the current map. It\nalso provides details about each device on the list. For details on the information returned, see the\nResponses section.\nExamples\nrangeDeviceList\nThe command returns:\nRangeDevice: switchableForbidden LOCATION_DEPENDENT\nRangeDeviceCurrentDrawingData: switchableForbidden polyDots 0xf9bd30 0x000000 35 73\nDefaultOff\nRangeDeviceCumulativeDrawingData: switchableForbidden polyDots 0x8b6305 0x0 50 60\nDefaultOff\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 259",
    "Page 260": "rangeDeviceList Command\nRangeDevice: Single_Robot_Sector LOCATION_DEPENDENT\nRangeDeviceCurrentDrawingData: Single_Robot_Sector polyDots 0xd00000 0x000000 33 74\nDefaultOff\nRangeDevice: multiRobotCentral LOCATION_DEPENDENT\nRangeDeviceCurrentDrawingData: multiRobotCentral polyDots 0x7d7d00 0x000000 100 72\nDefaultOff\nRangeDeviceCumulativeDrawingData: multiRobotCentral polyDots 0x7d007d 0x0 100 72\nDefaultOff\nRangeDevice: ARCL_GlobalCustomSensor NONE\nRangeDeviceCurrentDrawingData: ARCL_GlobalCustomSensor polyDots 0xc5996c 0x000000 40 78\nDefaultOn\nRangeDevice: ARCL_CustomSensor NONE\nRangeDeviceCurrentDrawingData: ARCL_CustomSensor polyDots 0xe9d324 0x000000 40 78\nDefaultOn\nRangeDevice: forbidden LOCATION_DEPENDENT\nRangeDevice: irs NONE\nRangeDeviceCurrentDrawingData: irs polyArrows 0xffff00 0x000000 120 80 DefaultOn\nRangeDevice: bumpers NONE\nRangeDeviceCurrentDrawingData: bumpers polyDots 0x000000 0x000000 120 83 DefaultOn\nRangeDevice: sonar NONE\nRangeDeviceCurrentDrawingData: sonar polyArrows 0x33ccff 0x000000 200 70 DefaultOn\nRangeDevice: sim_lms2xx_1 LASER\nRangeDeviceCurrentDrawingData: sim_lms2xx_1 polyDots 0x0000ff 0x000000 80 75 DefaultOn\nRangeDeviceCumulativeDrawingData: sim_lms2xx_1 polyDots 0x7f 0x0 110 60 DefaultOn\nEndOfRangeDeviceList\nRelated Commands\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 260\n\nrangeDeviceList Command\nRangeDevice: Single_Robot_Sector LOCATION_DEPENDENT\nRangeDeviceCurrentDrawingData: Single_Robot_Sector polyDots 0xd00000 0x000000 33 74\nDefaultOff\nRangeDevice: multiRobotCentral LOCATION_DEPENDENT\nRangeDeviceCurrentDrawingData: multiRobotCentral polyDots 0x7d7d00 0x000000 100 72\nDefaultOff\nRangeDeviceCumulativeDrawingData: multiRobotCentral polyDots 0x7d007d 0x0 100 72\nDefaultOff\nRangeDevice: ARCL_GlobalCustomSensor NONE\nRangeDeviceCurrentDrawingData: ARCL_GlobalCustomSensor polyDots 0xc5996c 0x000000 40 78\nDefaultOn\nRangeDevice: ARCL_CustomSensor NONE\nRangeDeviceCurrentDrawingData: ARCL_CustomSensor polyDots 0xe9d324 0x000000 40 78\nDefaultOn\nRangeDevice: forbidden LOCATION_DEPENDENT\nRangeDevice: irs NONE\nRangeDeviceCurrentDrawingData: irs polyArrows 0xffff00 0x000000 120 80 DefaultOn\nRangeDevice: bumpers NONE\nRangeDeviceCurrentDrawingData: bumpers polyDots 0x000000 0x000000 120 83 DefaultOn\nRangeDevice: sonar NONE\nRangeDeviceCurrentDrawingData: sonar polyArrows 0x33ccff 0x000000 200 70 DefaultOn\nRangeDevice: sim_lms2xx_1 LASER\nRangeDeviceCurrentDrawingData: sim_lms2xx_1 polyDots 0x0000ff 0x000000 80 75 DefaultOn\nRangeDeviceCumulativeDrawingData: sim_lms2xx_1 polyDots 0x7f 0x0 110 60 DefaultOn\nEndOfRangeDeviceList\nRelated Commands\ncustomReadingAdd Command on page 96\ncustomReadingAddAbsolute Command on page 94\ncustomReadingsClear Command on page 98\nrangeDeviceGetCumulative Command on page 255\nrangeDeviceGetCurrent Command on page 257\nrangeDeviceList Command on page 259\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 260",
    "Page 261": "say Command\nsay Command\nSpeak a text string through the robot audio output.\nSyntax\nsay <text_string>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nstring\nEnter the text string that you want the mobile robot to say. Quotes\nare optional.\nResponses\nThe command returns:\nSaying <text_string>\nDetails\nAllows you to have the mobile robot speak and then wait until it is finished before continuing on the route.\nThe say command is equivalent to the sayInstant task, which generates text-to-speech to the robot\u2019s\naudio output, if enabled.\nTo have the robot play a sound (.wav) file, use the play command. For details, see play Command on page\n199.\nExamples\nThe following example commands the robot to say \"hello\":\nsay \"hello\"\nSaying \"hello\"\nRelated Commands\nplay Command on page 199\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 261\n\nsay Command\nsay Command\nSpeak a text string through the robot audio output.\nSyntax\nsay\n <text_string>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\nstring\nEnter the text string that you want the mobile robot to say. Quotes\nare optional.\nResponses\nThe command returns:\nSaying <text_string>\nDetails\nAllows you to have the mobile robot speak and then wait until it is finished before continuing on the route.\nThe say command is equivalent to the sayInstant task, which generates text-to-speech to the robot\u2019s\naudio output, if enabled.\nTo have the robot play a sound (.wav) file, use the play command. For details, see play Command on page\n199.\nExamples\nThe following example commands the robot to say \"hello\":\nsay \"hello\"\nSaying \"hello\"\nRelated Commands\nplay Command on page 199\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 261",
    "Page 262": "scanAddGoal Command\nscanAddGoal Command\nAdds a goal while the robot is scanning.\nSyntax\nscanAddGoal <name> [description]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThe command can only be used while a scan is running.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that will represent the name for the goal.\ndescription\nEnter an optional description for the goal.\nResponses\nThe command returns the new goal information:\nmapAddGoal: Added goal with name <name> 'label'\nDetails\nThe scanAddGoal command adds a goal to the map while the robot is scanning. The goal is placed at the\nrobot's current pose and includes the goal name and description. It is similar to using the goal button on\nthe joystick, while scanning.\nExamples\nFor example:\nscanaddgoal goal_lc \"This is Bob's goal\"\nThe command returns:\nmapAddGoal: Added goal with name 'goal_lc' and description 'This is Bob's goal'\nRelated Commands\nscanAddInfo Command on page 264\nscanAddTag Command on page 267\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 262\n\nscanAddGoal Command\nscanAddGoal Command\nAdds a goal while the robot is scanning.\nSyntax\nscanAddGoal\n <name> [description]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThe command can only be used while a scan is running.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that will represent the name for the goal.\ndescription\nEnter an optional description for the goal.\nResponses\nThe command returns the new goal information:\nmapAddGoal: Added goal with name <name> 'label'\nDetails\nThe scanAddGoal command adds a goal to the map while the robot is scanning. The goal is placed at the\nrobot's current pose and includes the goal name and description. It is similar to using the goal button on\nthe joystick, while scanning.\nExamples\nFor example:\nscanaddgoal goal_lc \"This is Bob's goal\"\nThe command returns:\nmapAddGoal: Added goal with name 'goal_lc' and description 'This is Bob's goal'\nRelated Commands\nscanAddInfo Command on page 264\nscanAddTag Command on page 267\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 262",
    "Page 263": "scanAddGoal Command\nscanStart Command on page 269\nscanStop Command on page 271\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 263\n\nscanAddGoal Command\nscanStart Command on page 269\nscanStop Command on page 271\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 263",
    "Page 264": "scanAddInfo Command\nscanAddInfo Command\nAdds an information line while the robot is scanning.\nSyntax\nscanaddinfo <LogInfo:type> <Name=string> <Label=string> <Desc=string> [Size =integer]\n[IsData=integer] [Vis=mode] [FtSize=size] [Colorn=value] [Shape=shape]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nAll parameter labels must be included, for example: LogInfo:GoalType Name=Newgoal Label=\"New Goal\"\nDesc=\"This is a goal\", etc.\nThe command can only be used while a scan is running.\nAll of fields and type names in the map file are case sensitive; if the case is wrong they are ignored.\nUnknown fields are ignored.\nThe objects are informational-only (they do not contain any position), versus those added by the scanAd-\ndTag command, which are position-corrected. For details, see scanAddTag Command on page 267.\nARAM Settings\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 264\n\nscanAddInfo Command\nscanAddInfo Command\nAdds an information line while the robot is scanning.\nSyntax\nscanaddinfo\n <LogInfo:\ntype\n> <Name=\nstring\n> <Label=\nstring\n> <Desc=\nstring\n> [Size =\ninteger\n]\n[IsData=\ninteger\n] [Vis=\nmode\n] [FtSize=\nsize\n] [Color\nn\n=\nvalue\n] [Shape=\nshape\n]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nAll parameter labels must be included, for example: LogInfo:GoalType Name=Newgoal Label=\"New Goal\"\nDesc=\"This is a goal\", etc.\nThe command can only be used while a scan is running.\nAll of fields and type names in the map file are case sensitive; if the case is wrong they are ignored.\nUnknown fields are ignored.\nThe objects are informational-only (they do not contain any position), versus those added by the scanAd-\ndTag command, which are position-corrected. For details, see scanAddTag Command on page 267.\nARAM Settings\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 264",
    "Page 265": "scanAddInfo Command\nParameter\nDefinition\nLogInfo:type\nRequired. This defines the type of information you want to add. Valid type\nentries are:\nl GoalType\nl LocationType\nl SectorType\nGoalType markers are goals that can be driven to and appear in the map. Loca-\ntionType and SectorType markers also appear in the map, but cannot be\ndriven to. GoalType markers must have a unique name, LocationType and\nSectorType do not.\nName=string\nRequired. Enter a text string that represents the name of the type that is\nbeing defined.\nLabel=string\nRequired. Enter a text string that represents the label that is displayed for the\ntype in popup menus, etc.\nDesc=string\nRequired. Enter a text string that represents the description of the type that\nis displayed in tool tips, etc.\nSize=integer\nEnter an integer that represents the width/height (square) in mm of the\nmarker\u2019s display icon in the map.\nIsData=integer\nOptional. Enter a 1 or 0. The default value is 0.\nSet IsData to 1 to have the related markers carried over with an \u2018insert map\u2019.\nVis=mode\nThe default setting is DefaultOn. Valid modes are:\nl AlwaysOn\nl AlwaysOff\nl DefaultOn\nl DefaultOff\nCurrently supported for IsData=1 markers only, specifies marker visibility. Go\nto the Map:Data menu in MobileEyes or MobilePlanner to change their vis-\nibility in the map display.\nFtSize=size\nOptional. Enter an integer that represents the point size for the marker\u2019s label\nand description font. If the font is scaled, then express the point size in mm\nand it must be a multiple of 100. If the font is fixed, express the point size in\npixels.\nColorn=value\nOptional. For n, enter an integer from 0 - 2.\nFor value, enter a color value which defines the marker\u2019s map-display icon col-\nors. The color value is a six digit hexadecimal number (hence, the \u20180x\u2019 prefix).\nThe first two digits give the red component, followed by two digits for green\nand two digits for blue. For example:\nl 0xFF0000 is bright red\nl 0x888888 is medium gray\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 265\n\nscanAddInfo Command\nParameter\nDefinition\nLogInfo:\ntype\nRequired. This defines the type of information you want to add. Valid\n type\nentries are:\nl\n GoalType\nl\n LocationType\nl\n SectorType\nGoalType markers are goals that can be driven to and appear in the map. Loca-\ntionType and SectorType markers also appear in the map, but cannot be\ndriven to. GoalType markers must have a unique name, LocationType and\nSectorType do not.\nName=\nstring\nRequired. Enter a text string that represents the name of the type that is\nbeing defined.\nLabel=\nstring\nRequired. Enter a text string that represents the label that is displayed for the\ntype in popup menus, etc.\nDesc=\nstring\nRequired. Enter a text string that represents the description of the type that\nis displayed in tool tips, etc.\nSize=\ninteger\nEnter an integer that represents the width/height (square) in mm of the\nmarker\u2019s display icon in the map.\nIsData=\ninteger\nOptional. Enter a 1 or 0. The default value is 0.\nSet IsData to 1 to have the related markers carried over with an \u2018insert map\u2019.\nVis=\nmode\nThe default setting is DefaultOn. Valid modes are:\nl\n AlwaysOn\nl\n AlwaysOff\nl\n DefaultOn\nl\n DefaultOff\nCurrently supported for IsData=1 markers only, specifies marker visibility. Go\nto the Map:Data menu in MobileEyes or MobilePlanner to change their vis-\nibility in the map display.\nFtSize=\nsize\nOptional. Enter an integer that represents the point size for the marker\u2019s label\nand description font. If the font is scaled, then express the point size in mm\nand it must be a multiple of 100. If the font is fixed, express the point size in\npixels.\nColor\nn\n=\nvalue\nOptional. For\n n\n, enter an integer from 0 - 2.\nFor\n value\n, enter a color value which defines the marker\u2019s map-display icon col-\nors. The color value is a six digit hexadecimal number (hence, the \u20180x\u2019 prefix).\nThe first two digits give the red component, followed by two digits for green\nand two digits for blue. For example:\nl\n 0xFF0000 is bright red\nl\n 0x888888 is medium gray\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 265",
    "Page 266": "scanAddInfo Command\nParameter\nDefinition\nShape=shape\nOptional. Shape of the marker\u2019s map-display icon. The default setting is Plain.\nValid shapes are:\nl Plain: The default shape, typically a filled square\nl Cross: A cross shape\nl Triangle: A triangle shape\nl Hbars: A square shape containing horizontal bars or stripes\nl Vbars: A square shape containing vertical bars or stripes\nl T: A \"T\"\u00a0shape\nl U: A\u00a0\"U\" shape\nResponses\nThe command returns the new object information:\nmapAddInfo: Added info 'LogInfo:type Name=string Label=string Desc=string Colorn=value\nIsData=integer Vis=mode FtSize=size Shape=shape'\u00a0\nDetails\nAdds an information line (a description, typically defining a custom object) to the beginning of the map for\nlater reference.\nThis command only describes the object, it does not actually add any objects. That is done with the add\nScanTag command. For details, see scanAddTag Command on page 267.\nThis command can only be used after a scan is started with the scanStart command. For details on starting\na scan, see scanStart Command on page 269.\nExamples\nThe following example adds a description of a custom LocationType object named \"SensorReading\":\nscanAddInfo LogInfo:LocationType Name=SensorReading Label=\u201dSensor reading\u201d Desc=\u201dA\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sensor reading\u201d Color=0x5500EE IsData=1 Vis=DefaultOn Shape=Cross\u00a0\u00a0\nThe command returns:\nmapAddInfo: Added info 'LogInfo:LocationType Name=SensorReading Label= A sensor reading.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Desc=.Blobs of paint. Color=0x5500EE IsData=1 Vis=DefaultOn Shape=Cross'\u00a0\nRelated Commands\nscanAddGoal Command on page 262\nscanAddTag Command on page 267\nscanStart Command on page 269\nscanStop Command on page 271\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 266\n\nscanAddInfo Command\nParameter\nDefinition\nShape=\nshape\nOptional. Shape of the marker\u2019s map-display icon. The default setting is Plain.\nValid shapes are:\nl\n Plain: The default shape, typically a filled square\nl\n Cross: A cross shape\nl\n Triangle: A triangle shape\nl\n Hbars: A square shape containing horizontal bars or stripes\nl\n Vbars: A square shape containing vertical bars or stripes\nl\n T: A \"T\"\u00a0shape\nl\n U: A\u00a0\"U\" shape\nResponses\nThe command returns the new object information:\nmapAddInfo: Added info 'LogInfo:type Name=string Label=string Desc=string Colorn=value\nIsData=integer Vis=mode FtSize=size Shape=shape'\u00a0\nDetails\nAdds an information line (a description, typically defining a custom object) to the beginning of the map for\nlater reference.\nThis command only describes the object, it does not actually add any objects. That is done with the add\nScanTag command. For details, see scanAddTag Command on page 267.\nThis command can only be used after a scan is started with the scanStart command. For details on starting\na scan, see scanStart Command on page 269.\nExamples\nThe following example adds a description of a custom LocationType object named \"SensorReading\":\nscanAddInfo\n LogInfo:LocationType Name=SensorReading Label=\u201dSensor reading\u201d Desc=\u201dA\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sensor reading\u201d Color=0x5500EE IsData=1 Vis=DefaultOn Shape=Cross\u00a0\u00a0\nThe command returns:\nmapAddInfo: Added info 'LogInfo:LocationType Name=SensorReading Label= A sensor reading.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Desc=.Blobs of paint. Color=0x5500EE IsData=1 Vis=DefaultOn Shape=Cross'\u00a0\nRelated Commands\nscanAddGoal Command on page 262\nscanAddTag Command on page 267\nscanStart Command on page 269\nscanStop Command on page 271\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 266",
    "Page 267": "scanAddTag Command\nscanAddTag Command\nAdds a tag as a cairn (marker) while the robot is scanning.\nSyntax\nscanAddTag cairn:<name> [label] [icon_type] [description]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThe command can only be used while a scan is running.\nThe objects are position-corrected, versus those added by the scanAddInfo command, which contain no pos-\nition information. For details, see scanAddInfo Command on page 264.\nARAM Settings\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the object, from the Name= parameter, created\nwith the scanAddInfo command.\nlabel\nEnter an optional string that provides the icon label.\nicon_type\nEnter an optional string that provides the icon type.\ndescription\nEnter an optional string that provides a description of the marker.\nResponses\nThe command returns the new object information:\nmapAddTag 'cairn: <name>[WithHeading] \"label\" ICON \"\u00a0\nDetails\nThe scanAddTag command adds a marker in the map of type <name>, as described by a scanAddInfo of\nthe same name. Objects are added to the scan as \"cairns\" (markers). The objects are position-corrected,\nversus those added by the scanAddInfo command, which contain no position information.\nAdd \u201cWithHeading\u201d as suffix to the name in order to include a heading in the marker\u2019s properties. For\ndetails, see the Examples section.\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 267\n\nscanAddTag Command\nscanAddTag Command\nAdds a tag as a cairn (marker) while the robot is scanning.\nSyntax\nscanAddTag\n cairn:<name> [label] [icon_type] [description]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThe command can only be used while a scan is running.\nThe objects are position-corrected, versus those added by the scanAddInfo command, which contain no pos-\nition information. For details, see scanAddInfo Command on page 264.\nARAM Settings\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter the name of the object, from the Name= parameter, created\nwith the scanAddInfo command.\nlabel\nEnter an optional string that provides the icon label.\nicon_type\nEnter an optional string that provides the icon type.\ndescription\nEnter an optional string that provides a description of the marker.\nResponses\nThe command returns the new object information:\nmapAddTag 'cairn: <name>[WithHeading] \"label\" ICON \"\u00a0\nDetails\nThe scanAddTag command adds a marker in the map of type <name>, as described by a scanAddInfo of\nthe same name. Objects are added to the scan as \"cairns\" (markers). The objects are position-corrected,\nversus those added by the scanAddInfo command, which contain no position information.\nAdd \u201cWithHeading\u201d as suffix to the name in order to include a heading in the marker\u2019s properties. For\ndetails, see the Examples section.\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 267",
    "Page 268": "scanAddTag Command\nThis command only adds a marker for the object, it does not create or describe the object. That is done\nwith the add scanAddInfo command. For details, see scanAddInfo Command on page 264.\nThis command can only be used after a scan is started with the scanStart command. For details on starting\na scan, see scanStart Command on page 269.\nExamples\nFor example, suppose you used scanAddInfo to create an object description named \"SensorReading\", you\ncan use it with the scanAddTag command, as follows:\nTo add objects of that type with a heading:\nscanaddtag cairn: SensorReadingWithHeading \"id1\" ICON \"\"\nand with and icon description:\nscanaddtag cairn: RoomGoalWithHeading \"Room 32920\" ICON \"Bob's office\"\nTo add objects of that type without a heading:\nscanaddtag cairn: SensorReading \"id2\" ICON \"\"\nand with an icon description:\nscanaddtag cairn: RoomGoal \"Room 223203\" ICON \"Fred's office\"\nRelated Commands\nscanAddGoal Command on page 262\nscanAddInfo Command on page 264\nscanStart Command on page 269\nscanStop Command on page 271\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 268\n\nscanAddTag Command\nThis command only adds a marker for the object, it does not create or describe the object. That is done\nwith the add scanAddInfo command. For details, see scanAddInfo Command on page 264.\nThis command can only be used after a scan is started with the scanStart command. For details on starting\na scan, see scanStart Command on page 269.\nExamples\nFor example, suppose you used scanAddInfo to create an object description named \"SensorReading\", you\ncan use it with the scanAddTag command, as follows:\nTo add objects of that type with a heading:\nscanaddtag cairn: SensorReadingWithHeading \"id1\" ICON \"\"\nand with and icon description:\nscanaddtag cairn: RoomGoalWithHeading \"Room 32920\" ICON \"Bob's office\"\nTo add objects of that type without a heading:\nscanaddtag cairn: SensorReading \"id2\" ICON \"\"\nand with an icon description:\nscanaddtag cairn: RoomGoal \"Room 223203\" ICON \"Fred's office\"\nRelated Commands\nscanAddGoal Command on page 262\nscanAddInfo Command on page 264\nscanStart Command on page 269\nscanStop Command on page 271\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 268",
    "Page 269": "scanStart Command\nscanStart Command\nStarts scanning mode with given 2d file name.\nSyntax\nscanStart <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nOnly one scan can be running.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that will represent the name for the scan.\nResponses\nThe command returns information:\nStarting scan '<name>'\nScanning: Started scan '<name>'\nDetails\nThe scanStart command initiates scanning mode with the specified 2d file name. Only one scan can be act-\nive at a time. To stop the scan, use the scanStop command. For details, see scanStop Command on page\n271.\nExamples\nTo start a scan named \"testscan\", enter:\nscanstart testscan\nThe command returns:\nStarting scan 'testscan'\nScanning: Started scan 'testscan'\nRelated Commands\nscanAddGoal Command on page 262\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 269\n\nscanStart Command\nscanStart Command\nStarts scanning mode with given 2d file name.\nSyntax\nscanStart\n <name>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nOnly one scan can be running.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nname\nEnter a string that will represent the name for the scan.\nResponses\nThe command returns information:\nStarting scan '<name>'\nScanning: Started scan '<name>'\nDetails\nThe scanStart command initiates scanning mode with the specified 2d file name. Only one scan can be act-\nive at a time. To stop the scan, use the scanStop command. For details, see scanStop Command on page\n271.\nExamples\nTo start a scan named \"testscan\", enter:\nscanstart testscan\nThe command returns:\nStarting scan 'testscan'\nScanning: Started scan 'testscan'\nRelated Commands\nscanAddGoal Command on page 262\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 269",
    "Page 270": "scanStart Command\nscanAddInfo Command on page 264\nscanAddTag Command on page 267\nscanStop Command on page 271\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 270\n\nscanStart Command\nscanAddInfo Command on page 264\nscanAddTag Command on page 267\nscanStop Command on page 271\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 270",
    "Page 271": "scanStop Command\nscanStop Command\nStops the started scan.\nSyntax\nscanStop\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThe command can only be used while a scan is running.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns information about the new piece of information in the following format:\nStopped scan '<name>'\nScanning: Stopped scan '<name>'\nExamples\nTo stop the scan that's currently running, enter:\nscanstop\nThe command returns:\nStopping scan 'testscan'\nScanning: Stopped scan 'testscan'\nRelated Commands\nscanAddGoal Command on page 262\nscanAddInfo Command on page 264\nscanAddTag Command on page 267\nscanStart Command on page 269\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 271\n\nscanStop Command\nscanStop Command\nStops the started scan.\nSyntax\nscanStop\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThe command can only be used while a scan is running.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns information about the new piece of information in the following format:\nStopped scan '<name>'\nScanning: Stopped scan '<name>'\nExamples\nTo stop the scan that's currently running, enter:\nscanstop\nThe command returns:\nStopping scan 'testscan'\nScanning: Stopped scan 'testscan'\nRelated Commands\nscanAddGoal Command on page 262\nscanAddInfo Command on page 264\nscanAddTag Command on page 267\nscanStart Command on page 269\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 271",
    "Page 272": "setPayload Command\nsetPayload Command\nSets the payload name.\nSyntax\nsetPayload <payload>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\npayload\nEnter a name for the payload; quotes are optional.\nResponses\nThe command returns:\npayload <payload>\nDetails\nThe setPayload command sets the name of the robot payload. The name can be more than one word;\nquotes are optional when entering the string. To view the payload name, use the getPayload command.\nFor details, see getPayload\u00a0Command on page 132.\nIf the robot has multiple slots (containers) with different payloads in each slot, use the payloadSet com-\nmand to set the payload name for each slot. For details, see payloadSet Command (shortcut: ps) on page\n194.\nExamples\nThe following example sets the payload name as \"This has widgets\":\nsetpayload This has widgets\nThe command returns:\npayload This has widgets\nRelated Commands\ngetPayload\u00a0Command on page 132\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 272\n\nsetPayload Command\nsetPayload Command\nSets the payload name.\nSyntax\nsetPayload\n <payload>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\npayload\nEnter a name for the payload; quotes are optional.\nResponses\nThe command returns:\npayload <payload>\nDetails\nThe setPayload command sets the name of the robot payload. The name can be more than one word;\nquotes are optional when entering the string. To view the payload name, use the getPayload command.\nFor details, see getPayload\u00a0Command on page 132.\nIf the robot has multiple slots (containers) with different payloads in each slot, use the payloadSet com-\nmand to set the payload name for each slot. For details, see payloadSet Command (shortcut: ps) on page\n194.\nExamples\nThe following example sets the payload name as \"This has widgets\":\nsetpayload This has widgets\nThe command returns:\npayload This has widgets\nRelated Commands\ngetPayload\u00a0Command on page 132\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 272",
    "Page 273": "setPayload Command\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 273\n\nsetPayload Command\npayloadQuery Command (shortcut: pq) on page 187\npayloadQuery Command (shortcut: pq) on page 187\npayloadRemove Command (shortcut: pr) on page 192\npayloadSet Command (shortcut: ps) on page 194\npayloadSlotCount Command (shortcut: psc) on page 196\npayloadSlotCountLocal Command (shortcut: pscl) on page 198\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 273",
    "Page 274": "setPrecedence Command\nsetPrecedence Command\nSets precedence for this robot in a multi-robot encounter. Lower values take higher precedence.\nSyntax\nsetPrecedence <integer>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\ninteger\nEnter an integer value that determines the precedence of the robot\nin the event of a multi-robot encounter. The range is -100 to 100.\nResponses\nThe command returns:\nsetPrecedence: <integer>\nDetails\nThe setPrecedence command is used to set the precedence information for the robot. The precedence\nvalue is used in a multi-robot encounter. The robot that has the lowest value will get highest precedence,\nthe robot with the next lowest value will get the next highest precedence, and so on. The precedence\nvalue is viewed using the getPrecedence command. For details, see getPrecedence Command on page\n133.\nExamples\nThe following example sets the robot precedence to 20:\nsetprecedence 20\nsetPrecedence: 20\nRelated Commands\ngetPrecedence Command on page 133\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 274\n\nsetPrecedence Command\nsetPrecedence Command\nSets precedence for this robot in a multi-robot encounter. Lower values take higher precedence.\nSyntax\nsetPrecedence\n <integer>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThe command parameters are described in the following table.\nParameter\nDefinition\ninteger\nEnter an integer value that determines the precedence of the robot\nin the event of a multi-robot encounter. The range is -100 to 100.\nResponses\nThe command returns:\nsetPrecedence: <integer>\nDetails\nThe setPrecedence command is used to set the precedence information for the robot. The precedence\nvalue is used in a multi-robot encounter. The robot that has the lowest value will get highest precedence,\nthe robot with the next lowest value will get the next highest precedence, and so on. The precedence\nvalue is viewed using the getPrecedence command. For details, see getPrecedence Command on page\n133.\nExamples\nThe following example sets the robot precedence to 20:\nsetprecedence 20\nsetPrecedence: 20\nRelated Commands\ngetPrecedence Command on page 133\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 274",
    "Page 275": "shutdown Command\nshutdown Command\nShuts down the robot.\nSyntax\nshutDownServer\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThere is no response returned from this command.\nDetails\nThe shutdown command tells the robot to initiate its power-down sequence. The command works only\nwith Adept mobile robots that have power-down hardware.\nExamples\nTo shut down the robot, enter:\nshutdown\nThere is no response returned from this command.\nRelated Commands\nquit Command on page 254\nshutDownServer Command\nstop Command on page 278\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 275\n\nshutdown Command\nshutdown Command\nShuts down the robot.\nSyntax\nshutDownServer\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThere is no response returned from this command.\nDetails\nThe shutdown command tells the robot to initiate its power-down sequence. The command works only\nwith Adept mobile robots that have power-down hardware.\nExamples\nTo shut down the robot, enter:\nshutdown\nThere is no response returned from this command.\nRelated Commands\nquit Command on page 254\nshutDownServer Command\nstop Command on page 278\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 275",
    "Page 276": "status Command\nstatus Command\nReturns the operational state of the robot.\nSyntax\nstatus\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nStatus: <status>\nBatteryVoltage: <volts_dc>\nLocation: <X> <Y> <Theta>\nLocalizationScore: <score>\nTemperature: <degrees>\nDetails\nThe status command returns the operational state of the robot, such as docking or going to a goal, battery\ncharge, position and localization score. To get a one-line status of the robot, use the oneLineStatus com-\nmand. For details, see oneLineStatus Command on page 169.\nExamples\nTo get the current status of the robot, enter the following:\nstatus\nThe command returns:\nStatus: DockingState: Docking ForcedState: Unforced ChargeState: Not\nBatteryVoltage: 26.1\nLocation: -969 301 1\nLocalizationScore: 0.988304\nTemperature: -128\nRelated Commands\ngetDateTime Command on page 123\ngetGoals Command on page 124\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 276\n\nstatus Command\nstatus Command\nReturns the operational state of the robot.\nSyntax\nstatus\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nStatus: <status>\nBatteryVoltage: <volts_dc>\nLocation: <X> <Y> <Theta>\nLocalizationScore: <score>\nTemperature: <degrees>\nDetails\nThe status command returns the operational state of the robot, such as docking or going to a goal, battery\ncharge, position and localization score. To get a one-line status of the robot, use the oneLineStatus com-\nmand. For details, see oneLineStatus Command on page 169.\nExamples\nTo get the current status of the robot, enter the following:\nstatus\nThe command returns:\nStatus: DockingState: Docking ForcedState: Unforced ChargeState: Not\nBatteryVoltage: 26.1\nLocation: -969 301 1\nLocalizationScore: 0.988304\nTemperature: -128\nRelated Commands\ngetDateTime Command on page 123\ngetGoals Command on page 124\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 276",
    "Page 277": "status Command\ngetInfo Command on page 126\ngetInfoList Command on page 128\ngetPayload\u00a0Command on page 132\ngetRoutes Command on page 134\noneLineStatus Command on page 169\nqueryDockStatus Command on page 203\nqueryMotors Command on page 207\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 277\n\nstatus Command\ngetInfo Command on page 126\ngetInfoList Command on page 128\ngetPayload\u00a0Command on page 132\ngetRoutes Command on page 134\noneLineStatus Command on page 169\nqueryDockStatus Command on page 203\nqueryMotors Command on page 207\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 277",
    "Page 278": "stop Command\nstop Command\nStops the current robot motion.\nSyntax\nstop\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\n<status_message>\nStopping\nStopped\nExamples\nTo stop the robot while it is moving to goal \"g_25\", enter the following:\nstop\nThe command returns:\nInterrupted: Going to g_25\nStopping\nStopped\nRelated Commands\nquit Command on page 254\nshutdown Command on page 275\nshutDownServer Command\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 278\n\nstop Command\nstop Command\nStops the current robot motion.\nSyntax\nstop\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\n<status_message>\nStopping\nStopped\nExamples\nTo stop the robot while it is moving to goal \"g_25\", enter the following:\nstop\nThe command returns:\nInterrupted: Going to g_25\nStopping\nStopped\nRelated Commands\nquit Command on page 254\nshutdown Command on page 275\nshutDownServer Command\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 278",
    "Page 279": "trackSectors Command\ntrackSectors Command\nReturns all sectors at the robot's current position.\nSyntax\ntrackSectors\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nARAM Settings\nThis command requires the addition of the \"-trackSector <name>\" argument to the Custom Arguments\nsection of the Configuration > Debug tab in the MobilePlanner software. For details, see the Adept Motiv-\nity Software User's Guide.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nTrackSectors: <type> [sector_name]\n...\nEnd of TrackSectors\nDetails\nThe trackSectors command lists all sectors at the robot's current position. If the robot is not on a sector, no\ninformation is returned. If a sector has no name, then only its type will be displayed.\nBefore using this command, you must first create sector types for the map file, which can be added and\nmanipulated in MobilePlanner and visible in MobileEyes. To do this, you can download the map file, open it\nwith a text editor (like Notepad) and add your own SectorType to the map file:\nMapInfo: SectorType Name=SomeSector \"Label=SomeLabel\" \"Desc=Some description\" Shape=Plain\nColor0=0x0088ff\nFor example, you might enter something like:\nMapInfo: SectorType Name=VerySlowSector \"Label=VerySlow\" \"Desc=Area in which the robot\ndrives very slowly\" Shape=Plain Color0=0xffffb0\u00a0\u00a0\u00a0\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 279\n\ntrackSectors Command\ntrackSectors Command\nReturns all sectors at the robot's current position.\nSyntax\ntrackSectors\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nARAM Settings\nThis command requires the addition of the \"-trackSector <name>\" argument to the Custom Arguments\nsection of the\n Configuration > Debug\n tab in the MobilePlanner software. For details, see the\n Adept Motiv-\nity Software User's Guide.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nTrackSectors: <type> [sector_name]\n...\nEnd of TrackSectors\nDetails\nThe trackSectors command lists all sectors at the robot's current position. If the robot is not on a sector, no\ninformation is returned. If a sector has no name, then only its type will be displayed.\nBefore using this command, you must first create sector types for the map file, which can be added and\nmanipulated in MobilePlanner and visible in MobileEyes. To do this, you can download the map file, open it\nwith a text editor (like Notepad) and add your own SectorType to the map file:\nMapInfo: SectorType Name=SomeSector \"Label=SomeLabel\" \"Desc=Some description\" Shape=Plain\nColor0=0x0088ff\nFor example, you might enter something like:\nMapInfo: SectorType Name=VerySlowSector \"Label=VerySlow\" \"Desc=Area in which the robot\ndrives very slowly\" Shape=Plain Color0=0xffffb0\u00a0\u00a0\u00a0\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 279",
    "Page 280": "trackSectors Command\nThe entry must be on one line\u2014it is easiest is just to copy/paste an existing sector and then change its\nparameters. There can be as many sector types as needed for your application. If you've given ARAM track\nsector arguments, it will make the tracking commands available over ARCL.\nYou can edit the sector properties from MobilePlanner by right-clicking on it and selecting Edit. The \"Edit\nAdvanced Area dialog opens, as shown in the following figure. You can add a name, description, select the\ntype, and adjust the size and position.\nSector Properties\nThere are other \"sector\" commands, such as: 'trackSectorsAtGoal <goal>', which provides the sectors at a\ngoal; 'trackSectorsAtPoint <X> <Y>', which provides the sectors at a point; and 'trackSectorsPath\n<optional:dist>', which provides the sectors for that distance along the path (or the whole path if no dis-\ntance is given). Note that all of these commands have identical output, which is shown in the Responses\nsection.\nFor details on the related commands, see the Related Commands section.\nExamples\nThe following example lists the sectors at the robot's current position:\ntracksectors\nTrackSectors: SlowSector\nEnd of TrackSectors\nThe following example shows the sector name after the sector in the previous example is named\n\"SlowSectorTest\" in MobilePlanner:\ntracksectors\nTrackSectors: SlowSector SlowSectorTest\nEnd of TrackSectors\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 280\n\ntrackSectors Command\nThe entry must be on one line\u2014it is easiest is just to copy/paste an existing sector and then change its\nparameters. There can be as many sector types as needed for your application. If you've given ARAM track\nsector arguments, it will make the tracking commands available over ARCL.\nYou can edit the sector properties from MobilePlanner by right-clicking on it and selecting Edit. The \"Edit\nAdvanced Area dialog opens, as shown in the following figure. You can add a name, description, select the\ntype, and adjust the size and position.\nSector Properties\nThere are other \"sector\" commands, such as: 'trackSectorsAtGoal <goal>', which provides the sectors at a\ngoal; 'trackSectorsAtPoint <X> <Y>', which provides the sectors at a point; and 'trackSectorsPath\n<optional:dist>', which provides the sectors for that distance along the path (or the whole path if no dis-\ntance is given). Note that all of these commands have identical output, which is shown in the Responses\nsection.\nFor details on the related commands, see the Related Commands section.\nExamples\nThe following example lists the sectors at the robot's current position:\ntracksectors\nTrackSectors: SlowSector\nEnd of TrackSectors\nThe following example shows the sector name after the sector in the previous example is named\n\"SlowSectorTest\" in MobilePlanner:\ntracksectors\nTrackSectors: SlowSector SlowSectorTest\nEnd of TrackSectors\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 280",
    "Page 281": "trackSectors Command\nRelated Commands\ntrackSectors Command on page 279\ntrackSectorsAtGoal Command on page 282\ntrackSectorsAtPoint Command on page 285\ntrackSectorsPath Command on page 288\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 281\n\ntrackSectors Command\nRelated Commands\ntrackSectors Command on page 279\ntrackSectorsAtGoal Command on page 282\ntrackSectorsAtPoint Command on page 285\ntrackSectorsPath Command on page 288\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 281",
    "Page 282": "trackSectorsAtGoal Command\ntrackSectorsAtGoal Command\nList all sectors pertaining to a goal.\nSyntax\ntrackSectorsAtGoal <goal>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nARAM Settings\nThis command requires the addition of the \"-trackSector <name>\" argument to the Custom Arguments\nsection of the Configuration > Debug tab in the MobilePlanner software. For details, see the Adept Motiv-\nity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ngoal\nEnter a string that represents the name for the goal.\nResponses\nThe command returns:\nTrackSectors: <type> [sector_name]\n...\nEnd of TrackSectors\nDetails\nThe trackSectors command lists all sectors at the named goal. If the named goal is not on a sector, no\ninformation is returned. If a sector has no name, then only its type will be displayed.\nBefore using this command, you must first create sector types for the map file, which can be added and\nmanipulated in MobilePlanner and visible in MobileEyes. To do this, you can download the map file, open it\nwith a text editor (like Notepad) and add your own SectorType to the map file:\nMapInfo: SectorType Name=SomeSector \"Label=SomeLabel\" \"Desc=Some description\" Shape-\ne=Plain Color0=0x0088ff\nFor example, you might enter something like:\nMapInfo: SectorType Name=VerySlowSector \"Label=VerySlow\" \"Desc=Area in which the robot\ndrives very slowly\" Shape=Plain Color0=0xffffb0\u00a0\u00a0\u00a0\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 282\n\ntrackSectorsAtGoal Command\ntrackSectorsAtGoal Command\nList all sectors pertaining to a goal.\nSyntax\ntrackSectorsAtGoal\n <goal>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nARAM Settings\nThis command requires the addition of the \"-trackSector <name>\" argument to the Custom Arguments\nsection of the\n Configuration > Debug\n tab in the MobilePlanner software. For details, see the\n Adept Motiv-\nity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ngoal\nEnter a string that represents the name for the goal.\nResponses\nThe command returns:\nTrackSectors: <type> [sector_name]\n...\nEnd of TrackSectors\nDetails\nThe trackSectors command lists all sectors at the named goal. If the named goal is not on a sector, no\ninformation is returned. If a sector has no name, then only its type will be displayed.\nBefore using this command, you must first create sector types for the map file, which can be added and\nmanipulated in MobilePlanner and visible in MobileEyes. To do this, you can download the map file, open it\nwith a text editor (like Notepad) and add your own SectorType to the map file:\nMapInfo: SectorType Name=SomeSector \"Label=SomeLabel\" \"Desc=Some description\" Shape-\ne=Plain Color0=0x0088ff\nFor example, you might enter something like:\nMapInfo: SectorType Name=VerySlowSector \"Label=VerySlow\" \"Desc=Area in which the robot\ndrives very slowly\" Shape=Plain Color0=0xffffb0\u00a0\u00a0\u00a0\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 282",
    "Page 283": "trackSectorsAtGoal Command\nThe entry must be on one line\u2014it is easiest is just to copy/paste an existing sector and then change its para-\nmeters. There can be as many sector types as needed for your application. If you've given ARAM track sec-\ntor arguments, it will make the tracking commands available over ARCL.\nYou can edit the sector properties from MobilePlanner by right-clicking on it and selecting Edit. The \"Edit\nAdvanced Area dialog opens, as shown in the following figure. You can add a name, description, select the\ntype, and adjust the size and position.\nSector Properties\nThere are other \"sector\" commands, such as: 'trackSectors', which provides the sectors at the robot's cur-\nrent position; 'trackSectorsAtPoint <X> <Y>', which provides the sectors at a point; and 'trackSectorsPath\n<optional:dist>', which provides the sectors for that distance along the path (or the whole path if no dis-\ntance is given). Note that all of these commands have identical output, which is shown in the Responses\nsection.\nFor details on the related commands, see the Related Commands section.\nExamples\nThe following example lists the sectors at the named goal:\ntracksectorsatgoal g_10\nTrackSectors: SlowSector\nEnd of TrackSectors\nThe following example shows the sector name after the sector in the previous example is named \"SlowSect-\norTest\" in MobilePlanner:\ntracksectorsatgoal g_10\nTrackSectors: SlowSector SlowSectorTest\nEnd of TrackSectors\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 283\n\ntrackSectorsAtGoal Command\nThe entry must be on one line\u2014it is easiest is just to copy/paste an existing sector and then change its para-\nmeters. There can be as many sector types as needed for your application. If you've given ARAM track sec-\ntor arguments, it will make the tracking commands available over ARCL.\nYou can edit the sector properties from MobilePlanner by right-clicking on it and selecting Edit. The \"Edit\nAdvanced Area dialog opens, as shown in the following figure. You can add a name, description, select the\ntype, and adjust the size and position.\nSector Properties\nThere are other \"sector\" commands, such as: 'trackSectors', which provides the sectors at the robot's cur-\nrent position; 'trackSectorsAtPoint <X> <Y>', which provides the sectors at a point; and 'trackSectorsPath\n<optional:dist>', which provides the sectors for that distance along the path (or the whole path if no dis-\ntance is given). Note that all of these commands have identical output, which is shown in the Responses\nsection.\nFor details on the related commands, see the Related Commands section.\nExamples\nThe following example lists the sectors at the named goal:\ntracksectorsatgoal g_10\nTrackSectors: SlowSector\nEnd of TrackSectors\nThe following example shows the sector name after the sector in the previous example is named \"SlowSect-\norTest\" in MobilePlanner:\ntracksectorsatgoal g_10\nTrackSectors: SlowSector SlowSectorTest\nEnd of TrackSectors\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 283",
    "Page 284": "trackSectorsAtGoal Command\nRelated Commands\ntrackSectors Command on page 279\ntrackSectorsAtPoint Command on page 285\ntrackSectorsPath Command on page 288\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 284\n\ntrackSectorsAtGoal Command\nRelated Commands\ntrackSectors Command on page 279\ntrackSectorsAtPoint Command on page 285\ntrackSectorsPath Command on page 288\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 284",
    "Page 285": "trackSectorsAtPoint Command\ntrackSectorsAtPoint Command\nList all sectors pertaining to a point on the map.\nSyntax\ntrackSectorsAtPoint <X> <Y>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nARAM Settings\nThis command requires the addition of the \"-trackSector <name>\" argument to the Custom Arguments\nsection of the Configuration > Debug tab in the MobilePlanner software. For details, see the Adept Motiv-\nity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nX\nEnter the X coordinate for the point.\nY\nEnter the Y coordinate for the point.\nResponses\nThe command returns:\nTrackSectors: <type> [sector_name]\n...\nEnd of TrackSectors\nDetails\nThe trackSectorsAtPoint command lists all sectors at the specified X-Y coordinates on the map. If the spe-\ncified point is not on a sector, no information is returned. If a sector has no name, then only its type will be\ndisplayed.\nBefore using this command, you must first create sector types for the map file, which can be added and\nmanipulated in MobilePlanner and visible in MobileEyes. To do this, you can download the map file, open it\nwith a text editor (like Notepad) and add your own SectorType to the map file:\nMapInfo: SectorType Name=SomeSector \"Label=SomeLabel\" \"Desc=Some description\" Shape=Plain\nColor0=0x0088ff\nFor example, you might enter something like:\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 285\n\ntrackSectorsAtPoint Command\ntrackSectorsAtPoint Command\nList all sectors pertaining to a point on the map.\nSyntax\ntrackSectorsAtPoint\n <X> <Y>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nARAM Settings\nThis command requires the addition of the \"-trackSector <name>\" argument to the Custom Arguments\nsection of the\n Configuration > Debug\n tab in the MobilePlanner software. For details, see the\n Adept Motiv-\nity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\nX\nEnter the X coordinate for the point.\nY\nEnter the Y coordinate for the point.\nResponses\nThe command returns:\nTrackSectors: <type> [sector_name]\n...\nEnd of TrackSectors\nDetails\nThe trackSectorsAtPoint command lists all sectors at the specified X-Y coordinates on the map. If the spe-\ncified point is not on a sector, no information is returned. If a sector has no name, then only its type will be\ndisplayed.\nBefore using this command, you must first create sector types for the map file, which can be added and\nmanipulated in MobilePlanner and visible in MobileEyes. To do this, you can download the map file, open it\nwith a text editor (like Notepad) and add your own SectorType to the map file:\nMapInfo: SectorType Name=SomeSector \"Label=SomeLabel\" \"Desc=Some description\" Shape=Plain\nColor0=0x0088ff\nFor example, you might enter something like:\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 285",
    "Page 286": "trackSectorsAtPoint Command\nMapInfo: SectorType Name=VerySlowSector \"Label=VerySlow\" \"Desc=Area in which the robot\ndrives very slowly\" Shape=Plain Color0=0xffffb0\u00a0\u00a0\u00a0\nThe entry must be on one line\u2014it is easiest is just to copy/paste an existing sector and then change its\nparameters. There can be as many sector types as needed for your application. If you've given ARAM track\nsector arguments, it will make the tracking commands available over ARCL.\nYou can edit the sector properties from MobilePlanner by right-clicking on it and selecting Edit. The \"Edit\nAdvanced Area dialog opens, as shown in the following figure. You can add a name, description, select the\ntype, and adjust the size and position.\nSector Properties\nThere are other \"sector\" commands, such as: 'trackSectors', which provides the sectors at the robot's cur-\nrent position; 'trackSectorsAtGoal <goal>', which provides the sectors at a point; and 'trackSectorsPath\n<optional:dist>', which provides the sectors for that distance along the path (or the whole path if no dis-\ntance is given). Note that all of these commands have identical output, which is shown in the Responses\nsection.\nFor details on the related commands, see the Related Commands section.\nExamples\nThe following example lists the sectors at the specified coordinates:\ntracksectorsatpoint 16615 -6497\nTrackSectors: SlowSector\nEnd of TrackSectors\nThe following example shows the sector name after the sector in the previous example is named\n\"SlowSectorTest\" in MobilePlanner:\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 286\n\ntrackSectorsAtPoint Command\nMapInfo: SectorType Name=VerySlowSector \"Label=VerySlow\" \"Desc=Area in which the robot\ndrives very slowly\" Shape=Plain Color0=0xffffb0\u00a0\u00a0\u00a0\nThe entry must be on one line\u2014it is easiest is just to copy/paste an existing sector and then change its\nparameters. There can be as many sector types as needed for your application. If you've given ARAM track\nsector arguments, it will make the tracking commands available over ARCL.\nYou can edit the sector properties from MobilePlanner by right-clicking on it and selecting Edit. The \"Edit\nAdvanced Area dialog opens, as shown in the following figure. You can add a name, description, select the\ntype, and adjust the size and position.\nSector Properties\nThere are other \"sector\" commands, such as: 'trackSectors', which provides the sectors at the robot's cur-\nrent position; 'trackSectorsAtGoal <goal>', which provides the sectors at a point; and 'trackSectorsPath\n<optional:dist>', which provides the sectors for that distance along the path (or the whole path if no dis-\ntance is given). Note that all of these commands have identical output, which is shown in the Responses\nsection.\nFor details on the related commands, see the Related Commands section.\nExamples\nThe following example lists the sectors at the specified coordinates:\ntracksectorsatpoint 16615 -6497\nTrackSectors: SlowSector\nEnd of TrackSectors\nThe following example shows the sector name after the sector in the previous example is named\n\"SlowSectorTest\" in MobilePlanner:\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 286",
    "Page 287": "trackSectorsAtPoint Command\ntracksectorsatpoint 16615 -6497\nTrackSectors: SlowSector SlowSectorTest\nEnd of TrackSectors\nRelated Commands\ntrackSectors Command on page 279\ntrackSectorsAtGoal Command on page 282\ntrackSectorsPath Command on page 288\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 287\n\ntrackSectorsAtPoint Command\ntracksectorsatpoint 16615 -6497\nTrackSectors: SlowSector SlowSectorTest\nEnd of TrackSectors\nRelated Commands\ntrackSectors Command on page 279\ntrackSectorsAtGoal Command on page 282\ntrackSectorsPath Command on page 288\nAdept ARCL Reference Guide, Updated: 9:26:56 AM\nPage 287",
    "Page 288": "trackSectorsPath Command\ntrackSectorsPath Command\nLists the tracked sectors the path (or part of it) is in. An optional distance can be specified.\nSyntax\ntrackSectorsPath [distance]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThe robot must be traveling on a path when this command is issued; otherwise, no results will be\nreturned.\nARAM Settings\nThis command requires the addition of the \"-trackSector <name>\" argument to the Custom Arguments\nsection of the Configuration > Debug tab in the MobilePlanner software. For details, see the Adept Motiv-\nity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ndistance\nEnter an optional distance (in mm) from the front of the robot. Sect-\nors will be listed that are on the path between the robot and that\nend point.\nResponses\nThe command returns:\nTrackSectors: <type> [sector_name]\n...\nEnd of TrackSectors\nDetails\nThe trackSectorsPath command lists all sectors in the path of the robot and, optionally, over a specified dis-\ntance on its path. If the path (or part of it) is not on a sector, no information is returned. If a sector has no\nname, then only its type will be displayed.\nBefore using this command, you must first create sector types for the map file, which can be added and\nmanipulated in MobilePlanner and visible in MobileEyes. To do this, you can download the map file, open it\nwith a text editor (like Notepad) and add your own SectorType to the map file:\nMapInfo: SectorType Name=SomeSector \"Label=SomeLabel\" \"Desc=Some description\" Shape-\ne=Plain Color0=0x0088ff\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 288\n\ntrackSectorsPath Command\ntrackSectorsPath Command\nLists the tracked sectors the path (or part of it) is in. An optional distance can be specified.\nSyntax\ntrackSectorsPath [distance]\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nThe robot must be traveling on a path when this command is issued; otherwise, no results will be\nreturned.\nARAM Settings\nThis command requires the addition of the \"-trackSector <name>\" argument to the Custom Arguments\nsection of the\n Configuration > Debug\n tab in the MobilePlanner software. For details, see the\n Adept Motiv-\nity Software User's Guide.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ndistance\nEnter an optional distance (in mm) from the front of the robot. Sect-\nors will be listed that are on the path between the robot and that\nend point.\nResponses\nThe command returns:\nTrackSectors: <type> [sector_name]\n...\nEnd of TrackSectors\nDetails\nThe trackSectorsPath command lists all sectors in the path of the robot and, optionally, over a specified dis-\ntance on its path. If the path (or part of it) is not on a sector, no information is returned. If a sector has no\nname, then only its type will be displayed.\nBefore using this command, you must first create sector types for the map file, which can be added and\nmanipulated in MobilePlanner and visible in MobileEyes. To do this, you can download the map file, open it\nwith a text editor (like Notepad) and add your own SectorType to the map file:\nMapInfo: SectorType Name=SomeSector \"Label=SomeLabel\" \"Desc=Some description\" Shape-\ne=Plain Color0=0x0088ff\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 288",
    "Page 289": "trackSectorsPath Command\nFor example, you might enter something like:\nMapInfo: SectorType Name=VerySlowSector \"Label=VerySlow\" \"Desc=Area in which the robot\ndrives very slowly\" Shape=Plain Color0=0xffffb0\u00a0\u00a0\u00a0\nThe entry must be on one line\u2014it is easiest is just to copy/paste an existing sector and then change its para-\nmeters. There can be as many sector types as needed for your application. If you've given ARAM track sec-\ntor arguments, it will make the tracking commands available over ARCL.\nYou can edit the sector properties from MobilePlanner by right-clicking on it and selecting Edit. The \"Edit\nAdvanced Area dialog opens, as shown in the following figure. You can add a name, description, select the\ntype, and adjust the size and position.\nSector Properties\nThere are other \"sector\" commands, such as: 'trackSectors', which provides the sectors at the robot's cur-\nrent position; 'trackSectorsAtGoal <goal>', which provides the sectors at a point; and 'trackSectorsAtPoint\n<X> <Y>', which provides the sectors for that point on the map. Note that all of these commands have\nidentical output, which is shown in the Responses section.\nFor details on the related commands, see the Related Commands section.\nExamples\nThe following example sends the robot to goal \"g_10\" and then lists the sectors that are in the path to that\ngoal.\ngoto g_10\nGoing to g_10\ntracksectorspath\nAdept ARCL Reference Guide, Updated: 9:26:57 AM\nPage 289\n\ntrackSectorsPath Command\nFor example, you might enter something like:\nMapInfo: SectorType Name=VerySlowSector \"Label=VerySlow\" \"Desc=Area in which the robot\ndrives very slowly\" Shape=Plain Color0=0xffffb0\u00a0\u00a0\u00a0\nThe entry must be on one line\u2014it is easiest is just to copy/paste an existing sector and then change its para-\nmeters. There can be as many sector types as needed for your application. If you've given ARAM track sec-\ntor arguments, it will make the tracking commands available over ARCL.\nYou can edit the sector properties from MobilePlanner by right-clicking on it and selecting Edit. The \"Edit\nAdvanced Area dialog opens, as shown in the following figure. You can add a name, description, select the\ntype, and adjust the size and position.\nSector Properties\nThere are other \"sector\" commands, such as: 'trackSectors', which provides the sectors at the robot's cur-\nrent position; 'trackSectorsAtGoal <goal>', which provides the sectors at a point; and 'trackSectorsAtPoint\n<X> <Y>', which provides the sectors for that point on the map. Note that all of these commands have\nidentical output, which is shown in the Responses section.\nFor details on the related commands, see the Related Commands section.\nExamples\nThe following example sends the robot to goal \"g_10\" and then lists the sectors that are in the path to that\ngoal.\ngoto g_10\nGoing to g_10\ntracksectorspath\nAdept ARCL Reference Guide, Updated: 9:26:57 AM\nPage 289",
    "Page 290": "trackSectorsPath Command\nSectors over path\nTrackSectors: SlowSector SlowSectorTest\nEnd of TrackSectors\nArrived at g_10\nThe following example sends the robot to goal \"g_10\" and then lists the sectors that are within 500 mm in\nfront of the robot on the path to that goal.\ngoto g_10\nGoing to g_10\ntracksectorspath 500\nSectors over path for length 500\nTrackSectors: SlowSector SlowSectorTest\nEnd of TrackSectors\nArrived at g_10\nRelated Commands\ntrackSectors Command on page 279\ntrackSectorsAtGoal Command on page 282\ntrackSectorsAtPoint Command on page 285\ntrackSectorsPath Command on page 288\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 290\n\ntrackSectorsPath Command\nSectors over path\nTrackSectors: SlowSector SlowSectorTest\nEnd of TrackSectors\nArrived at g_10\nThe following example sends the robot to goal \"g_10\" and then lists the sectors that are within 500 mm in\nfront of the robot on the path to that goal.\ngoto g_10\nGoing to g_10\ntracksectorspath 500\nSectors over path for length 500\nTrackSectors: SlowSector SlowSectorTest\nEnd of TrackSectors\nArrived at g_10\nRelated Commands\ntrackSectors Command on page 279\ntrackSectorsAtGoal Command on page 282\ntrackSectorsAtPoint Command on page 285\ntrackSectorsPath Command on page 288\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 290",
    "Page 291": "undock Command\nundock Command\nUndocks the robot.\nSyntax\nundock\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nDockingState: <dock_state> ForcedState: <forced_state> ChargeState: <charge_state>\nStopping\nStopped\nDetails\nThe undock command tells the robot to move off of the dock/recharge station. It positions the robot in front\nof and facing the dock/recharge station.\nWhen the robot is fully-charged, it will automatically undock from the dock/recharge station.\nYou can also undock the robot with one of the \"goto...\" commands. For details on these commands, use\nthe links in the Related Commands section.\nExamples\nThe following example undocks the robot:\nundock\nThe command returns:\nDockingState: Undocked ForcedState: Unforced ChargeState: Unknowable\nStopping\nStopped\nRelated Commands\ngoto Command on page 135\ngotoPoint Command on page 137\ngotoRouteGoal Command on page 139\nAdept ARCL Reference Guide, Updated: 9:26:57 AM\nPage 291\n\nundock Command\nundock Command\nUndocks the robot.\nSyntax\nundock\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nDockingState: <dock_state> ForcedState: <forced_state> ChargeState: <charge_state>\nStopping\nStopped\nDetails\nThe undock command tells the robot to move off of the dock/recharge station. It positions the robot in front\nof and facing the dock/recharge station.\nWhen the robot is fully-charged, it will automatically undock from the dock/recharge station.\nYou can also undock the robot with one of the \"goto...\" commands. For details on these commands, use\nthe links in the Related Commands section.\nExamples\nThe following example undocks the robot:\nundock\nThe command returns:\nDockingState: Undocked ForcedState: Unforced ChargeState: Unknowable\nStopping\nStopped\nRelated Commands\ngoto Command on page 135\ngotoPoint Command on page 137\ngotoRouteGoal Command on page 139\nAdept ARCL Reference Guide, Updated: 9:26:57 AM\nPage 291",
    "Page 292": "undock Command\ndock Command on page 104\nundock Command on page 291\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 292\n\nundock Command\ndock Command on page 104\nundock Command on page 291\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 292",
    "Page 293": "updateInfo Command\nupdateInfo Command\nUpdates the value for and existing piece of information.\nSyntax\nupdateInfo <infoName> <infoValue>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nYou can only update information that was created with the createInfo command. For details, see cre-\nateInfo Command on page 92.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ninfoName\nEnter the name for the information that you wish to update.\ninfoValue\nEnter a string that represents the new information value.\nResponses\nThe command returns:\nUpdated info for <infoName>\nDetails\nThis command is used to update the value of a piece of information that resides on the connected device.\nThe information is initially created using the createInfo command. For details, see createInfo Command on\npage 92.\nThe updated information can be viewed using the getInfo command. For details, see getInfo Command on\npage 126 .\nAll information on the connected device can be listed with the getInfoList command. For details, see getIn-\nfoList Command on page 128.\nExamples\nTo update the information called \"myString\" from an initial value of \"testing\" to a new value of \"newtest\",\nenter the following:\nupdateinfo myString newtest\nThe command returns:\nAdept ARCL Reference Guide, Updated: 9:26:57 AM\nPage 293\n\nupdateInfo Command\nupdateInfo Command\nUpdates the value for and existing piece of information.\nSyntax\nupdateInfo\n <infoName> <infoValue>\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nYou can only update information that was created with the createInfo command. For details, see cre-\nateInfo Command on page 92.\nParameters\nThe command parameters are described in the following table.\nParameters\nDefinition\ninfoName\nEnter the name for the information that you wish to update.\ninfoValue\nEnter a string that represents the new information value.\nResponses\nThe command returns:\nUpdated info for <infoName>\nDetails\nThis command is used to update the value of a piece of information that resides on the connected device.\nThe information is initially created using the createInfo command. For details, see createInfo Command on\npage 92.\nThe updated information can be viewed using the getInfo command. For details, see getInfo Command on\npage 126 .\nAll information on the connected device can be listed with the getInfoList command. For details, see getIn-\nfoList Command on page 128.\nExamples\nTo update the information called \"myString\" from an initial value of \"testing\" to a new value of \"newtest\",\nenter the following:\nupdateinfo myString newtest\nThe command returns:\nAdept ARCL Reference Guide, Updated: 9:26:57 AM\nPage 293",
    "Page 294": "updateInfo Command\nUpdated info for myString\nRelated Commands\ncreateInfo Command on page 92\ngetInfo Command on page 126\ngetInfoList Command on page 128\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 294\n\nupdateInfo Command\nUpdated info for myString\nRelated Commands\ncreateInfo Command on page 92\ngetInfo Command on page 126\ngetInfoList Command on page 128\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 294",
    "Page 295": "waitTaskCancel Command\nwaitTaskCancel Command\nCancels a wait task if one is active.\nSyntax\nwaitTaskCancel\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nWaitState: <status>\nThe pauseTaskCancel command returns one of the following messages:\nl WaitState: Waiting with status \"Waiting\"\nl WaitState: Waiting interrupted\nl WaitState: Waiting cancelled\nl WaitState: Not waiting\nThese messages are broadcast to all of the clients, with the exception of \"Not waiting\".\nExamples\nThe following example starts, builds and executes a task list that contains a \"wait 10\" task (3rd task) on\nthe list. The waitTaskCancel command is used to cancel the wait task.\nliststart mylist\nList being cleared\nMaking new list\nlistadd goto g_5\nAdded task 'goto g_5' to the list\nlistadd goto g_6\nAdded task 'goto g_6' to the list\nlistadd wait 10\nAdded task 'wait 10' to the list\nlistadd goto g_23\nAdded task 'goto g_23' to the list\nlistexecute\nExecuting list\nWaitState: Waiting 10 seconds with status \"Waiting\"\nAdept ARCL Reference Guide, Updated: 9:26:57 AM\nPage 295\n\nwaitTaskCancel Command\nwaitTaskCancel Command\nCancels a wait task if one is active.\nSyntax\nwaitTaskCancel\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nWaitState: <status>\nThe pauseTaskCancel command returns one of the following messages:\nl\n WaitState: Waiting with status \"Waiting\"\nl\n WaitState: Waiting interrupted\nl\n WaitState: Waiting cancelled\nl\n WaitState: Not waiting\nThese messages are broadcast to all of the clients, with the exception of \"Not waiting\".\nExamples\nThe following example starts, builds and executes a task list that contains a \"wait 10\" task (3rd task) on\nthe list. The waitTaskCancel command is used to cancel the wait task.\nliststart mylist\nList being cleared\nMaking new list\nlistadd goto g_5\nAdded task 'goto g_5' to the list\nlistadd goto g_6\nAdded task 'goto g_6' to the list\nlistadd wait 10\nAdded task 'wait 10' to the list\nlistadd goto g_23\nAdded task 'goto g_23' to the list\nlistexecute\nExecuting list\nWaitState: Waiting 10 seconds with status \"Waiting\"\nAdept ARCL Reference Guide, Updated: 9:26:57 AM\nPage 295",
    "Page 296": "waitTaskCancel Command\nwaittaskcancel\nWaitState: Waiting completed\nSuccessfully finished task list\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 296\n\nwaitTaskCancel Command\nwaittaskcancel\nWaitState: Waiting completed\nSuccessfully finished task list\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 296",
    "Page 297": "waitTaskState Command\nwaitTaskState Command\nDisplays the status of the wait task.\nSyntax\nwaitTaskState\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nWaitState: <status>\nThe waitTaskState command returns one of the following messages:\nl WaitState: Waiting with status \"Pausing\"\nl WaitState: Waiting interrupted\nl WaitState: Waiting cancelled\nl WaitState: Not waiting\nThese messages are not broadcast to all of the clients, with the exception of \"Not waiting\". This command\nis helpful for finding out what the current state of the robot is when connecting to ARCL.\nExamples\nThe following example shows the status of the wait task.\nwaittaskstate\nWaitState: Waiting with status \"Waiting\"\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nAdept ARCL Reference Guide, Updated: 9:26:57 AM\nPage 297\n\nwaitTaskState Command\nwaitTaskState Command\nDisplays the status of the wait task.\nSyntax\nwaitTaskState\nUsage Considerations\nThis ARCL\u00a0command is only available on the robot.\nParameters\nThis command does not have any parameters.\nResponses\nThe command returns:\nWaitState: <status>\nThe waitTaskState command returns one of the following messages:\nl\n WaitState: Waiting with status \"Pausing\"\nl\n WaitState: Waiting interrupted\nl\n WaitState: Waiting cancelled\nl\n WaitState: Not waiting\nThese messages are\n not\n broadcast to all of the clients, with the exception of \"Not waiting\". This command\nis helpful for finding out what the current state of the robot is when connecting to ARCL.\nExamples\nThe following example shows the status of the wait task.\nwaittaskstate\nWaitState: Waiting with status \"Waiting\"\nRelated Commands\ndoTask Command on page 105\ndoTaskInstant Command on page 107\nexecuteMacro Command on page 112\ngetMacros Command on page 130\nlistAdd Command on page 145\nlistExecute Command on page 147\nAdept ARCL Reference Guide, Updated: 9:26:57 AM\nPage 297",
    "Page 298": "waitTaskState Command\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 298\n\nwaitTaskState Command\nlistStart Command on page 149\npauseTaskCancel Command on page 183\npauseTaskState Command on page 185\nwaitTaskCancel Command on page 295\nwaitTaskState Command on page 297\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 298",
    "Page 299": "ARCL Server Messages\nThe following table describes the server messages sent from ARCL to connected clients.\nServer Message\nDefinition\nMap changed\nThe map, with all of its related features, was just updated on the\nmobile robot.\nConfiguration changed\nOne or more ARAM configuration parameters was just updated on the\nmobile robot.\nTextRequestChargeVoltage\nThis message is displayed when the battery voltage is below the\nLowBatteryVoltage threshold. When this occurs, the server message\nis displayed once per minute.\nEstop pressed\nThe mobile robot motors were disabled.\nEstop relieved\nThe mobile robot motors were enabled.\nMotors disabled\nThe mobile robot motors were disabled, other than through an Estop.\nFor example, using the LCD-interactive option.\nError:\u00a0<error>\nThis message is displayed if an error occurs while a command is execut-\ning. For example:\nl Emergency stop pressed\nl Cannot find path\nl Failed going to goal\nl Stalled\nl Robot lost\nl Lost connection to robot\nl Server crashed\nInterrupted: <command>\nCommands may be interrupted. For example, if while going to goal2,\nyou send the stop command, ARCL sends: \"Interrupted: Going to\ngoal2\".\nDockingState:\nIncludes docking and charge state information; this happens\nwhenever there is a change to the docking state.\nARCL Server Messages\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 299\n\nARCL Server Messages\nThe following table describes the server messages sent from ARCL to connected clients.\nServer Message\nDefinition\nMap changed\nThe map, with all of its related features, was just updated on the\nmobile robot.\nConfiguration changed\nOne or more ARAM configuration parameters was just updated on the\nmobile robot.\nTextRequestChargeVoltage\nThis message is displayed when the battery voltage is below the\nLowBatteryVoltage threshold. When this occurs, the server message\nis displayed once per minute.\nEstop pressed\nThe mobile robot motors were disabled.\nEstop relieved\nThe mobile robot motors were enabled.\nMotors disabled\nThe mobile robot motors were disabled, other than through an Estop.\nFor example, using the LCD-interactive option.\nError:\u00a0<error>\nThis message is displayed if an error occurs while a command is execut-\ning. For example:\nl\n Emergency stop pressed\nl\n Cannot find path\nl\n Failed going to goal\nl\n Stalled\nl\n Robot lost\nl\n Lost connection to robot\nl\n Server crashed\nInterrupted: <command>\nCommands may be interrupted. For example, if while going to goal2,\nyou send the stop command, ARCL sends: \"Interrupted: Going to\ngoal2\".\nDockingState:\nIncludes docking and charge state information; this happens\nwhenever there is a change to the docking state.\nARCL Server Messages\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 299",
    "Page 300": "Robot Fault Messages\nThe following messages are broadcast to ARCL when robots set or clear faults.\nBroadcast Message\nDefinition\nRobot Fault\nFault_Application\nAn application-specific fault has occurred. A description of the fault\nmight be optionally provided by the application payload. The Enterprise\nManager will not assign jobs to the robot when faults are present.\nDriving_Application_Fault\nAn application-specific fault has occurred. A persistent popup will be dis-\nplayed to the user. The robot will be unable to drive while this fault is\nasserted.\nCritical OverTemperatureAnalog\nThe robot is too hot (measured by analog) and will shut down shortly.\nCritical UnderVoltage\nThe robot battery is critically low and will shut down shortly.\nEncoderDegraded\nThe robot's encoders may be degraded.\nCritical GyroFault\nThe robot's gyro has had a critical fault. You may power-cycle the robot\nand continue using it, but you should also contact your robot provider\nfor maintenance.\nRobot Fault Cleared\nEncoderDegraded\nThe robot's encoders may be degraded.\nDriving EncoderFailed\nThe robot's encoders have failed, turn off the robot and contact your\nrobot provider for maintenance.\nCritical GyroFault\nThe robot's gyro has had a critical fault, you may power cycle the robot\nand continue using it, but you should also contact your robot provider\nfor maintenance.\nCritical OverTemperatureAnalog\nThe robot is too hot (measured by analog) and will shut down shortly.\nCritical UnderVoltage\nThe robot battery is critically low and will shut down shortly.\nCritical_Application_Fault\nAn application-specific fault has occurred. A persistent popup will be dis-\nplayed to the user.\nSee Also...\nIntroduction to ARCL on page 25\nEnable Options in\nSet ARCL Parameters in MobilePlanner on page 30\nConnect to ARCL Using a Telnet Client on page 42\nUsing the ARCL Commands on page 46\nARCL Command Reference on page 70\nRobot Fault Messages\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 300\n\nRobot Fault Messages\nThe following messages are broadcast to ARCL when robots set or clear faults.\nBroadcast Message\nDefinition\nRobot Fault\nFault_Application\nAn application-specific fault has occurred. A description of the fault\nmight be optionally provided by the application payload. The Enterprise\nManager will not assign jobs to the robot when faults are present.\nDriving_Application_Fault\nAn application-specific fault has occurred. A persistent popup will be dis-\nplayed to the user. The robot will be unable to drive while this fault is\nasserted.\nCritical OverTemperatureAnalog\nThe robot is too hot (measured by analog) and will shut down shortly.\nCritical UnderVoltage\nThe robot battery is critically low and will shut down shortly.\nEncoderDegraded\nThe robot's encoders may be degraded.\nCritical GyroFault\nThe robot's gyro has had a critical fault. You may power-cycle the robot\nand continue using it, but you should also contact your robot provider\nfor maintenance.\nRobot Fault Cleared\nEncoderDegraded\nThe robot's encoders may be degraded.\nDriving EncoderFailed\nThe robot's encoders have failed, turn off the robot and contact your\nrobot provider for maintenance.\nCritical GyroFault\nThe robot's gyro has had a critical fault, you may power cycle the robot\nand continue using it, but you should also contact your robot provider\nfor maintenance.\nCritical OverTemperatureAnalog\nThe robot is too hot (measured by analog) and will shut down shortly.\nCritical UnderVoltage\nThe robot battery is critically low and will shut down shortly.\nCritical_Application_Fault\nAn application-specific fault has occurred. A persistent popup will be dis-\nplayed to the user.\nSee Also...\nIntroduction to ARCL on page 25\nEnable Options in\nSet ARCL Parameters in MobilePlanner on page 30\nConnect to ARCL Using a Telnet Client on page 42\nUsing the ARCL Commands on page 46\nARCL Command Reference on page 70\nRobot Fault Messages\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 300",
    "Page 301": "ARCL Server Messages on page 299\nSee Also...\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 301\n\nARCL Server Messages on page 299\nSee Also...\nAdept ARCL Reference Guide, Updated: 2/19/2016\nPage 301"
}